<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mandubian Blog]]></title>
  <link href="http://www.mandubian.com/atom.xml" rel="self"/>
  <link href="http://www.mandubian.com/"/>
  <updated>2014-02-15T01:33:16+01:00</updated>
  <id>http://www.mandubian.com/</id>
  <author>
    <name><![CDATA[Pascal Voitot]]></name>
    <email><![CDATA[pascal.voitot.dev@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ZPark-Ztream: Driving Spark distributed stream with Scalaz-Stream]]></title>
    <link href="http://www.mandubian.com/2014/02/13/zpark/"/>
    <updated>2014-02-13T18:18:00+01:00</updated>
    <id>http://www.mandubian.com/2014/02/13/zpark</id>
    <content type="html"><![CDATA[<p>The code &amp; sample apps can be found on <a href="https://github.com/mandubian/zpark-ztream">Github</a></p>

<blockquote><p>Today I&#8217;m going to write about a Proof of Concept I&#8217;ve been working on those last weeks: I wanted to <strong>use scalaz-stream as a driver of Spark distributed data processing</strong>.
This is simply an idea and I don&#8217;t even know whether it is viable or stupid. But the idea is interesting!</p></blockquote>

<h2>Introduction</h2>

<p>2 of my preferred topics those last months are :</p>

<ul>
<li>Realtime streaming</li>
<li>Realtime clustered data processing (in-memory &amp; fault-tolerant)</li>
</ul>


<p>2 tools have kept running through my head those last months:</p>

<ul>
<li><p><a href="https://github.com/scalaz/scalaz-stream">Scalaz-Stream</a> for realtime/continuous streaming using pure functional concepts: I find it very interesting conceptually speaking &amp; very powerful, specially the deterministic &amp; non-deterministic demuxtiplexers provided out-of-the-box (Tee &amp; Wye).</p></li>
<li><p><a href="https://spark.incubator.apache.org/">Spark</a> for fast/fault-tolerant in-memory, resilient &amp; clustered data processing.</p></li>
</ul>


<p>I won&#8217;t speak much about Scalaz-Stream because I wrote a few articles about it.</p>

<br/>


<h4>Let&#8217;s focus on Spark.</h4>

<p>Spark provides tooling for cluster processing of huge datasets in the same <em>batch mode</em> way as Hadoop, the very well known <em>map/reduce</em> infrastructure. But at the difference of Hadoop which is exclusively relying on HDFS cluster file systems when distributing data through the cluster, Spark tries to cache data in memory as much as possible so that latency of access is reduced as much as possible. Hadoop can scale a lot but is known to be slow in the context of a single node.</p>

<p>Spark is aimed at scaling as much as Hadoop but running faster on each node using in-memory caching. Fault-tolerance &amp; data resilience is managed by Spark too using persistence &amp; redundancy based on any nice storage like HDFS or files or whatever you can plug on Spark. So Spark is meant to be a super fast in-memory, fault-tolerant batch processing engine.</p>

<br/>


<h4>RDD Resilient Distributed Dataset</h4>

<p>The basic concept of Spark is <em>Resilient Distributed Dataset</em> aka <code>RDD</code> which is a read-only, <strong>immutable</strong> data structure representing a collection of objects or dataset that can be distributed across a set of nodes in a cluster to perform map/reduce style algorithms.</p>

<p>The dataset represented by this <code>RDD</code> is partitioned i.e. cut into slices called <em>partitions</em> that can be distributed across the cluster of nodes.</p>

<p><code>Resilient</code> means these data can be rebuilt in case of fault on a node or data loss. To perform this, the dataset is replicated/persisted across nodes in memory or in distributed file system such as HDFS.</p>

<p>So the idea of RDD is to provide a seamless structure to manage clustered datasets with very simple API in &#8220;monadic&#8221;-style :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">sc</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkContext</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;local[4]&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;Simple App&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;YOUR_SPARK_HOME&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="nc">List</span><span class="o">(</span><span class="s">&quot;target/scala-2.10/simple-project_2.10-1.0.jar&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">logData</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="n">logFile</span><span class="o">,</span> <span class="mi">2</span><span class="o">).</span><span class="n">cache</span><span class="o">().</span><span class="n">filter</span><span class="o">(</span><span class="n">line</span> <span class="k">=&gt;</span> <span class="n">line</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)).</span><span class="n">map</span><span class="o">(</span> <span class="k">_</span> <span class="o">+</span> <span class="s">&quot;foo&quot;</span> <span class="o">).</span><span class="n">count</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on your <code>SparkContext</code> configuration, Spark takes in charge of distributing behind the curtain your data to the cluster nodes to perform the required processing in a fully distributed way.</p>

<blockquote><p>One thing to keep in mind is that Spark distributes data to remote nodes but it also distributes the code/closures remotely. So it means your code has to be serializable which is not the case of scalaz-stream in its current implementation.</p></blockquote>

<br/>


<h4>Just a word on Spark code</h4>

<p>As usual, before using Spark in any big project, I&#8217;ve been diving in its code to know whether I can trust this project. I must say I know Spark&#8217;s code better than its API ;)</p>

<p>I find Spark Scala implementation quite clean with explicit choices of design made clearly in the purpose of performance. The need to provide a compatible Java/Python API and to distribute code across clustered nodes involves a few restrictions in terms of implementation choices. Anyway, I won&#8217;t criticize much because I wouldn&#8217;t have written it better and those people clearly know what they do!</p>

<br/>


<h2>Spark Streaming</h2>

<p>So Spark is very good to perform fast clustered batch data processing. Yet, what if your dataset is built progressively, continuously, in realtime?</p>

<p>On top of the core module, Spark provides an extension called <a href="https://spark.incubator.apache.org/docs/latest/streaming-programming-guide.html">Spark Streaming</a> aiming at manipulating live streams of data using the power of Spark.</p>

<p>Spark Streaming can ingest different continuous data feeds like Kafka, Flume, Twitter, ZeroMQ or TCP socket and perform high-level operations on it such as map/reduce/groupby/window/&#8230;</p>

<br/>


<h3>DStream</h3>

<p>The core data structure behind Spark Streams is <code>DStream</code> for <strong>Discretized Stream</strong> (and not <em>distributed</em>).</p>

<p><code>Discretized</code> means it gets a continuous stream of data and makes it discrete by slicing it across time and wrapping those sliced data into the famous <code>RDD</code> described above.</p>

<p>A <code>DStream</code> is just a temporal data partitioner that can distribute data slices across the cluster of nodes to perform some data processing using Spark capabilities.</p>

<p>Here is the illustration in official Spark Stream documentation:</p>

<p><img src="https://spark.incubator.apache.org/docs/latest/img/streaming-dstream.png" alt="streaming-dstream" /></p>

<p><code>DStream</code> also tries to leverage Spark automated persistence/caching/fault-tolerance to the domain of live streaming.</p>

<p><code>DStream</code> is cool but it&#8217;s completely based on temporal aspects. Imagine you want to slice the stream depending on other criteria, with <code>DStream</code>, it would be quite hard because the whole API is based on time. Moreover, using DStream, you can discretize a dataflow but you can&#8217;t go in the other way and make it continuous again (in my knowledge). This is something that would be cool, isn&#8217;t it?</p>

<p>If you want to know more about DStream discretization mechanism, have a look at the official <a href="https://spark.incubator.apache.org/docs/latest/streaming-programming-guide.html">doc</a>.</p>

<br/>


<blockquote><p>As usual, I&#8217;m trying to investigate the edge-cases of concepts I like. In general, this is where I can test the core design of the project and determine whether it&#8217;s worth investigating in my every-day life.</p></blockquote>

<br/>


<h2>Driving Spark Streams with Scalaz-Stream</h2>

<p>I&#8217;ve been thinking about scalaz-stream concepts quite a lot and scalaz-stream is very good at manipulating continuous streams of data. Moreover, it can very easily partition a continuous stream regrouping data into chunks based on any criteria you can imagine.</p>

<p>Scalaz-stream represents a data processing algorithm as a static state machine that you can run when you want. This is the same idea behind map/reduce Spark API: you build your chain of map/filter/window and finally reduce it. <em>Reducing a spark data processing is like running a scalaz-stream machine.</em></p>

<blockquote><p>So my idea was the following:</p>

<ul>
<li>build a continuous stream of data based on scalaz-stream <code>Process[F, O]</code></li>
<li>discretize the stream <code>Process[F, O] =&gt; Process[F, RDD[O]]</code></li>
<li>implement count/reduce/reduceBy/groupBy for <code>Process[F, RDD[O]]</code></li>
<li>provide a <code>continuize</code> method to do <code>Process[F, RDD[O]] =&gt; Process[F, O]</code></li>
</ul>
</blockquote>

<p>So I&#8217;ve been hacking between Scalaz-stream <code>Process[F, O]</code> &amp; Spark <code>RDD[O]</code> and here is the resulting API that I&#8217;ve called <code>ZPark-ZStream</code> (ZzzzzzPark-Zzzzztream).</p>

<p>Let&#8217;s play a bit with my little alpha API.</p>

<br/>


<h3>Discretization by simple slicing</h3>

<p>Let&#8217;s start with a very simple example.</p>

<p>Take a simple finite process containing integers:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">Long</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Process</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="mi">1L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">,</span> <span class="mi">5L</span><span class="o">,</span> <span class="mi">5L</span><span class="o">,</span> <span class="mi">6L</span><span class="o">,</span> <span class="mi">6L</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I want to slice this stream of integer by slices of 4 elements.</p>

<p>First we have to create the classic Spark Streaming context and make it implicit (needed by my API).</p>

<p><em>Please remark that I could plug existing StreamingContext on my code without any problem.</em></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">clusterUrl</span> <span class="k">=</span> <span class="s">&quot;local[4]&quot;</span>
</span><span class='line'><span class="k">implicit</span> <span class="n">ssc</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StreamingContext</span><span class="o">(</span><span class="n">clusterUrl</span><span class="o">,</span> <span class="s">&quot;SparkSerial&quot;</span><span class="o">,</span> <span class="nc">Seconds</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then let&#8217;s parallelize the previous process :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">prdd</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">RDD</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="k">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parallelize</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'><span class="c1">// type is just there to show what scalac will infer</span>
</span><span class='line'><span class="c1">// Just to remind that Task is the Future equivalent in Scalaz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok folks, now, we have a discretized stream of <code>Long</code> that can be distributed across a Spark cluster.</p>

<p><code>DStream</code> provides <code>count</code> API which count elements on each <code>RDD</code> in the stream.</p>

<p>Let&#8217;s do the same with my API:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">pcount</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">RDD</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="n">prdd</span><span class="o">.</span><span class="n">countRDD</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens here? The `count operation on each RDD in the stream is distributed across the cluster in a map/reduce-style and results are gathered.</p>

<p>Ok that&#8217;s cool but you still have a discretized stream <code>Process[Task, RDD[Int]]</code> and that&#8217;s not practical to use to see what&#8217;s inside it. So now we are going to <code>re-continuize</code> it and make it a <code>Process[Task, Int]</code> again.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">pfinal</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">pcount</span><span class="o">.</span><span class="n">continuize</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy isn&#8217;t it?</p>

<p>All together :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">Process</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="mi">1L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">parallelize</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">countRDD</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">continuize</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217; print the result in the console</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">stdOutLines</span><span class="o">[</span><span class="kt">I</span><span class="o">]</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">I</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">Process</span><span class="o">.</span><span class="n">constant</span><span class="o">{</span> <span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">I</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Task</span><span class="o">.</span><span class="n">delay</span> <span class="o">{</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot; ----&gt; [${System.nanoTime}] *** $s&quot;</span><span class="o">)</span> <span class="o">}}</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">p</span> <span class="n">through</span> <span class="n">stdOutLines</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'><span class="c1">// 1 run for the process &amp; 1 run for the Task</span>
</span><span class='line'>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418478569989000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">4</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418478593226000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Oh yes that works: in each slice of 4 elements, we actually have 4 elements! Reassuring ;)</p></blockquote>

<p>Let&#8217;s do the same with <code>countByValue</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">Process</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="mi">1L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">parallelize</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">countRDDByValue</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">continuize</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">p</span> <span class="n">through</span> <span class="n">stdOutLines</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'><span class="c1">// 1 run for the process &amp; 1 run for the Task</span>
</span><span class='line'>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418552751011000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418552751176000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418552770527000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418552770640000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that 4 comes before 3. This is due to the fact the 2nd slice of 4 elements (3,3,4,4) is converted into a RDD which is then partitioned and distributed across the cluster to perform the map/reduce count operation. So the order of return might be different at the end.</p>

<p>An example of map/reduce ?</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">Process</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="mi">1L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">3L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">,</span> <span class="mi">4L</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">parallelize</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">mapRDD</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1L</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">reduceRDD</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">continuize</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">p</span> <span class="n">through</span> <span class="n">stdOutLines</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418619885745000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">10</span> <span class="o">(</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="o">+</span><span class="mi">3</span><span class="o">+</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392418619905817000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">18</span> <span class="o">(</span><span class="mi">4</span><span class="o">+</span><span class="mi">4</span><span class="o">+</span><span class="mi">5</span><span class="o">+</span><span class="mi">5</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Please note that:</p></blockquote>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">p</span> <span class="n">mapRDD</span> <span class="n">f</span> <span class="o">===</span> <span class="n">p</span><span class="o">.</span><span class="n">map</span><span class="o">{</span> <span class="n">rdd</span> <span class="k">=&gt;</span> <span class="n">rdd</span> <span class="n">map</span> <span class="n">f</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Discretization by time slicing</h3>

<p>Now we could try to slice according to time in the same idea as <code>DStream</code></p>

<p>First of all, let&#8217;s define a continuous stream of positive integers:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">naturals</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">go</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Process</span><span class="o">.</span><span class="n">await</span><span class="o">(</span><span class="nc">Task</span><span class="o">.</span><span class="n">delay</span><span class="o">(</span><span class="n">i</span><span class="o">)){</span> <span class="n">i</span> <span class="k">=&gt;</span> <span class="nc">Process</span><span class="o">.</span><span class="n">emit</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">++</span> <span class="n">go</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">go</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I want integers to be emitted at a given tick for example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">naturalsEvery</span><span class="o">(</span><span class="n">duration</span><span class="k">:</span> <span class="kt">Duration</span><span class="o">)</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="n">naturals</span> <span class="n">zipWith</span> <span class="nc">Process</span><span class="o">.</span><span class="n">awakeEvery</span><span class="o">(</span><span class="n">duration</span><span class="o">)){</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">i</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, let&#8217;s discretize the continuous stream with <strong>ZPark-Ztream</strong> API:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">RDD</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">naturalsEvery</span><span class="o">(</span><span class="mi">10</span> <span class="n">milliseconds</span><span class="o">).</span><span class="n">discretize</span><span class="o">(</span><span class="mi">500</span> <span class="n">milliseconds</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The stream is sliced in slice of 500ms and all elements emitted during these 500ms are gathered in a Spark <code>RDD</code>.</p>

<p>On this stream of <code>RDD, we can apply</code>countRDD` as before and finally re-continuize it. All together we obtain:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">naturalsEvery</span><span class="o">(</span><span class="mi">10</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>  <span class="c1">// takes only 5000 because an infinite stream is hard to log in an article</span>
</span><span class='line'>  <span class="o">.</span><span class="n">discretize</span><span class="o">(</span><span class="mi">500</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">countRDD</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">continuize</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">p</span> <span class="n">through</span> <span class="n">stdOutLines</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395213389954000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">47</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395213705505000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">28</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395214191637000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">47</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395214688724000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">48</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395215189453000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">45</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395215697655000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">48</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395240677357000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395241175632000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">49</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395241674446000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395242175416000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395242675183000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395243177056000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395243676848000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">49</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395244175938000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">49</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395244676315000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395245175042000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392395245677394000</span><span class="o">]</span> <span class="o">***</span> <span class="mi">50</span>
</span><span class='line'> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Approximatively we have 50 elements per slice which looks like what we expected.</p>

<p><em>Please note that there is a short period of warmup where values are less homogenous.</em></p>

<br/>


<h3>Discretization by time slicing keeping track of time</h3>

<p><code>DStream</code> keeps track of all created RDD slices of data (following Spark philosophy to cache as much as possible) and allows to do operation of windowing to redistribute RDD.</p>

<p>With ZPark API, you can write the same as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">naturalsEvery</span><span class="o">(</span><span class="mi">10</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">500</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">discretizeKeepTime</span><span class="o">(</span><span class="mi">500</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">windowRDD</span><span class="o">(</span><span class="mi">1000</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">time</span><span class="o">,</span> <span class="n">rdd</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="o">(</span><span class="n">time</span><span class="o">,</span> <span class="n">rdd</span><span class="o">.</span><span class="n">count</span><span class="o">())</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">p</span> <span class="n">through</span> <span class="n">stdOutLines</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392397573066484000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1392397571981061000</span><span class="o">,</span><span class="mi">68</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392397574069315000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1392397572981063000</span><span class="o">,</span><span class="mi">85</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392397575058895000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1392397573981072000</span><span class="o">,</span><span class="mi">87</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392397576059640000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1392397574981078000</span><span class="o">,</span><span class="mi">89</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392397577069518000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1392397575981086000</span><span class="o">,</span><span class="mi">89</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392397577538941000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1392397576981095000</span><span class="o">,</span><span class="mi">82</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>We can see here that final interval haven&#8217;t 100 elements as we could expect.
This is still a mystery to me and I must investigate a bit more to know where this differences comes from. I have a few ideas but need to validate.</p>

<p>Anyway, globally we get 500 elements meaning we haven&#8217;t lost anything.</p></blockquote>

<br/>


<h3>Mixing scalaz-stream IO &amp; Spark streaming</h3>

<p>Playing with naturals is funny but let&#8217;s work with a real source of data like a file.</p>

<p>It could be anything pluggable on scalaz-stream like kafka/flume/whatever as <code>DStream</code> provides&#8230;</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">linesR</span><span class="o">(</span><span class="s">&quot;testdata/fahrenheit.txt&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">s</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">s</span><span class="o">.</span><span class="n">trim</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">s</span><span class="o">.</span><span class="n">startsWith</span><span class="o">(</span><span class="s">&quot;//&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">line</span> <span class="k">=&gt;</span> <span class="n">line</span><span class="o">.</span><span class="n">toDouble</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">discretize</span><span class="o">(</span><span class="mi">100</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">mapRDD</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="mi">1L</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">groupByKey</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="n">mapRDD</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="n">size</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">continuize</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">p</span> <span class="n">through</span> <span class="n">stdOutLines</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392398529009755000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mf">18.0</span><span class="o">,</span><span class="mi">23</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392398529010064000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mf">19.0</span><span class="o">,</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392398529010301000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mf">78.0</span><span class="o">,</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392398529010501000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mf">55.3</span><span class="o">,</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392398529010700000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mf">66.0</span><span class="o">,</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392398529010892000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mf">64.0</span><span class="o">,</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Infusing tee with RDD Processes</h3>

<p>Is it possible to combine RDD Processes using scalaz-stream ?</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p0</span> <span class="k">=</span> <span class="n">naturalsEvery</span><span class="o">(</span><span class="mi">100</span> <span class="n">milliseconds</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">50</span><span class="o">).</span><span class="n">discretize</span><span class="o">(</span><span class="mi">250</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">p1</span> <span class="k">=</span> <span class="n">naturalsEvery</span><span class="o">(</span><span class="mi">100</span> <span class="n">milliseconds</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">50</span><span class="o">).</span><span class="n">discretize</span><span class="o">(</span><span class="mi">250</span> <span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span>
</span><span class='line'> <span class="o">(</span><span class="n">p0</span> <span class="n">zipWith</span> <span class="n">p1</span><span class="o">){</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>   <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="n">apache</span><span class="o">.</span><span class="n">spark</span><span class="o">.</span><span class="n">rdd</span><span class="o">.</span><span class="nc">UnionRDD</span><span class="o">(</span><span class="n">ssc</span><span class="o">.</span><span class="n">sparkContext</span><span class="o">,</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">))</span>
</span><span class='line'> <span class="o">}.</span><span class="n">countRDDByValue</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">continuize</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">p</span> <span class="n">through</span> <span class="n">stdOutLines</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464151650000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464151819000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464230343000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464230528000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464477775000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464477921000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464478034000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">6</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464478143000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464726860000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">8</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464727039000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">7</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464975370000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">9</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464975511000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">10</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412464975620000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">11</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412465224087000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">12</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="o">----&gt;</span> <span class="o">[</span><span class="err">1392412465224227000</span><span class="o">]</span> <span class="o">***</span> <span class="o">(</span><span class="mi">13</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'> <span class="n">etc</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Please note that I drive Spark RDD stream with Scalaz-Stream always remains on the driver node and is never sent to a remote node as map/reduce closures are in Spark. So Scalaz-stream is used a stream driver in this case. Moreover, Scalaz Process isn&#8217;t serializable in its current implementation so it wouldn&#8217;t be possible as is.</p></blockquote>

<br/>


<br/>


<h2>What about persistence &amp; fault tolerance?</h2>

<p>After discretizing a process, you can persist each RDD :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">p</span><span class="o">.</span><span class="n">discretize</span><span class="o">(</span><span class="mi">250</span> <span class="n">milliseconds</span><span class="o">).</span><span class="n">mapRDD</span> <span class="o">{</span><span class="err"> </span><span class="k">_</span><span class="o">.</span><span class="n">persist</span><span class="o">()</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok but <code>DStream</code> does much more trying to keep in-memory every RDD that is generated and potentially persist it across the cluster. This makes things stateful &amp; mutable which is not the approach of pure functional API like scalaz-stream. So, I need to think a bit more about this persistence topic which is huge.</p>

<p>Anyway I believe I&#8217;m currently investigating another way of manipulating distributed streams than <code>DStream</code>.</p>

<br/>


<br/>


<h2>Conclusion</h2>

<p>Spark is quite amazing and easy to use with respect to the complexity of the subject.</p>

<p>I was also surprised to be able to use it with scalaz-stream so easily.</p>

<p>I hope you liked the idea and I encourage you to think about it and if you find it cool, please tell it! And if you find it stupid, please tell it too: this is still a pure experiment ;)</p>

<p>Have a look at the code on <a href="https://github.com/mandubian/zpark-ztream">Github</a>.</p>

<p>Have distributed &amp; resilient yet continuous fun!</p>

<br/>


<br/>


<br/>


<br/>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Play 2.3 Validation API : breaking the 22 limits with Shapeless]]></title>
    <link href="http://www.mandubian.com/2014/01/31/play-rules-shapeless/"/>
    <updated>2014-01-31T08:08:00+01:00</updated>
    <id>http://www.mandubian.com/2014/01/31/play-rules-shapeless</id>
    <content type="html"><![CDATA[<p>The code &amp; sample apps can be found on <a href="https://github.com/mandubian/shapeless-rules">Github</a></p>

<p>After 5 months studying theories deeper &amp; deeper on my free-time and preparing 3 talks for <a href="http://www.scala.io">scala.io</a> &amp; <a href="http://www.ping-conf.com">ping-conf</a> with my friend <a href="http://www.twitter.com/skaalf">Julien Tournay aka @skaalf</a>, I&#8217;m back blogging and I&#8217;ve got a few more ideas of articles to come&#8230;</p>

<blockquote><p>If you&#8217;re interested in those talks, you can find pingconf videos here:</p>

<ul>
<li><a href="http://www.ustream.tv/recorded/42778238">Entropic history &amp; Play2.3 new validation API</a></li>
<li><a href="http://www.ustream.tv/recorded/42802705">Play2, scalaz-stream &amp; SciFi</a></li>
</ul>
</blockquote>

<p>Let&#8217;s go back to our today&#8217;s subject : <strong>Incoming Play2.3/Scala generic validation API &amp; more</strong>.</p>

<p><a href="http://www.twitter.com/skaalf">Julien Tournay aka @skaalf</a> has been working a lot for a few months developing this new API and has just published an article previewing <a href="http://jto.github.io/articles/play_new_validation_api/">Play 2.3 generic validation API</a>.</p>

<p>This new API is just the logical extension of play2/Scala Json API (that I&#8217;ve been working &amp; promoting those 2 last years) pushing its principles far further by allowing validation on any data types.</p>

<p>This new API is a real step further as it will progressively propose a common API for all validations in Play2/Scala (Form/Json/XML/&#8230;). It proposes an even more robust design relying on very strong theoretical ground making it very reliable &amp; typesafe.</p>

<p>Julien has written his <a href="http://jto.github.io/articles/play_new_validation_api/">article</a> presenting the new API basics and he also found time to write great documentation for this new validation API. I must confess Json API doc was quite messy but I&#8217;ve never found freetime (and courage) to do better. So I&#8217;m not going to spend time on basic features of this new API and I&#8217;m going to target advanced features to open your minds about the power of this new API.</p>

<blockquote><p>Let&#8217;s have fun with this new APi &amp; <a href="https://github.com/milessabin/shapeless">Shapeless</a>, this fantastic tool for higher-rank polymorphism &amp; type-safety!</p></blockquote>

<br/>


<h2>Warm-up with Higher-kind Zipping of Rules</h2>

<p>A really cool &amp; new feature of Play2.3 generic validation API is its ability to compose validation Rules in chains like:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">rule1</span><span class="k">:</span> <span class="kt">Rule</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="k">val</span> <span class="n">rule2</span><span class="k">:</span> <span class="kt">Rule</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">C</span><span class="o">]</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">rule3</span><span class="k">:</span> <span class="kt">Rule</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">C</span><span class="o">]</span> <span class="k">=</span> <span class="n">rule1</span> <span class="n">compose</span> <span class="n">rule2</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>In Play2.1 Json API, you couldn&#8217;t do that (you could only map on Reads).</em></p>

<p>Moreover, with new validation API, as in Json API, you can use macros to create basic validators from case-classes.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">FooBar</span><span class="o">(</span><span class="n">foo</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">bar</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">foo2</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">rule</span> <span class="k">=</span> <span class="nc">Rule</span><span class="o">.</span><span class="n">gen</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">FooBar</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Action to validate Json:</span>
</span><span class='line'><span class="cm">  * { foo: &quot;toto&quot;, bar: 5, foo2: 2 }</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">action</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">rule</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">foobar</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">foobar</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="n">recoverTotal</span> <span class="o">{</span> <span class="n">errors</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span><span class="n">errors</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great but sometimes not enough as you would like to add custom validations on your class.
For example, you want to verify :</p>

<ul>
<li><code>foo</code> isn&#8217;t empty</li>
<li><code>bar</code> is >5</li>
<li><code>foo2</code> is &lt;10</li>
</ul>


<p>For that you can&#8217;t use the macro and must write your caseclass Rule yourself.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">FooBar</span><span class="o">(</span><span class="n">foo</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">bar</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">foo2</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.data.mapping.json.Rules</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Rules._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">rule</span> <span class="k">=</span> <span class="nc">From</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="o">{</span> <span class="nc">__</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="n">notEmpty</span><span class="o">)</span> <span class="o">~</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="n">min</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span> <span class="o">~</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo2&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="n">max</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
</span><span class='line'>  <span class="o">)(</span><span class="nc">FooBar</span><span class="o">.</span><span class="n">apply</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note the new <code>From[JsValue]</code>: if it were Xml, it would be <code>From[Xml]</code>, genericity requires some more info.</em></p>

<p>Ok that&#8217;s not too hard but sometimes you would like to use first the macro and after those primary type validations, you want to refine with custom validations. Something like:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Rule</span><span class="o">.</span><span class="n">gen</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">FooBar</span><span class="o">]</span> <span class="o">+?+?+</span> <span class="o">(</span> <span class="o">(</span><span class="n">notEmpty</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">])</span> <span class="o">+:</span> <span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">])</span> <span class="o">+:</span> <span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">10L</span><span class="o">)</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">Long</span><span class="o">])</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// +?+?+ is a non-existing operator meaning &quot;compose&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you may know, you can&#8217;t do use this <code>+:</code> from Scala <code>Sequence[T]</code> as this list of Rules is typed heterogenously and <code>Rule[I, O]</code> is invariant.</p>

<p>So we are going to use Shapeless heterogenous Hlist for that:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">customRules</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="n">notEmpty</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">])</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">])</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">10L</span><span class="o">)</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">Long</span><span class="o">])</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'><span class="c1">// customRules is inferred Rule[String, String]) :: Rule[Int, Int] :: Rule[Long,Long]</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h4>How to compose <code>Rule[JsValue, FooBar]</code> with <code>Rule[String, String]) :: Rule[Int, Int] :: Rule[Long,Long]</code> ?</h4>

<br/>


<p>We need to convert <code>Rule[JsValue, FooBar]</code> to something like <code>Rule[JsValue, T &lt;: HList]</code>.</p>

<p>Based on Shapeless <code>Generic[T]</code>, we can provide a nice little new conversion API <code>.hlisted</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">rule</span><span class="k">:</span> <span class="kt">Rule</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Int</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Rule</span><span class="o">.</span><span class="n">gen</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">FooBar</span><span class="o">].</span><span class="n">hlisted</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Generic[T]</code> is able to convert any caseclass from Scala from/to Shapeless HList (&amp; CoProduct).</p>

<p>So we can validate a case class with the macro and get a <code>Rule[JsValue, T &lt;: HList]</code> from it.</p>

<br/>


<br/>


<h4>How to compose <code>Rule[JsValue, String :: Int :: Long :: HNil]</code> with <code>Rule[String, String]) :: Rule[Int, Int] :: Rule[Long,Long]</code>?</h4>

<br/>


<p>Again, using Shapeless Polymorphic and HList RightFolder, we can implement a function :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Rule</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">])</span> <span class="o">::</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="o">::</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">Long</span><span class="o">]</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Rule</span><span class="o">[</span><span class="kt">String</span> <span class="kt">::</span> <span class="kt">Int</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span>, <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Int</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This looks like some higher-kind zip function, let&#8217;s call it <code>HZIP</code>.</p></blockquote>

<br/>


<br/>


<h4>Now, we can compose them&#8230;</h4>

<br/>




<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ruleZip</span> <span class="k">=</span> <span class="nc">Rule</span><span class="o">.</span><span class="n">gen</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">FooBar</span><span class="o">].</span><span class="n">hlisted</span> <span class="n">compose</span> <span class="n">hzip</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="n">notEmpty</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">])</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">])</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">10L</span><span class="o">)</span><span class="k">:</span><span class="kt">Rule</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">Long</span><span class="o">])</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Finally, let&#8217;s wire all together in a Play action:</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">hzipper</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">ruleZip</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">foobar</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">foobar</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="n">recoverTotal</span> <span class="o">{</span> <span class="n">errors</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span><span class="n">errors</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OK case</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;foo&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;bar&quot;</span> <span class="k">:</span> <span class="err">5</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo2&quot;</span> <span class="k">:</span> <span class="err">5</span>
</span><span class='line'><span class="o">}</span> <span class="k">=&gt;</span> <span class="n">toto</span> <span class="o">::</span> <span class="mi">5</span> <span class="o">::</span> <span class="mi">8</span> <span class="o">::</span> <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// KO case</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;foo&quot;</span> <span class="k">:</span> <span class="err">&quot;&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;bar&quot;</span> <span class="k">:</span> <span class="err">2</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo2&quot;</span> <span class="k">:</span> <span class="err">12</span>
</span><span class='line'><span class="o">}</span> <span class="k">=&gt;</span> <span class="nc">Failure</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span>
</span><span class='line'>  <span class="o">([</span><span class="err">0</span><span class="o">],</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">max</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="mi">10</span><span class="o">)))),</span>
</span><span class='line'>  <span class="o">([</span><span class="err">1</span><span class="o">],</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">min</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="mi">5</span><span class="o">)))),</span>
</span><span class='line'>  <span class="o">([</span><span class="err">2</span><span class="o">],</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">required</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">())))</span>
</span><span class='line'><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>As you can see, the problem in this approach is that we lose the path of Json.
Anyway, this can give you a few ideas!
Now let&#8217;s do something really useful&#8230;</p></blockquote>

<br/>


<br/>


<h2>Higher-kind Fold of Rules to break the 22 limits</h2>

<p>As in Play2.1 Json API, the new validation API provides an applicative builder which allows the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">A</span><span class="o">]</span> <span class="o">~</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">B</span><span class="o">]</span> <span class="o">~</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">C</span><span class="o">]).</span><span class="n">tupled</span> <span class="k">=&gt;</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="o">(</span><span class="kt">A</span>, <span class="kt">B</span>, <span class="kt">C</span><span class="o">)]</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">A</span><span class="o">]</span> <span class="o">~</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">B</span><span class="o">]</span> <span class="o">~</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">C</span><span class="o">])(</span><span class="nc">MyClass</span><span class="o">.</span><span class="n">apply</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">MyClass</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, in Play2.1 Json API and also in new validation API, all functional combinators are limited by the famous Scala 22 limits.</p>

<p>In Scala, you <strong>CAN&#8217;T</strong> write :</p>

<ul>
<li>a case-class with >22 fields</li>
<li>a <code>Tuple23</code></li>
</ul>


<p><strong>So you can&#8217;t do <code>Rule[JsValue, A] ~ Rule[JsValue, B] ~ ...</code> more than 22 times.</strong></p>

<p>Nevertheless, sometimes you receive huge JSON with much more than 22 fields in it. Then you have to build more complex models like case-classes embedding case-classes&#8230; Shameful, isn&#8217;t it&#8230;</p>

<p>Let&#8217;s be shameless with Shapeless HList which enables to have unlimited heterogenously typed lists!</p>

<p>So, with HList, we can write :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">bigRule</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo1&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo2&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo3&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo4&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo5&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo6&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo7&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo8&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo9&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo10&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo12&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo13&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo14&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo15&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo16&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo17&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo18&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo19&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo20&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo21&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo22&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo23&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo25&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo26&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo27&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo28&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo29&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo30&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo31&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo32&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo33&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo34&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo35&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo36&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo37&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo38&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo39&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo40&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo41&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo42&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo43&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo44&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo45&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo46&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo47&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo48&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo49&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo50&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">JsNull.</span><span class="k">type</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// inferred as Rule[JsValue, String] :: Rule[JsValue, String] :: ... :: Rule[JsValue, List[Long]] :: HNil</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s cool but we want the <code>::</code> operator to have the same <code>applicative builder behavior as the</code>~/and` operator:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Rule</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">String</span><span class="o">]</span> <span class="o">::</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">Long</span><span class="o">]</span> <span class="o">::</span> <span class="nc">Rule</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">Float</span><span class="o">]</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="nc">Rule</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">Float</span> <span class="kt">::</span> <span class="kt">HNil</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This looks like a higher-kind fold so let&#8217;s call that <code>HFOLD</code>.</p></blockquote>

<p>We can build this <code>hfold</code> using Shapeless polymorphic functions &amp; RighFolder.</p>

<p><em>In a next article, I may write about coding such shapeless feature. Meanwhile, you&#8217;ll have to discover the code on <a href="https://github.com/mandubian/shapeless-rules">Github</a> as it&#8217;s a bit hairy but very interesting ;)</em></p>

<p>Gathering everything, we obtain the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/* Rules Folding */</span>
</span><span class='line'><span class="k">val</span> <span class="n">ruleFold</span> <span class="k">=</span> <span class="nc">From</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]{</span> <span class="nc">__</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">hfold</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo1&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo2&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo3&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo4&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo5&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo6&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo7&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo8&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo9&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo10&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo12&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo13&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo14&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo15&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo16&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo17&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo18&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo19&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo20&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo21&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo22&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo23&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo25&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo26&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo27&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo28&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo29&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo30&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo31&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo32&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo33&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo34&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo35&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo36&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo37&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo38&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo39&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo40&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo41&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo42&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo43&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo44&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo45&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo46&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo47&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo48&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo49&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Long</span><span class="o">]]</span> <span class="o">::</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span>  <span class="o">\</span> <span class="s">&quot;foo50&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">JsNull.</span><span class="k">type</span><span class="o">]</span> <span class="o">::</span>
</span><span class='line'>    <span class="nc">HNil</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s write a play action using this rule:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">hfolder</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">ruleFold</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">hl</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">hl</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="n">recoverTotal</span> <span class="o">{</span> <span class="n">errors</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span><span class="n">errors</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OK</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;foo1&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto1</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo2&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto2</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo3&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto3</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo4&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto4</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo5&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto5</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo6&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto6</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo7&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto7</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo8&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto8</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo9&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto9</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo10&quot;</span> <span class="k">:</span> <span class="err">10</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo11&quot;</span> <span class="k">:</span> <span class="err">11</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo12&quot;</span> <span class="k">:</span> <span class="err">12</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo13&quot;</span> <span class="k">:</span> <span class="err">13</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo14&quot;</span> <span class="k">:</span> <span class="err">14</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo15&quot;</span> <span class="k">:</span> <span class="err">15</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo16&quot;</span> <span class="k">:</span> <span class="err">16</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo17&quot;</span> <span class="k">:</span> <span class="err">17</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo18&quot;</span> <span class="k">:</span> <span class="err">18</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo19&quot;</span> <span class="k">:</span> <span class="err">19</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo20&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo21&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo22&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo23&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo24&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo25&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo26&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo27&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo28&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo29&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo30&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo31&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">1</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo32&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">2</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo33&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">3</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo34&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">4</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo35&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">5</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo36&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">6</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo37&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">7</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo38&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">8</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo39&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">9</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo40&quot;</span> <span class="k">:</span> <span class="err">[1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo41&quot;</span> <span class="k">:</span> <span class="err">[11</span><span class="o">,</span><span class="mi">21</span><span class="o">,</span><span class="mi">31</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo42&quot;</span> <span class="k">:</span> <span class="err">[12</span><span class="o">,</span><span class="mi">22</span><span class="o">,</span><span class="mi">32</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo43&quot;</span> <span class="k">:</span> <span class="err">[13</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">33</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo44&quot;</span> <span class="k">:</span> <span class="err">[14</span><span class="o">,</span><span class="mi">24</span><span class="o">,</span><span class="mi">34</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo45&quot;</span> <span class="k">:</span> <span class="err">[15</span><span class="o">,</span><span class="mi">25</span><span class="o">,</span><span class="mi">35</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo46&quot;</span> <span class="k">:</span> <span class="err">[16</span><span class="o">,</span><span class="mi">26</span><span class="o">,</span><span class="mi">36</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo47&quot;</span> <span class="k">:</span> <span class="err">[17</span><span class="o">,</span><span class="mi">27</span><span class="o">,</span><span class="mi">37</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo48&quot;</span> <span class="k">:</span> <span class="err">[18</span><span class="o">,</span><span class="mi">28</span><span class="o">,</span><span class="mi">38</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo49&quot;</span> <span class="k">:</span> <span class="err">[19</span><span class="o">,</span><span class="mi">29</span><span class="o">,</span><span class="mi">39</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo50&quot;</span> <span class="k">:</span> <span class="kt">null</span>
</span><span class='line'><span class="o">}</span> <span class="k">=&gt;</span> <span class="n">toto1</span> <span class="o">::</span> <span class="n">toto2</span> <span class="o">::</span> <span class="n">toto3</span> <span class="o">::</span> <span class="n">toto4</span> <span class="o">::</span> <span class="n">toto5</span> <span class="o">::</span> <span class="n">toto6</span> <span class="o">::</span> <span class="n">toto7</span> <span class="o">::</span> <span class="n">toto8</span> <span class="o">::</span> <span class="n">toto9</span> <span class="o">::</span>
</span><span class='line'>  <span class="mi">10</span> <span class="o">::</span> <span class="mi">11</span> <span class="o">::</span> <span class="mi">12</span> <span class="o">::</span> <span class="mi">13</span> <span class="o">::</span> <span class="mi">14</span> <span class="o">::</span> <span class="mi">15</span> <span class="o">::</span> <span class="mi">16</span> <span class="o">::</span> <span class="mi">17</span> <span class="o">::</span> <span class="mi">18</span> <span class="o">::</span> <span class="mi">19</span> <span class="o">::</span>
</span><span class='line'>  <span class="kc">true</span> <span class="o">::</span> <span class="kc">false</span> <span class="o">::</span> <span class="kc">true</span> <span class="o">::</span> <span class="kc">false</span> <span class="o">::</span> <span class="kc">false</span> <span class="o">::</span> <span class="kc">true</span> <span class="o">::</span> <span class="kc">false</span> <span class="o">::</span> <span class="kc">true</span> <span class="o">::</span> <span class="kc">false</span> <span class="o">::</span>
</span><span class='line'>  <span class="mf">3.0</span> <span class="o">::</span> <span class="mf">3.1</span> <span class="o">::</span> <span class="mf">3.2</span> <span class="o">::</span> <span class="mf">3.3</span> <span class="o">::</span> <span class="mf">3.4</span> <span class="o">::</span> <span class="mf">3.5</span> <span class="o">::</span> <span class="mf">3.6</span> <span class="o">::</span> <span class="mf">3.7</span> <span class="o">::</span> <span class="mf">3.8</span> <span class="o">::</span> <span class="mf">3.9</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="o">::</span> <span class="nc">List</span><span class="o">(</span><span class="mi">11</span><span class="o">,</span> <span class="mi">21</span><span class="o">,</span> <span class="mi">31</span><span class="o">)</span> <span class="o">::</span> <span class="nc">List</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">22</span><span class="o">,</span> <span class="mi">32</span><span class="o">)</span> <span class="o">::</span> <span class="nc">List</span><span class="o">(</span><span class="mi">13</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">33</span><span class="o">)</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">List</span><span class="o">(</span><span class="mi">14</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="mi">34</span><span class="o">)</span> <span class="o">::</span> <span class="nc">List</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="mi">25</span><span class="o">,</span> <span class="mi">35</span><span class="o">)</span> <span class="o">::</span> <span class="nc">List</span><span class="o">(</span><span class="mi">16</span><span class="o">,</span> <span class="mi">26</span><span class="o">,</span> <span class="mi">36</span><span class="o">)</span> <span class="o">::</span> <span class="nc">List</span><span class="o">(</span><span class="mi">17</span><span class="o">,</span> <span class="mi">27</span><span class="o">,</span> <span class="mi">37</span><span class="o">)</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">List</span><span class="o">(</span><span class="mi">18</span><span class="o">,</span> <span class="mi">28</span><span class="o">,</span> <span class="mi">38</span><span class="o">)</span> <span class="o">::</span> <span class="nc">List</span><span class="o">(</span><span class="mi">19</span><span class="o">,</span> <span class="mi">29</span><span class="o">,</span> <span class="mi">39</span><span class="o">)</span> <span class="o">::</span> <span class="kc">null</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// KO</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;foo1&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto1</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo2&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto2</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo3&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto3</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo4&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto4</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo5&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto5</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo6&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto6</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo7&quot;</span> <span class="k">:</span> <span class="err">50</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo8&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto8</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo9&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto9</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo10&quot;</span> <span class="k">:</span> <span class="err">10</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo11&quot;</span> <span class="k">:</span> <span class="err">11</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo12&quot;</span> <span class="k">:</span> <span class="err">12</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo13&quot;</span> <span class="k">:</span> <span class="err">13</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo14&quot;</span> <span class="k">:</span> <span class="err">14</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo15&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo16&quot;</span> <span class="k">:</span> <span class="err">16</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo17&quot;</span> <span class="k">:</span> <span class="err">17</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo18&quot;</span> <span class="k">:</span> <span class="err">18</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo19&quot;</span> <span class="k">:</span> <span class="err">19</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo20&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo21&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo22&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo23&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo24&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo25&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo26&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo27&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">chboing</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo28&quot;</span> <span class="k">:</span> <span class="kt">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo29&quot;</span> <span class="k">:</span> <span class="kt">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo30&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo31&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">1</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo32&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">2</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo33&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">3</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo34&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">4</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo35&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">5</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo36&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">6</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo37&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">7</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo38&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">8</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo39&quot;</span> <span class="k">:</span> <span class="err">3</span><span class="kt">.</span><span class="err">9</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo40&quot;</span> <span class="k">:</span> <span class="err">[1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo41&quot;</span> <span class="k">:</span> <span class="err">[11</span><span class="o">,</span><span class="mi">21</span><span class="o">,</span><span class="mi">31</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo42&quot;</span> <span class="k">:</span> <span class="err">[12</span><span class="o">,</span><span class="mi">22</span><span class="o">,</span><span class="mi">32</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo43&quot;</span> <span class="k">:</span> <span class="err">[13</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">33</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo44&quot;</span> <span class="k">:</span> <span class="err">[14</span><span class="o">,</span><span class="mi">24</span><span class="o">,</span><span class="mi">34</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo45&quot;</span> <span class="k">:</span> <span class="err">[15</span><span class="o">,</span><span class="mi">25</span><span class="o">,</span><span class="mi">35</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo46&quot;</span> <span class="k">:</span> <span class="err">[16</span><span class="o">,</span><span class="mi">26</span><span class="o">,</span><span class="s">&quot;blabla&quot;</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo47&quot;</span> <span class="k">:</span> <span class="err">[17</span><span class="o">,</span><span class="mi">27</span><span class="o">,</span><span class="mi">37</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo48&quot;</span> <span class="k">:</span> <span class="err">[18</span><span class="o">,</span><span class="mi">28</span><span class="o">,</span><span class="mi">38</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo49&quot;</span> <span class="k">:</span> <span class="err">[19</span><span class="o">,</span><span class="mi">29</span><span class="o">,</span><span class="mi">39</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;foo50&quot;</span> <span class="k">:</span> <span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span>
</span><span class='line'><span class="o">}</span> <span class="k">=&gt;</span> <span class="nc">Failure</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">foo50</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">invalid</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="kc">null</span><span class="o">)))),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">foo46</span><span class="o">[</span><span class="err">2</span><span class="o">],</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">number</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="nc">Long</span><span class="o">)))),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">foo27</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">invalid</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="nc">Boolean</span><span class="o">)))),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">foo15</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">number</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="nc">Int</span><span class="o">)))),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">foo7</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="n">invalid</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="nc">String</span><span class="o">))</span>
</span><span class='line'><span class="o">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome&#8230; now, nobody can say 22 limits is still a problem ;)</p>

<p>Have a look at the code on <a href="https://github.com/mandubian/shapeless-rules">Github</a>.</p>

<p>Have fun x 50!</p>

<br/>


<br/>


<br/>


<br/>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play 2.2 Actor Room: websocket (&more) room manager only with actors]]></title>
    <link href="http://www.mandubian.com/2013/09/22/play-actor-room/"/>
    <updated>2013-09-22T17:17:00+02:00</updated>
    <id>http://www.mandubian.com/2013/09/22/play-actor-room</id>
    <content type="html"><![CDATA[<p>The code &amp; sample apps can be found on Github <a href="https://github.com/mandubian/play-actor-room">here</a></p>

<br/>




<div class="well">
<b>Actor-Room</b> makes it easy to:

<ul>
  <li>create any group of connected entities (people or not) (chatroom, forum, broadcast pivot&#8230;).</li>
  <li>manage connections, disconnections, broadcast, targetted message through actor and nothing else.</li>
</ul>

For now, members can be:
<ul>
  <li>websocket endpoints through actors without taking care of Iteratees/Enumerators&#8230;</li>
  <li>Bots to simulate members</li>
</ul>
</div>




<br/>


<h2>Reminders on websockets in Play</h2>

<p>Here is the function Play provides to create a websocket:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">async</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span>
</span><span class='line'>  <span class="n">f</span><span class="k">:</span> <span class="kt">RequestHeader</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[(</span><span class="kt">Iteratee</span><span class="o">[</span><span class="kt">A</span>, <span class="k">_</span><span class="o">]</span>, <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">A</span><span class="o">])]</span>
</span><span class='line'><span class="o">)(</span><span class="k">implicit</span> <span class="n">frameFormatter</span><span class="k">:</span> <span class="kt">FrameFormatter</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">WebSocket</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>A websocket is a persistent bi-directional channel of communication (in/out) and is created with:</p>

<ul>
<li>an <code>Iteratee[A, _]</code> to manage all frames received by the websocket endpoint</li>
<li>an <code>Enumerator[A]</code> to send messages through the websocket</li>
<li>an implicit <code>FrameFormatter[A]</code> to parse frame content to type <code>A</code> (Play provides default FrameFormatter for String or JsValue)</li>
</ul>


<p>Here is how you traditionally create a websocket endpoint in Play:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">MyController</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">connect</span> <span class="k">=</span> <span class="nc">Websocket</span><span class="o">.</span><span class="n">async</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]{</span> <span class="n">rh</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">// the iteratee to manage received messages</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">iteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span> <span class="n">js</span> <span class="k">=&gt;</span> <span class="o">...)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// the enumerator to be able to send messages</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">enumerator</span> <span class="k">=</span> <span class="c1">// generally a PushEnumerator</span>
</span><span class='line'>        <span class="o">(</span><span class="n">iteratee</span><span class="o">,</span> <span class="n">enumerator</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generally, the <code>Enumerator[A]</code> is created using <code>Concurrent.broadcast[A]</code> and <code>Concurrent.unicast[A]</code> which are very powerful tools but not so easy to understand exactly (the edge-cases of connection close, errors are always tricky).</p>

<p>You often want to:</p>

<ul>
<li>manage multiple client connections at the same time</li>
<li>parse messages received from websockets,</li>
<li>do something with the message payload</li>
<li>send messages to a given client</li>
<li>broadcast messages to all connected members</li>
<li>create bots to be able to simulate fake connected members</li>
<li>etc&#8230;</li>
</ul>


<p>To do that in Play non-blocking/async architecture, you often end developing an Actor topology managing all events/messages on top of the previous <code>Iteratee/Enumerator</code>.</p>

<p>The <code>Iteratee/Enumerator</code> is quite generic but always not so easy to write.</p>

<p>The actor topology is quite generic because there are administration messages that are almost always the same:</p>

<ul>
<li>Connection/Forbidden/Disconnection</li>
<li>Broadcast/Send</li>
</ul>


<br/>


<blockquote><p><strong>Actor Room</strong> is a helper managing all of this for you.
So you can just focus on message management using actors and nothing else. It provides all default behaviors and all behaviors can be overriden if needed. It exposes only actors and nothing else.</p></blockquote>

<br/>


<p><em>The code is based on the chatroom sample (and a cool sample by Julien Tournay) from Play Framework pushed far further and in a more generic way.</em></p>

<br/>


<br/>


<h2>What is Actor Room?</h2>

<p>An actor room manages a group of connected members which are supervised by a supervisor</p>

<h3>Member = 2 actors (receiver/sender)</h3>

<p>Each member is represented by 2 actors (1 receiver &amp; 1 sender):</p>

<ul>
<li><p><strong>You MUST create at least a Receiver Actor because it&#8217;s your job to manage your own message format</strong></p></li>
<li><p>The Sender Actor has a default implementation but you can override it.</p></li>
</ul>


<br/>


<h3>Supervisor = 1 actor</h3>

<p>All actors are managed by 1 supervisor which have two roles:</p>

<ul>
<li><p>Creates/supervises all receiver/sender actors</p></li>
<li><p>Manages administration messages (routing, forwarding, broadcasting etc&#8230;)</p></li>
</ul>


<br/>


<br/>


<h1>Code sample step by step</h1>

<h2>Create the Actor Room</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// default constructor</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">room</span> <span class="k">=</span> <span class="nc">Room</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// constructor with custom supervisor</span>
</span><span class='line'>  <span class="c1">// custom supervisor are described later</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">room</span> <span class="k">=</span> <span class="nc">Room</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">CustomSupervisor</span><span class="o">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The room creates the Supervisor actor for you and delegates the creation of receiver/sender actors to it.</p>

<p>If you want to broadcast a message or target a precise member, you should use the supervisor.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">room</span><span class="o">.</span><span class="n">supervisor</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="s">&quot;fromId&quot;</span><span class="o">,</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;bar&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="n">room</span><span class="o">.</span><span class="n">supervisor</span> <span class="o">!</span> <span class="nc">Send</span><span class="o">(</span><span class="s">&quot;fromId&quot;</span><span class="o">,</span> <span class="s">&quot;toId&quot;</span><span class="o">,</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;bar&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>You can manage several rooms in the same project.</p></blockquote>

<br/>


<h2>Create the mandatory Receiver Actor</h2>

<p>There is only one message to manage:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Message received and parsed to type A</span>
</span><span class='line'><span class="cm">  * @param from the ID of the sender</span>
</span><span class='line'><span class="cm">  * @param payload the content of the message</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Received</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">from</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">payload</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span></code></pre></td></tr></table></div></figure>


<p>If your websocket frames contain Json, then it should be <code>Received[JsValue]</code>.</p>

<p>You just have to create a simple actor:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Create an actor to receive messages from websocket</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Receiver</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Received(fromId, js) is the only Message to manage in receiver</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Received</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">js</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;msg&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">play</span><span class="o">.</span><span class="nc">Logger</span><span class="o">.</span><span class="n">error</span><span class="o">(</span><span class="s">&quot;couldn&#39;t msg in websocket event&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">play</span><span class="o">.</span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;received $s&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="c1">// broadcast message to all connected members</span>
</span><span class='line'>          <span class="n">context</span><span class="o">.</span><span class="n">parent</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note the Receiver Actor is supervised by the <code>Supervisor</code> actor. So, within the Receiver Actor, <code>context.parent</code> is the <code>Supervisor</code> and you can use it to send/broadcast message as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">context</span><span class="o">.</span><span class="n">parent</span> <span class="o">!</span> <span class="nc">Send</span><span class="o">(</span><span class="n">fromId</span><span class="o">,</span> <span class="n">toId</span><span class="o">,</span> <span class="n">mymessage</span><span class="o">)</span>
</span><span class='line'><span class="n">context</span><span class="o">.</span><span class="n">parent</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="n">fromId</span><span class="o">,</span> <span class="n">mymessage</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The 2 messages</span>
</span><span class='line'><span class="cm">/** Sends a message from a member to another member */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span>   <span class="nc">Send</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">from</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">to</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">payload</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Broadcasts a message from a member */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span>   <span class="nc">Broadcast</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">from</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">payload</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Create your Json websocket endpoint</h2>

<p>Please note that each member is identified by a string that you define yourself.</p>

<p>import org.mandubian.actorroom._</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Receiver</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">room</span> <span class="k">=</span> <span class="nc">Room</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** websocket requires :</span>
</span><span class='line'><span class="cm">    * - the type of the Receiver actor</span>
</span><span class='line'><span class="cm">    * - the type of the payload</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">connect</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">room</span><span class="o">.</span><span class="n">websocket</span><span class="o">[</span><span class="kt">Receiver</span>, <span class="kt">JsValue</span><span class="o">](</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// or</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">connect</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">room</span><span class="o">.</span><span class="n">websocket</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">id</span><span class="o">,</span> <span class="nc">Props</span><span class="o">[</span><span class="kt">Receiver</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>All together</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Implicits</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Play.current</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.concurrent.Execution.Implicits._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">org.mandubian.actorroom._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Receiver</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Received</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">js</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;msg&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">play</span><span class="o">.</span><span class="nc">Logger</span><span class="o">.</span><span class="n">error</span><span class="o">(</span><span class="s">&quot;couldn&#39;t msg in websocket event&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">play</span><span class="o">.</span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;received $s&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">context</span><span class="o">.</span><span class="n">parent</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">room</span> <span class="k">=</span> <span class="nc">Room</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">websocket</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">room</span><span class="o">.</span><span class="n">websocket</span><span class="o">[</span><span class="kt">Receiver</span>, <span class="kt">JsValue</span><span class="o">](</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h1>Extend default behaviors</h1>

<h2>Override the administration message format</h2>

<p><code>AdminMsgFormatter</code> typeclass is used by ActorRoom to format administration messages (Connected, Disconnected and Error) by default.</p>

<p><code>AdminMsgFormatter[JsValue]</code> and <code>AdminMsgFormatter[String]</code> are provided by default.</p>

<p>You can override the format as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// put this implicit in the same scope where you create your websocket endpoint</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">msgFormatter</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AdminMsgFormatter</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">connected</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;kind&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;connected&quot;</span><span class="o">,</span> <span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="n">id</span><span class="o">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">disconnected</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;kind&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;disconnected&quot;</span><span class="o">,</span> <span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="n">id</span><span class="o">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">error</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;kind&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;error&quot;</span><span class="o">,</span> <span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="n">id</span><span class="o">,</span> <span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">msg</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// then this msgFormatter will be used for all administration messages  </span>
</span><span class='line'><span class="k">def</span> <span class="n">websocket</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">room</span><span class="o">.</span><span class="n">websocket</span><span class="o">[</span><span class="kt">Receiver</span>, <span class="kt">JsValue</span><span class="o">](</span><span class="n">id</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Override the Sender Actor</h2>

<p>You just have to create a new actor as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">MyCustomSender</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">s</span><span class="k">:</span> <span class="kt">Send</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span>        <span class="k">=&gt;</span> <span class="c1">// message send from a member to another one</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Broadcast</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span>   <span class="k">=&gt;</span> <span class="c1">// message broadcast by a member</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Connected</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>           <span class="k">=&gt;</span> <span class="c1">// member &quot;id&quot; has connected</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Disconnected</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>        <span class="k">=&gt;</span> <span class="c1">// member &quot;id&quot; has disconnected</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Init</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">receiverActor</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="c1">// Message sent when sender actor is initialized by ActorRoom</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you must initialize your websocket with it</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">connect</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">room</span><span class="o">.</span><span class="n">websocket</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">id</span><span class="o">,</span> <span class="nc">Props</span><span class="o">[</span><span class="kt">Receiver</span><span class="o">],</span> <span class="nc">Props</span><span class="o">[</span><span class="kt">MyCustomSender</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can override the following messages:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// public sender messages</span>
</span><span class='line'><span class="cm">/** Sender actor is initialized by Supervisor */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span>   <span class="nc">Init</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">receiverActor</span><span class="k">:</span> <span class="kt">ActorRef</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Sends a message from a member to another member */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span>   <span class="nc">Send</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">from</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">to</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">payload</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Broadcasts a message from a member */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span>   <span class="nc">Broadcast</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">from</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">payload</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** member with ID has connected */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span>   <span class="nc">Connected</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** member with ID has disconnected */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span>   <span class="nc">Disconnected</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Override the Supervisor Actor</h2>

<p>Please note <code>Supervisor</code> is an actor which manages a internal state containing all members:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">members</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Member</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can override the default Supervisor as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">CustomSupervisor</span> <span class="k">extends</span> <span class="nc">Supervisor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">customBroadcast</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">js</span><span class="k">:</span> <span class="kt">JsObject</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">// adds members to all messages</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">ids</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;members&quot;</span> <span class="o">-&gt;</span> <span class="n">members</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">_1</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">members</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">member</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>            <span class="n">member</span><span class="o">.</span><span class="n">sender</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">js</span> <span class="o">++</span> <span class="n">ids</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="n">customBroadcast</span> <span class="n">orElse</span> <span class="k">super</span><span class="o">.</span><span class="n">receive</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Create a bot to simulate member</h2>

<p>A bot is a fake member that you can use to communicate with other members. It&#8217;s identified by an ID as any member.</p>

<p>You create a bot with these API:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Member</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="k">val</span> <span class="n">receiver</span><span class="k">:</span> <span class="kt">ActorRef</span><span class="o">,</span> <span class="k">val</span> <span class="n">sender</span><span class="k">:</span> <span class="kt">ActorRef</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Message</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">bot</span><span class="o">[</span><span class="kt">Payload</span><span class="o">](</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>    <span class="o">(</span><span class="k">implicit</span> <span class="n">msgFormatter</span><span class="k">:</span> <span class="kt">AdminMsgFormatter</span><span class="o">[</span><span class="kt">Payload</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Member</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">bot</span><span class="o">[</span><span class="kt">Payload</span><span class="o">](</span>
</span><span class='line'>    <span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="n">senderProps</span><span class="k">:</span> <span class="kt">Props</span>
</span><span class='line'>  <span class="o">)(</span><span class="k">implicit</span> <span class="n">msgFormatter</span><span class="k">:</span> <span class="kt">AdminMsgFormatter</span><span class="o">[</span><span class="kt">Payload</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Member</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">bot</span><span class="o">[</span><span class="kt">Payload</span><span class="o">](</span>
</span><span class='line'>    <span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="n">receiverProps</span><span class="k">:</span> <span class="kt">Props</span><span class="o">,</span>
</span><span class='line'>    <span class="n">senderProps</span><span class="k">:</span> <span class="kt">Props</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Member</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then with returned <code>Member</code>, you can simulate messages:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">room</span> <span class="k">=</span> <span class="nc">Room</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">bot</span> <span class="k">=</span> <span class="n">room</span><span class="o">.</span><span class="n">bot</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="s">&quot;robot&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// simulate a received message</span>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">receiver</span> <span class="o">!</span> <span class="nc">Received</span><span class="o">(</span><span class="n">bod</span><span class="o">.</span><span class="n">id</span><span class="o">,</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;bar&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Naturally, you can override the Bot Sender Actor</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** The default actor sender for Bots */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BotSender</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">play</span><span class="o">.</span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Bot should have sent ${s}&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">bot</span> <span class="k">=</span> <span class="n">room</span><span class="o">.</span><span class="n">bot</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="s">&quot;robot&quot;</span><span class="o">,</span> <span class="nc">Props</span><span class="o">[</span><span class="kt">BotSender</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what else???
Everything you can override and everything that I didn&#8217;t implement yet&#8230;</p>

<p>On <a href="https://github.com/mandubian/play-actor-room/tree/master/samples">github project</a>, you will find 2 samples:</p>

<ul>
<li><code>simplest</code> which is a very simple working sample.</li>
<li><code>websocket-chat</code> which is just the Play Framework ChatRoom sample rewritten with <code>ActorRoom</code>.</li>
</ul>


<p>Have fun!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalaz-Stream Plug'n'Play2 Iteratee/WS + Recursive streaming]]></title>
    <link href="http://www.mandubian.com/2013/08/21/playztream/"/>
    <updated>2013-08-21T23:23:00+02:00</updated>
    <id>http://www.mandubian.com/2013/08/21/playztream</id>
    <content type="html"><![CDATA[<p>The code for all autosources &amp; sample apps can be found on Github <a href="https://github.com/mandubian/playzstream">here</a></p>

<blockquote><p>The aim of this article is to show how <a href="https://github.com/scalaz/scalaz-stream">scalaz-stream</a> could be plugged on existing Play Iteratee/Enumerator and used in your web projects. I also wanted to evaluate in depth the power of <a href="https://github.com/scalaz/scalaz-stream">scalaz-stream</a> <em>Processes</em> by trying to write a recursive streaming action: I mean a web endpoint streaming data and re-injecting its own streamed data in itself.</p></blockquote>

<br/>


<blockquote><p>If you want to see now how scalaz-stream is used with Play, go to <a href="#plug-n-play">this paragraph</a> directly.</p></blockquote>

<br/>


<h2>Why Scalaz-Stream when you have Play Iteratees?</h2>

<br/>


<h3>Play Iteratees are powerful &amp; cool but&#8230;</h3>

<p>I&#8217;m a fan of everything dealing with data streaming and realtime management in backends. I&#8217;ve worked a lot on <a href="http://www.playframework.org">Play Framework</a> and naturally I&#8217;ve been using the cornerstone behind Play&#8217;s reactive nature: <em>Play Iteratees</em>.</p>

<p><em>Iteratees</em> (with its counterparts, <em>Enumerators</em> and <em>Enumeratees</em>) are great to <strong>manipulate/transform linear streams of data chunks</strong> in a very <strong>reactive</strong> (non-blocking &amp; asynchronous) and purely <strong>functional</strong> way:</p>

<ul>
<li><strong>Enumerators</strong> identifies the <strong>data producer</strong> that can generate finite/infinite/procedural data streams.</li>
<li><strong>Iteratee</strong> is simply a <strong>data folder built as a state machine</strong> based on 3 states (Continue, Done, Error) which consumes data from Enumerator to compute a final result.</li>
<li><strong>Enumeratee</strong> is a kind of <strong>transducer</strong> able to adapt an Enumerator producing some type of data to an Iteratee that expects other type of data. Enumeratee can be used as both a pipe transformer and adapter.</li>
</ul>


<p>Iteratee is really powerful but I must say I&#8217;ve always found them quite picky to use, practically speaking. In Play, they are used in their best use-case and they were created for that exactly. <strong>I&#8217;ve been using Iteratees for more than one year now but I still don&#8217;t feel fluent with them</strong>. Each time I use them, I must spend some time to know how I could write what I need. It&#8217;s not because they are purely functional (piping an Enumerator into an Enumeratee into an Iteratee is quite trivial) but there is something that my brain doesn&#8217;t want to catch.</p>

<blockquote><p>If you want more details about my experience with Iteratees, go to <a href="#iteratee-details">this paragraph</a></p></blockquote>

<p>That&#8217;s why <strong>I wanted to work with other functional streaming tools to see if they suffer the same kind of usability toughness</strong> or can bring something more natural to me. There are lots of other competitors on the field such as <strong>pipes</strong>, <strong>conduits</strong> and <strong>machines</strong>. As I don&#8217;t have physical time to study all of them in depth, I&#8217;ve chosen the one that appealed me the most i.e. Machines.</p>

<blockquote><p>I&#8217;m not yet a Haskell coder even if I can mumble it so I preferred to evaluate the concept with <a href="https://github.com/scalaz/scalaz-stream">scalaz-stream</a>, a Scala implementation trying to bring machines to <em>normal</em> coders focusing on the aspect of IO streaming.</p></blockquote>

<br/>


<br/>


<h2>Scratching the concepts of Machine / Process ?</h2>

<blockquote><p>I&#8217;m not going to judge if Machines are better or not than Iteratees, this is not my aim. I&#8217;m just experimenting the concept in an objective way.</p></blockquote>

<p>I won&#8217;t explain the concept of Machines in depth because it&#8217;s huge and I don&#8217;t think I have the theoretical background to do it right now. So, let&#8217;s focus on very basic ideas at first:</p>

<ul>
<li><em>Machine</em> is a very generic concept that represents <strong>a data processing mechanism with potential multiple inputs, an output and monadic effects</strong> (typically Future input chunks, side-effects while transforming, delayed output&#8230;)</li>
<li>To simplify, let say a machine is <strong>a bit like a mechano that you construct by plugging together other more generic machines</strong> (such as source, transducer, sink, tee, wye) as simply as pipes.</li>
<li>Building a machine also means <strong>planning all the steps you will go through when managing streamed data but it doesn&#8217;t do anything until you run it</strong> (no side-effect, no resource consumption). You can re-run a machine as many times as you want.</li>
<li>A machine is a <strong>state machine</strong> (Emit/Await/Halt) as Iteratee but it manages error in a more explicit way IMHO (fallback/error)</li>
</ul>


<p>In <a href="https://github.com/scalaz/scalaz-stream">scalaz-stream</a>, you don&#8217;t manipulate machines which are too abstract for real-life use-cases but you manipulate simpler concepts:</p>

<ul>
<li><code>Process[M, O]</code> is a restricted machine outputting a stream of <code>O</code>. It can be a source if the monadic effect gets input from I/O or generates procedural data, or a sink if you don&#8217;t care about the output. <em>Please note that it doesn&#8217;t infer the type of potential input at all</em>.</li>
<li><code>Wye[L, R, O]</code> is a machine that takes 2 inputs (left <code>L</code> / right <code>R</code>) and outputs chunks of type <code>O</code> (you can read from left or right or wait for both before ouputting)</li>
<li><code>Tee[L, R, O]</code> is a Wye that can only read alternatively from left or from right but not from both at the same time.</li>
<li><code>Process1[I, O]</code> can be seen as a transducer which accepts inputs of type <code>I</code> and outputs chunks of type <code>O</code> (a bit like Enumeratee)</li>
<li><code>Channel[M, I, O]</code> is an effectul channel that accepts input of type <code>I</code> and use it in a monadic effect <code>M</code> to produce potential <code>O</code></li>
</ul>


<br/>


<h3>What I find attractive in Machines?</h3>

<ul>
<li>Machines is <strong>producer/consumer/transducer in the same place</strong> and Machines can consume/fold as Iteratee, transform as Enumeratee and emit as Enumerator at the same time and it opens lots of possibilities (even if 3 concepts in one could make it more complicated too).</li>
<li>I feel like <strong>playing with legos as you plug machines on machines</strong> and this is quite funny actually.</li>
<li>Machines manages <strong>monadic effects in its design</strong> and doesn&#8217;t infer the type of effect so you can use it with I/O, Future and whatever you can imagine that is monadic&#8230;</li>
<li>Machines provide out-of-the-box <strong>Tee/Wye to compose streams</strong>, interleave, zip them as you want without writing crazy code.</li>
<li>The early code samples I&#8217;ve seen were quite easy to read (even the implementation is not so complex). Have a look at the <code>StartHere</code> sample provided by scalaz-stream:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">property</span><span class="o">(</span><span class="s">&quot;simple file I/O&quot;</span><span class="o">)</span> <span class="k">=</span> <span class="n">secure</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">converter</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">io</span><span class="o">.</span><span class="n">linesR</span><span class="o">(</span><span class="s">&quot;testdata/fahrenheit.txt&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">s</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">s</span><span class="o">.</span><span class="n">trim</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">s</span><span class="o">.</span><span class="n">startsWith</span><span class="o">(</span><span class="s">&quot;//&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">line</span> <span class="k">=&gt;</span> <span class="n">fahrenheitToCelsius</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="n">toDouble</span><span class="o">).</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">intersperse</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">pipe</span><span class="o">(</span><span class="n">process1</span><span class="o">.</span><span class="n">utf8Encode</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="n">io</span><span class="o">.</span><span class="n">fileChunkW</span><span class="o">(</span><span class="s">&quot;testdata/celsius.txt&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">converter</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>    <span class="kc">true</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>But don&#8217;t think everything is so simple, machines is a complex concept with lots of theory behind it which is quite abstract. what I find very interesting is that <strong>it&#8217;s possible to vulgarize this very abstract concept with simpler concepts such as Process, Source, Sink, Tee, Wye&#8230; that you can catch quite easily</strong> as these are concepts you already manipulated when you were playing in your bathtub when you were child (or even now).</p></blockquote>

<br/>


<br/>


<h2><a name="plug-n-play">Scalaz-stream Plug&#8217;n&#8217;Play  Iteratee/Enumerator</a></h2>

<p>After these considerations, I wanted to experiment scalaz-stream with Play streaming capabilities in order to see how it behaves in a context I know.</p>

<p>Here is what I decided to study:</p>

<ul>
<li><strong>Stream data out of a controller action using a scalaz-stream <code>Process</code></strong></li>
<li><strong>Call an AsyncWebService &amp; consume the response as a stream of <code>Array[Byte]</code> using a scalaz-stream <code>Process</code></strong></li>
</ul>


<p>Here is existing Play API :</p>

<ul>
<li>Action provides <code>Ok.stream(Enumerator)</code></li>
<li>WS call consuming response as a stream of data <code>WS.get(r: ResponseHeader =&gt; Iteratee)</code></li>
</ul>


<br/>


<blockquote><p>As you can see, these API depends on Iteratee/Enumerator. As I didn&#8217;t want to hack Play too much as a beginning, I decided to try &amp; plug scalaz-stream on Play Iteratee (if possible).</p></blockquote>

<h3>Building <code>Enumerator[O]</code> from <code>Process[Task, O]</code></h3>

<p>The idea is to take a scalaz-stream Source[O] (<code>Process[M,O]</code>) and wrap it into an <code>Enumerator[O]</code> so that it can be used in Play controller actions.</p>

<p>An Enumerator is a data producer which can generate those data using monadic <code>Future</code> effects (Play Iteratee is tightly linked to <code>Future</code>).</p>

<p><code>Process[Task, O]</code> is a machine outputting a stream of <code>O</code> so it&#8217;s logically the right candidate to be adapted with a <code>Enumerator[O]</code>. <em>Let&#8217;s remind&#8217; <code>Task</code> is just a scalaz <code>Future[Either[Throwable,A]]</code> with a few helpers and it&#8217;s used in scalaz-stream</em>.</p>

<p>So I&#8217;ve implemented (at least tried) an <code>Enumerator[O]</code> that accepts a <code>Process[Task, O]</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">enumerator</span><span class="o">[</span><span class="kt">O</span><span class="o">](</span><span class="n">p</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">O</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">ctx</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">Enumerator</span><span class="o">[</span><span class="kt">O</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="c1">// look the code in github project</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The implementation just synchronizes the states of the <code>Iteratee[O, A]</code> consuming the <code>Enumerator</code> with the states of <code>Process[Task, O]</code> emitting data chunks of <code>O</code>. It&#8217;s quite simple actually.</p></blockquote>

<br/>


<br/>


<h3>Building <code>Process1[I, O]</code> from <code>Iteratee[I, O]</code></h3>

<p>The idea is to drive an Iteratee from a scalaz-stream Process so that it can consume an Enumerator and be used in Play WS.</p>

<p>An <code>Iteratee[I, O]</code> accepts inputs of type <code>I</code> (<em>and nothing else</em>) and will fold the input stream into a single result of type <code>O</code>.</p>

<p>A <code>Process1[I, O]</code> accepts inputs of type <code>I</code> and emits chunks of type <code>O</code> but not necessarily one single output chunk. So it&#8217;s a good candidate for our use-case but we need to choose which emitted chunk will be the result of the <code>Iteratee[I, O]</code>. here, totally arbitrarily, I&#8217;ve chosen to take the first emit as the result (<em>but the last would be as good if not better</em>).</p>

<p>So I implemented the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">iterateeFirstEmit</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">O</span><span class="o">](</span><span class="n">p</span><span class="k">:</span> <span class="kt">Process.Process1</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">O</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">ctx</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">I</span>, <span class="kt">O</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="c1">// look the code in github project</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The implementation is really raw for experimentation as it goes through the states of the <code>Process1[I,O]</code> and generates the corresponding states of <code>Iteratee[I,O]</code> until first emitted value. Nothing more nothing less&#8230;</p></blockquote>

<br/>


<br/>


<h2>A few basic action samples</h2>

<blockquote><p>Everything done in those samples could be done with Iteratee/Enumeratee more or less simply. The subject is not there!</p></blockquote>

<br/>


<h3>Sample 1 : Generates a stream from a Simple Emitter Process</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sample1</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">process</span> <span class="k">=</span> <span class="nc">Process</span><span class="o">.</span><span class="n">emitAll</span><span class="o">(</span><span class="nc">Seq</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">)).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">enumerator</span><span class="o">(</span><span class="n">process</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">curl</span> <span class="s">&quot;localhost:10000/sample1&quot;</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">buffer</span>
</span><span class='line'><span class="mi">1234</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Sample 2 : Generates a stream from a continuous emitter</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** A process generating an infinite stream of natural numbers */</span>
</span><span class='line'><span class="k">val</span> <span class="n">numerals</span> <span class="k">=</span> <span class="nc">Process</span><span class="o">.</span><span class="n">unfold</span><span class="o">(</span><span class="mi">0</span><span class="o">){</span> <span class="n">s</span> <span class="k">=&gt;</span> <span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="o">}.</span><span class="n">repeat</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we limit the number of outputs but you don&#39;t have it can stream forever...</span>
</span><span class='line'><span class="k">def</span> <span class="n">sample2</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">enumerator</span><span class="o">(</span><span class="n">numerals</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">).</span><span class="n">intersperse</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">40</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">curl</span> <span class="s">&quot;localhost:10000/sample2&quot;</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">buffer</span>
</span><span class='line'><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span><span class="mi">13</span><span class="o">,</span><span class="mi">14</span><span class="o">,</span><span class="mi">15</span><span class="o">,</span><span class="mi">16</span><span class="o">,</span><span class="mi">17</span><span class="o">,</span><span class="mi">18</span><span class="o">,</span><span class="mi">19</span><span class="o">,</span><span class="mi">20</span><span class="o">,</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Sample 3 : Generates a stream whose output frequency is controlled by a tee with numeral generator on left and ticker on right</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** ticks constant every delay milliseconds */</span>
</span><span class='line'><span class="k">def</span> <span class="n">ticker</span><span class="o">(</span><span class="n">constant</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">delay</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Process</span><span class="o">.</span><span class="n">await</span><span class="o">(</span>
</span><span class='line'>  <span class="n">scalaFuture2scalazTask</span><span class="o">(</span><span class="n">delayedNumber</span><span class="o">(</span><span class="n">constant</span><span class="o">,</span> <span class="n">delay</span><span class="o">))</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Process</span><span class="o">.</span><span class="n">emit</span><span class="o">).</span><span class="n">repeat</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sample3</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">enumerator</span><span class="o">(</span>
</span><span class='line'>    <span class="c1">// creates a Tee outputting only numerals but consuming ticker // to have the delayed effect</span>
</span><span class='line'>    <span class="o">(</span><span class="n">numerals</span> <span class="n">tee</span> <span class="n">ticker</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">100</span><span class="o">))(</span><span class="n">processes</span><span class="o">.</span><span class="n">zipWith</span><span class="o">((</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">intersperse</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note :</p>

<ul>
<li><code>scalaFuture2scalazTask</code> is just a helper to convert a <code>Future</code> into <code>Task</code></li>
<li><code>ticker</code>is quite simple to understand: it awaits <code>Task[Int] and emits this</code>Int and repeats it again&#8230;</li>
<li><code>processes.zipWith((a,b) =&gt; a)</code> is a tee (2 inputs left/right) that outputs only left data but consumes right also to have the delay effect.</li>
<li><code>.map(_.toString)</code> simply converts into something writeable by <code>Ok.stream</code></li>
<li><code>.intersperse(",")</code> which simply add `&#8221;,&#8221; between each element</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">curl</span> <span class="s">&quot;localhost:10000/sample3&quot;</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">buffer</span>
</span><span class='line'><span class="mf">1.</span><span class="o">..</span> <span class="c1">// to simulate the progressive apparition of numbers on screen</span>
</span><span class='line'><span class="mi">1</span><span class="o">,...</span>
</span><span class='line'><span class="mi">1</span><span class="o">,</span><span class="mf">2.</span><span class="o">..</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span><span class="mi">13</span><span class="o">,</span><span class="mi">14</span><span class="o">,</span><span class="mi">15</span><span class="o">,</span><span class="mi">16</span><span class="o">,</span><span class="mi">17</span><span class="o">,</span><span class="mi">18</span><span class="o">,</span><span class="mi">19</span><span class="o">,</span><span class="mi">20</span><span class="o">,</span><span class="mi">21</span><span class="o">,</span><span class="mi">22</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">24</span><span class="o">,</span><span class="mi">25</span><span class="o">,</span><span class="mi">26</span><span class="o">,</span><span class="mi">27</span><span class="o">,</span><span class="mi">28</span><span class="o">,</span><span class="mi">29</span><span class="o">,</span><span class="mi">30</span><span class="o">,</span><span class="mi">31</span><span class="o">,</span><span class="mi">32</span><span class="o">,</span><span class="mi">33</span><span class="o">,</span><span class="mi">34</span><span class="o">,</span><span class="mi">35</span><span class="o">,</span><span class="mi">36</span><span class="o">,</span><span class="mi">37</span><span class="o">,</span><span class="mi">38</span><span class="o">,</span><span class="mi">39</span><span class="o">,</span><span class="mi">40</span><span class="o">,</span><span class="mi">41</span><span class="o">,</span><span class="mi">42</span><span class="o">,</span><span class="mi">43</span><span class="o">,</span><span class="mi">44</span><span class="o">,</span><span class="mi">45</span><span class="o">,</span><span class="mi">46</span><span class="o">,</span><span class="mi">47</span><span class="o">,</span><span class="mi">48</span><span class="o">,</span><span class="mi">49</span><span class="o">,</span><span class="mi">50</span><span class="o">,</span><span class="mi">51</span><span class="o">,</span><span class="mi">52</span><span class="o">,</span><span class="mi">53</span><span class="o">,</span><span class="mi">54</span><span class="o">,</span><span class="mi">55</span><span class="o">,</span><span class="mi">56</span><span class="o">,</span><span class="mi">57</span><span class="o">,</span><span class="mi">58</span><span class="o">,</span><span class="mi">59</span><span class="o">,</span><span class="mi">60</span><span class="o">,</span><span class="mi">61</span><span class="o">,</span><span class="mi">62</span><span class="o">,</span><span class="mi">63</span><span class="o">,</span><span class="mi">64</span><span class="o">,</span><span class="mi">65</span><span class="o">,</span><span class="mi">66</span><span class="o">,</span><span class="mi">67</span><span class="o">,</span><span class="mi">68</span><span class="o">,</span><span class="mi">69</span><span class="o">,</span><span class="mi">70</span><span class="o">,</span><span class="mi">71</span><span class="o">,</span><span class="mi">72</span><span class="o">,</span><span class="mi">73</span><span class="o">,</span><span class="mi">74</span><span class="o">,</span><span class="mi">75</span><span class="o">,</span><span class="mi">76</span><span class="o">,</span><span class="mi">77</span><span class="o">,</span><span class="mi">78</span><span class="o">,</span><span class="mi">79</span><span class="o">,</span><span class="mi">80</span><span class="o">,</span><span class="mi">81</span><span class="o">,</span><span class="mi">82</span><span class="o">,</span><span class="mi">83</span><span class="o">,</span><span class="mi">84</span><span class="o">,</span><span class="mi">85</span><span class="o">,</span><span class="mi">86</span><span class="o">,</span><span class="mi">87</span><span class="o">,</span><span class="mi">88</span><span class="o">,</span><span class="mi">89</span><span class="o">,</span><span class="mi">90</span><span class="o">,</span><span class="mi">91</span><span class="o">,</span><span class="mi">92</span><span class="o">,</span><span class="mi">93</span><span class="o">,</span><span class="mi">94</span><span class="o">,</span><span class="mi">95</span><span class="o">,</span><span class="mi">96</span><span class="o">,</span><span class="mi">97</span><span class="o">,</span><span class="mi">98</span><span class="o">,</span><span class="mi">99</span><span class="o">,</span><span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Sample 4 : Generates a stream using side-effect to control output frequency</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Async generates this Int after delay*/</span>
</span><span class='line'><span class="k">def</span> <span class="n">delayedNumber</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">delay</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Promise</span><span class="o">.</span><span class="n">timeout</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">delay</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Creates a process generating an infinite stream natural numbers</span>
</span><span class='line'><span class="cm">  * every `delay milliseconds</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">delayedNumerals</span><span class="o">(</span><span class="n">delay</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">step</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Process</span><span class="o">.</span><span class="n">emit</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="n">then</span><span class="o">(</span>
</span><span class='line'>      <span class="nc">Process</span><span class="o">.</span><span class="n">await</span><span class="o">(</span><span class="n">scalaFuture2scalazTask</span><span class="o">(</span><span class="n">delayedNumber</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">delay</span><span class="o">)))(</span><span class="n">step</span><span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="nc">Process</span><span class="o">.</span><span class="n">await</span><span class="o">(</span><span class="n">scalaFuture2scalazTask</span><span class="o">(</span><span class="n">delayedNumber</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">delay</span><span class="o">)))(</span><span class="n">step</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sample4</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">enumerator</span><span class="o">(</span><span class="n">delayedNumerals</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">).</span><span class="n">intersperse</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note:</p>

<ul>
<li><code>delayedNumber</code> uses an Akka scheduler to trigger our value after timeout</li>
<li><code>delayedNumerals</code> shows a simple recursive `Process[Task, Int] construction which shouldn&#8217;t be too hard to understand</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">curl</span> <span class="s">&quot;localhost:10000/sample4&quot;</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">buffer</span>
</span><span class='line'><span class="mf">0.</span><span class="o">..</span> <span class="c1">// to simulate the progressive apparition of numbers every 100ms</span>
</span><span class='line'><span class="mi">0</span><span class="o">,...</span>
</span><span class='line'><span class="mi">0</span><span class="o">,</span><span class="mf">1.</span><span class="o">..</span>
</span><span class='line'><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,...</span>
</span><span class='line'><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mf">2.</span><span class="o">..</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span><span class="mi">13</span><span class="o">,</span><span class="mi">14</span><span class="o">,</span><span class="mi">15</span><span class="o">,</span><span class="mi">16</span><span class="o">,</span><span class="mi">17</span><span class="o">,</span><span class="mi">18</span><span class="o">,</span><span class="mi">19</span><span class="o">,</span><span class="mi">20</span><span class="o">,</span><span class="mi">21</span><span class="o">,</span><span class="mi">22</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">24</span><span class="o">,</span><span class="mi">25</span><span class="o">,</span><span class="mi">26</span><span class="o">,</span><span class="mi">27</span><span class="o">,</span><span class="mi">28</span><span class="o">,</span><span class="mi">29</span><span class="o">,</span><span class="mi">30</span><span class="o">,</span><span class="mi">31</span><span class="o">,</span><span class="mi">32</span><span class="o">,</span><span class="mi">33</span><span class="o">,</span><span class="mi">34</span><span class="o">,</span><span class="mi">35</span><span class="o">,</span><span class="mi">36</span><span class="o">,</span><span class="mi">37</span><span class="o">,</span><span class="mi">38</span><span class="o">,</span><span class="mi">39</span><span class="o">,</span><span class="mi">40</span><span class="o">,</span><span class="mi">41</span><span class="o">,</span><span class="mi">42</span><span class="o">,</span><span class="mi">43</span><span class="o">,</span><span class="mi">44</span><span class="o">,</span><span class="mi">45</span><span class="o">,</span><span class="mi">46</span><span class="o">,</span><span class="mi">47</span><span class="o">,</span><span class="mi">48</span><span class="o">,</span><span class="mi">49</span><span class="o">,</span><span class="mi">50</span><span class="o">,</span><span class="mi">51</span><span class="o">,</span><span class="mi">52</span><span class="o">,</span><span class="mi">53</span><span class="o">,</span><span class="mi">54</span><span class="o">,</span><span class="mi">55</span><span class="o">,</span><span class="mi">56</span><span class="o">,</span><span class="mi">57</span><span class="o">,</span><span class="mi">58</span><span class="o">,</span><span class="mi">59</span><span class="o">,</span><span class="mi">60</span><span class="o">,</span><span class="mi">61</span><span class="o">,</span><span class="mi">62</span><span class="o">,</span><span class="mi">63</span><span class="o">,</span><span class="mi">64</span><span class="o">,</span><span class="mi">65</span><span class="o">,</span><span class="mi">66</span><span class="o">,</span><span class="mi">67</span><span class="o">,</span><span class="mi">68</span><span class="o">,</span><span class="mi">69</span><span class="o">,</span><span class="mi">70</span><span class="o">,</span><span class="mi">71</span><span class="o">,</span><span class="mi">72</span><span class="o">,</span><span class="mi">73</span><span class="o">,</span><span class="mi">74</span><span class="o">,</span><span class="mi">75</span><span class="o">,</span><span class="mi">76</span><span class="o">,</span><span class="mi">77</span><span class="o">,</span><span class="mi">78</span><span class="o">,</span><span class="mi">79</span><span class="o">,</span><span class="mi">80</span><span class="o">,</span><span class="mi">81</span><span class="o">,</span><span class="mi">82</span><span class="o">,</span><span class="mi">83</span><span class="o">,</span><span class="mi">84</span><span class="o">,</span><span class="mi">85</span><span class="o">,</span><span class="mi">86</span><span class="o">,</span><span class="mi">87</span><span class="o">,</span><span class="mi">88</span><span class="o">,</span><span class="mi">89</span><span class="o">,</span><span class="mi">90</span><span class="o">,</span><span class="mi">91</span><span class="o">,</span><span class="mi">92</span><span class="o">,</span><span class="mi">93</span><span class="o">,</span><span class="mi">94</span><span class="o">,</span><span class="mi">95</span><span class="o">,</span><span class="mi">96</span><span class="o">,</span><span class="mi">97</span><span class="o">,</span><span class="mi">98</span><span class="o">,</span><span class="mi">99</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Sample 5 : Generates a stream by consuming completely another stream</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// a process folding all Array[Byte] into a big String</span>
</span><span class='line'><span class="k">val</span> <span class="n">reader</span><span class="k">:</span> <span class="kt">Process.Process1</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">processes</span><span class="o">.</span><span class="n">fold1</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span> <span class="o">++</span> <span class="n">b</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">map</span><span class="o">{</span> <span class="n">arr</span> <span class="k">=&gt;</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">arr</span><span class="o">)</span> <span class="o">}</span> <span class="o">|&gt;</span> <span class="n">processes</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sample5</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// the WS call with response consumer by previous Process1[Array[Byte], String] driving the Iteratee[Array[Byte], String]</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">maybeValues</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">routes</span><span class="o">.</span><span class="nc">Application</span><span class="o">.</span><span class="n">sample2</span><span class="o">().</span><span class="n">absoluteURL</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">rh</span> <span class="k">=&gt;</span> <span class="n">iterateeFirstEmit</span><span class="o">(</span><span class="n">reader</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">run</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">enumerator</span><span class="o">(</span>
</span><span class='line'>    <span class="c1">// wraps the received String in a Process</span>
</span><span class='line'>    <span class="c1">// re-splits it to remove &quot;,&quot;</span>
</span><span class='line'>    <span class="c1">// emits all chunks</span>
</span><span class='line'>    <span class="nc">Process</span><span class="o">.</span><span class="n">wrap</span><span class="o">(</span><span class="n">scalaFuture2scalazTask</span><span class="o">(</span><span class="n">maybeValues</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatMap</span><span class="o">{</span> <span class="n">values</span> <span class="k">=&gt;</span> <span class="nc">Process</span><span class="o">.</span><span class="n">emitAll</span><span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note:</p>

<ul>
<li><code>reader</code> is a <code>Process1[Array[Byte], String] that folds all received</code>Array[Byte]<code>into a</code>String`</li>
<li><code>iterateeFirstEmit(reader)</code> simulates an <code>Iteratee[Array[Byte], String]</code> driven by the <code>reader</code> process that will fold all chunks of data received from WS call to <code>routes.Application.sample2()</code></li>
<li><code>.get(rh =&gt; iterateeFirstEmit(reader))</code> will return a <code>Future[Iteratee[Array[Byte], String]</code> that is run in <code>.flatMap(_.run)</code> to return a <code>Future[String]</code></li>
<li><code>Process.wrap(scalaFuture2scalazTask(maybeValues))</code> is a trick to wrap the folded <code>Future[String]</code> into a <code>Process[Task, String]</code></li>
<li><code>Process.emitAll(values.split(","))</code> splits the resulting string again and emits all chunks outside (stupid, just for demo)</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">curl</span> <span class="s">&quot;localhost:10000/sample5&quot;</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">buffer</span>
</span><span class='line'><span class="mi">1234567891011121314151617181920</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<blockquote><p>Still there? Let&#8217;s dive deeper and be sharper!</p></blockquote>

<br/>


<h2>Building recursive streaming action consuming itself</h2>

<br/>


<h3>Hacking WS to consume &amp; re-emit WS in realtime</h3>

<p><code>WS.executeStream(r: ResponseHeader =&gt; Iteratee[Array[Byte], A])</code> is cool API because you can build an iteratee from the ResponseHeader and then the iteratee will consume received `Array[Byte] chunks in a reactive way and will fold them. The problem is that until the iteratee has finished, you won&#8217;t have any result.</p>

<p>But I&#8217;d like to be able to receive chunks of data in realtime and re-emit them immediately so that I can inject them in realtime data flow processing. WS API doesn&#8217;t allow this so I decided to hack it a bit. I&#8217;ve written <code>WSZ</code> which provides the API:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">getRealTime</span><span class="o">()</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Future</span>, <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span>
</span><span class='line'><span class="c1">// based on</span>
</span><span class='line'><span class="k">private</span><span class="o">[</span><span class="kt">libs</span><span class="o">]</span> <span class="k">def</span> <span class="n">realtimeStream</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Future</span>, <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This API outputs a realtime Stream of <code>Array[Byte]</code> whose flow is controlled by promises (<code>Future</code>) being redeemed in AsyncHttpClient <code>AsyncHandler</code>. <em>I didn&#8217;t care about ResponseHeaders for this experimentation but it should be taken account in a more serious impl.</em></p>

<p>I obtain a <code>Process[Future, Array[Byte]]</code> streaming received chunks in realtime and I can then take advantage of the power of machines to manipulate the data chunks as I want.</p>

<br/>


<h3>Sample 6 : Generates a stream by forwarding/refolding another stream in realtime</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** A Process1 splitting input strings using splitter and re-grouping chunks */</span>
</span><span class='line'><span class="k">def</span> <span class="n">splitFold</span><span class="o">(</span><span class="n">splitter</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Process.Process1</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// the recursive splitter / refolder</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">go</span><span class="o">(</span><span class="n">rest</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Process.Process1</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">splitted</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="n">splitter</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;&quot;&quot;$str - ${splitted.mkString(&quot;,&quot;)} --&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">(</span><span class="n">splitted</span><span class="o">.</span><span class="n">length</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">// string == splitter</span>
</span><span class='line'>        <span class="c1">// emit rest</span>
</span><span class='line'>        <span class="c1">// loop</span>
</span><span class='line'>        <span class="nc">Process</span><span class="o">.</span><span class="n">emit</span><span class="o">(</span><span class="n">rest</span><span class="o">).</span><span class="n">then</span><span class="o">(</span> <span class="nc">Process</span><span class="o">.</span><span class="n">await1</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">flatMap</span><span class="o">(</span><span class="n">go</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">// splitter not found in string </span>
</span><span class='line'>        <span class="c1">// so waiting for next string</span>
</span><span class='line'>        <span class="c1">// loop by adding current str to rest</span>
</span><span class='line'>        <span class="c1">// but if we reach end of input, then we emit (rest+str) for last element</span>
</span><span class='line'>        <span class="nc">Process</span><span class="o">.</span><span class="n">await1</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">flatMap</span><span class="o">(</span><span class="n">go</span><span class="o">(</span><span class="n">rest</span> <span class="o">+</span> <span class="n">str</span><span class="o">)).</span><span class="n">orElse</span><span class="o">(</span><span class="nc">Process</span><span class="o">.</span><span class="n">emit</span><span class="o">(</span><span class="n">rest</span><span class="o">+</span><span class="n">str</span><span class="o">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">// splitter found</span>
</span><span class='line'>        <span class="c1">// emit rest + splitted.head</span>
</span><span class='line'>        <span class="c1">// emit all splitted elements but last</span>
</span><span class='line'>        <span class="c1">// loops with rest = splitted last element</span>
</span><span class='line'>        <span class="nc">Process</span><span class="o">.</span><span class="n">emit</span><span class="o">(</span><span class="n">rest</span> <span class="o">+</span> <span class="n">splitted</span><span class="o">.</span><span class="n">head</span><span class="o">)</span>
</span><span class='line'>               <span class="o">.</span><span class="n">then</span><span class="o">(</span> <span class="nc">Process</span><span class="o">.</span><span class="n">emitAll</span><span class="o">(</span><span class="n">splitted</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">init</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>               <span class="o">.</span><span class="n">then</span><span class="o">(</span> <span class="nc">Process</span><span class="o">.</span><span class="n">await1</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">flatMap</span><span class="o">(</span><span class="n">go</span><span class="o">(</span><span class="n">splitted</span><span class="o">.</span><span class="n">last</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// await1 simply means &quot;await an input string and emits it&quot;</span>
</span><span class='line'>  <span class="nc">Process</span><span class="o">.</span><span class="n">await1</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">flatMap</span><span class="o">(</span><span class="n">go</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sample6</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="nc">WSZ</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">routes</span><span class="o">.</span><span class="nc">Application</span><span class="o">.</span><span class="n">sample4</span><span class="o">().</span><span class="n">absoluteURL</span><span class="o">()).</span><span class="n">getRealTime</span><span class="o">.</span><span class="n">translate</span><span class="o">(</span><span class="nc">Task2FutureNT</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">enumerator</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">_</span><span class="o">))</span> <span class="o">|&gt;</span> <span class="n">splitFold</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note:</p>

<ul>
<li><code>def splitFold(splitter: String): Process.Process1[String, String]</code> is just a demo that coding a Process transducer isn&#8217;t so crazy&#8230; Look at comments in code</li>
<li><code>.translate(Task2FutureNF)</code> converts the <code>Process[Future, Array[Byte]]</code> to <code>Process[Task, Array[Byte]]</code> using Scalaz Natural Transformation.</li>
<li><code>p |&gt; splitFold(",")</code> means &#8220;pipe output of process <code>p</code> to input of <code>splitFold</code>&#8221;.</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">curl</span> <span class="s">&quot;localhost:10000/sample6&quot;</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">buffer</span>
</span><span class='line'><span class="mf">0.</span><span class="o">..</span>
</span><span class='line'><span class="mf">01.</span><span class="o">..</span>
</span><span class='line'><span class="mf">012.</span><span class="o">..</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">01234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<blockquote><p>Let&#8217;s finish our trip with a bit of puzzle and mystery.</p></blockquote>

<br/>


<h3>THE FINAL MYSTERY: recursive stream generating Fibonacci series</h3>

<p>As soon as my first experimentations of scalaz-stream with Play were operational, I&#8217;ve imagined an interesting case:</p>

<blockquote><p>Is it possible to build an action generating a stream of data fed by itself: a kind of recursive stream.</p></blockquote>

<p>With Iteratee, it&#8217;s not really possible since it can&#8217;t emit data before finishing iteration. It would certainly be possible with an Enumeratee but the API doesn&#8217;t exist and I find it much more obvious with scalaz-stream API!</p>

<p>The mystery isn&#8217;t in the answer to my question: YES it is possible!</p>

<p>The idea is simple:</p>

<ul>
<li>Create a simple action</li>
<li>Create a first process emitting a few initialization data</li>
<li>Create a second process which consumes the WS calling my own action and re-emits the received chunks in realtime</li>
<li>Append first process output and second process output</li>
<li>Stream global output as a result of the action which will back-propagated along time to the action itself&#8230;</li>
</ul>


<p>Naturally, if it consumes its own data, it will recall itself again and again and again until you reach the connections or opened file descriptors limit. As a consequence, you must limit the depth of recursion.</p>

<p>I performed different experiences to show this use-case by zipping the stream with itself, adding elements with themselves etc&#8230;
And after a few tries, I implemented the following code quite fortuitously :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** @param curDepth the current recursion depth</span>
</span><span class='line'><span class="cm">  * @param maxDepth the max recursion depth</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">sample7</span><span class="o">(</span><span class="n">curDepth</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">maxDepth</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// initializes serie with 2 first numerals output with a delay of 100ms</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">init</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">delayedNumerals</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Creates output Process</span>
</span><span class='line'>  <span class="c1">// If didn&#39;t reach maxDepth, creates a process consuming my own action</span>
</span><span class='line'>  <span class="c1">// If reach maxDepth, just emit 0</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">outputProcess</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">curDepth</span> <span class="o">&lt;</span> <span class="n">maxDepth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// calling my own action and streaming chunks using getRealTime</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">myself</span> <span class="k">=</span> <span class="nc">WSZ</span><span class="o">.</span><span class="n">url</span><span class="o">(</span>
</span><span class='line'>        <span class="n">routes</span><span class="o">.</span><span class="nc">Application</span><span class="o">.</span><span class="n">sample7</span><span class="o">(</span><span class="n">curDepth</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">maxDepth</span><span class="o">).</span><span class="n">absoluteURL</span><span class="o">()</span>
</span><span class='line'>      <span class="o">).</span><span class="n">getRealTime</span><span class="o">.</span><span class="n">translate</span><span class="o">(</span><span class="nc">Task2FutureNT</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span><span class='line'>      <span class="c1">// splitFold isn&#39;t useful, just for demo</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">splitFold</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// THE IMPORTANT PART BEGIN</span>
</span><span class='line'>      <span class="c1">// appends `init` output with `myself` output</span>
</span><span class='line'>      <span class="c1">// pipe it through a helper provided scalaz-stream `processes.sum[Long]`</span>
</span><span class='line'>      <span class="c1">// which sums elements and emits partial sums</span>
</span><span class='line'>      <span class="o">((</span><span class="n">init</span> <span class="n">append</span> <span class="n">myself</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toLong</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">processes</span><span class="o">.</span><span class="n">sum</span><span class="o">[</span><span class="kt">Long</span><span class="o">])</span>
</span><span class='line'>      <span class="c1">// THE IMPORTANT PART END</span>
</span><span class='line'>      <span class="c1">// just for output format</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">).</span><span class="n">intersperse</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="nc">Process</span><span class="o">.</span><span class="n">emit</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">enumerator</span><span class="o">(</span><span class="n">outputProcess</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Launch it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">curl</span> <span class="s">&quot;localhost:10000/sample7?curDepth=0&amp;maxDepth=10&quot;</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">buffer</span>
</span><span class='line'><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">13</span><span class="o">,</span><span class="mi">21</span><span class="o">,</span><span class="mi">34</span><span class="o">,</span><span class="mi">55</span><span class="o">,</span><span class="mi">89</span><span class="o">,</span><span class="mi">144</span><span class="o">,</span><span class="mi">233</span><span class="o">,</span><span class="mi">377</span><span class="o">,</span><span class="mi">610</span><span class="o">,</span><span class="mi">987</span><span class="o">,</span><span class="mi">1597</span><span class="o">,</span><span class="mi">2584</span><span class="o">,</span><span class="mi">4181</span><span class="o">,</span><span class="mi">6765</span>
</span></code></pre></td></tr></table></div></figure>


<p>WTF??? This is Fibonacci series?</p>

<p>Just to remind you about it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">e</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">e</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">e</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=</span> <span class="n">e</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">e</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Here is the mystery!!!</p>

<p>How does it work???</p>

<p>I won&#8217;t tell the answer to this puzzling side-effect and let you think about it and discover why it works XD</p></blockquote>

<p>But this sample shows exactly what I wanted: <strong>Yes, it&#8217;s possible to feed an action with its own feed! Victory!</strong></p>

<br/>


<br/>


<h2>Conclusion</h2>

<p>Ok all of that was really funky but is it useful in real projects? I don&#8217;t really know yet but it provides a great proof of the very reactive character of scalaz-stream and Play too!</p>

<p>I tend to like scalaz-stream and I feel more comfortable, more natural using Process than Iteratee right now&#8230; Maybe this is just an impression so I&#8217;ll keep cautious about my conclusions for now&#8230;</p>

<p>All of this code is just experimental so be aware about it. If you like it and see that it could be useful, tell me so that we create a real library from it!</p>

<p>Have Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,
Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,
Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,Fun,!</p>

<br/>


<br/>


<h2>PostScriptum</h2>

<h3><a name="iteratee-details">A few more details about Iteratees</a></h3>

<p>Here are a few things that bother me when I use Play Iteratee (you don&#8217;t have to agree, this is very subjective):</p>

<ul>
<li>Enumeratees are really powerful (maybe the most powerful part of the API) but they can be tricky: for ex, defining a new Enumeratee from scratch isn&#8217;t easy at first sight due to the signature of the Enumeratee itself, Enumeratee composes differently on left (with Enumerators) and on right (with Iteratees) and it can be strange at beginning&#8230;</li>
<li>Enumerators are not defined (when not using helpers) in terms of the data they produce but with respect to the way an Iteratee will consume the data they will produce. You must somewhat reverse your way of thinking which is not so natural.</li>
<li>Iteratees are great to produce one result by folding a stream of data but if you want to consume/cut/aggregate/re-emit the chunks, the code you write based on Iteratee/Enumeratee quickly becomes complex, hard to re-read and edge cases (error, end of stream) are hard to treat.</li>
<li>When you want to manipulate multiple streams together, zip/interleave them, you must write very complex code too.</li>
<li>End of iteration and Error management with Iteratees isn&#8217;t really clear IMHO and when you begin to compose Iteratees together, it becomes hard to know what will happen&#8230;</li>
<li>If you want to manipulate a stream with side-effecting, you can do it with Enumeratees but it&#8217;s not so obvious&#8230;</li>
</ul>


<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play AutoSource & Datomisca: Proofing the concept on Datomic, a Schema DB]]></title>
    <link href="http://www.mandubian.com/2013/07/11/play-autosource-datomisca/"/>
    <updated>2013-07-11T18:18:00+02:00</updated>
    <id>http://www.mandubian.com/2013/07/11/play-autosource-datomisca</id>
    <content type="html"><![CDATA[<p>The code for all autosources &amp; sample apps can be found on Github <a href="https://github.com/mandubian/play-autosource/tree/master/datomisca">here</a></p>

<div class="well">
  <h3>Brand New Autosources</h3>
  Play AutoSource now have 2 more implementations : 
  <ul>
    <li><b><a href="http://www.datomic.com">Datomic</a> based on <a href="http://pellucidanalytics.github.io/datomisca/">Datomisca</a></b>, the Scala API I developed with Daniel James (<a href="https://twitter.com/dwhjames">@dwhjames</a>) sponsored by Pellucid Analytics & Zenexity which is presented in this article</li>
    <li><b><a href="http://www.couchbase.com/">CouchBase</a></b> contributed by Mathieu Ancelin <a href="https://twitter.com/TrevorReznik">@TrevorReznik</a></li>
    <li><b><a href="http://www.typesafe.com/slick">Slick/JDBC</a></b> based on <a href="https://github.com/freekh/play-slick">Play2-Slick</a> contributed by <a href="https://github.com/rcavalcanti">Renato Cavalcanti</a> and <a href="https://github.com/loicdescotte">Loic Descotte</a></li>
  </ul>
</div>


<blockquote><p>One month ago, I&#8217;ve demo&#8217;ed the concept of Autosource for Play2/Scala with ReactiveMongo in <a href="http://mandubian.com/2013/06/11/play-autosource/">this article</a>. ReactiveMongo was the perfect target for this idea because it accepts Json structures almost natively for both documents manipulation and queries.</p>

<p>But how does the concept behave when applied on a DB for which data are constrained by a schema and for which queries aren&#8217;t Json.</p></blockquote>

<br/>


<h2>Using Datomisca-Autosource in your Play project</h2>

<p>Add following lines to your <code>project/Build.scala</code></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">mandubianRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;Mandubian repository snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;Mandubian repository releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/releases/&quot;</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">appDependencies</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">main</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="nc">Project</span><span class="o">(</span><span class="n">appName</span><span class="o">,</span> <span class="n">appVersion</span><span class="o">,</span> <span class="n">appDependencies</span><span class="o">).</span><span class="n">settings</span><span class="o">(</span>
</span><span class='line'>  <span class="n">resolvers</span> <span class="o">++=</span> <span class="n">mandubianRepo</span><span class="o">,</span>
</span><span class='line'>  <span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;play-autosource&quot;</span>   <span class="o">%%</span> <span class="s">&quot;datomisca&quot;</span>       <span class="o">%</span> <span class="s">&quot;1.0&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Create your Model + Schema</h2>

<p>With ReactiveMongo Autosource, you could create a pure blob Autosource using <code>JsObject</code> without any supplementary information. But with Datomic, it&#8217;s not possible because Datomic forces to use a schema for your data.</p>

<p>We could create a schema and manipulate <code>JsObject</code> directly with Datomic and some Json validators. But I&#8217;m going to focus on the static models because this is the way people traditionally interact with a Schema-constrained DB.</p>

<p>Let&#8217;s create our model and schema.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// The Model (with characters pointing on Datomic named entities)</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">characters</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">DRef</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The Schema written with Datomisca</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Namespaces</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">person</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">characters</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;person.characters&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Attributes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span>       <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span><span class="o">,</span>       <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">)</span> <span class="o">.</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Person&#39;s name&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">age</span>        <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span><span class="o">,</span>        <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span>   <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">)</span> <span class="o">.</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Person&#39;s age&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">characters</span> <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">person</span> <span class="o">/</span> <span class="s">&quot;characters&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span>    <span class="nc">Cardinality</span><span class="o">.</span><span class="n">many</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Person&#39;s characterS&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Characters named entities</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">violent</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">characters</span> <span class="o">/</span> <span class="s">&quot;violent&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">weak</span>    <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">characters</span> <span class="o">/</span> <span class="s">&quot;weak&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">clever</span>  <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">characters</span> <span class="o">/</span> <span class="s">&quot;clever&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">dumb</span>    <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">characters</span> <span class="o">/</span> <span class="s">&quot;dumb&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stupid</span>  <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">characters</span> <span class="o">/</span> <span class="s">&quot;stupid&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Schema</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">schema</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">,</span> <span class="n">characters</span><span class="o">,</span>
</span><span class='line'>    <span class="n">violent</span><span class="o">,</span> <span class="n">weak</span><span class="o">,</span> <span class="n">clever</span><span class="o">,</span> <span class="n">dumb</span><span class="o">,</span> <span class="n">stupid</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Create Datomisca Autosource</h2>

<p>Now that we have our schema, let&#8217;s write the autosource.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.autosource.datomisca._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.modules.datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Implicits._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Play.current</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">models._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Person._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Persons</span> <span class="k">extends</span> <span class="nc">DatomiscaAutoSourceController</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// gets the Datomic URI from application.conf</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="nc">DatomicPlugin</span><span class="o">.</span><span class="n">uri</span><span class="o">(</span><span class="s">&quot;mem&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ugly DB initialization ONLY for test purpose</span>
</span><span class='line'>  <span class="nc">Datomic</span><span class="o">.</span><span class="n">createDatabase</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Datomic connection is required</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">connect</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// Datomic partition in which you store your entities</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">val</span> <span class="n">partition</span> <span class="k">=</span> <span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// more than ugly schema provisioning, ONLY for test purpose</span>
</span><span class='line'>  <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="nc">Person</span><span class="o">.</span><span class="n">schema</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Duration</span><span class="o">(</span><span class="s">&quot;10 seconds&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Implementing Json <-> Person <-> Datomic transformers</h2>

<p>If you compile previous code, you should have following error:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">could</span> <span class="n">not</span> <span class="n">find</span> <span class="k">implicit</span> <span class="n">value</span> <span class="k">for</span> <span class="n">parameter</span> <span class="n">datomicReader</span><span class="k">:</span> <span class="kt">datomisca.EntityReader</span><span class="o">[</span><span class="kt">models.Person</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, Datomisca Autosource requires 4 elements to work:</p>

<ul>
<li><code>Json.Format[Person]</code> to convert <code>Person</code> instances from/to Json (network interface)</li>
<li><code>EntityReader[Person]</code> to convert <code>Person</code> instances from Datomic entities (Datomic interface)</li>
<li><code>PartialAddEntityWriter[Person]</code> to convert <code>Person</code> instances to Datomic entities (Datomic interface)</li>
<li><code>Reads[PartialAddEntity]</code> to convert Json to <code>PartialAddEntity</code> which is actually a simple map of fields/values to partially update an existing entity (one single field for ex).</li>
</ul>


<p>It might seem more complicated than in ReactiveMongo but there is nothing different. The autosource converts <code>Person</code> from/to Json and then converts <code>Person</code> from/to Datomic structure ie <code>PartialAddEntity</code>. In ReactiveMongo, the only difference is that it understands Json so well that static model becomes unnecessary sometimes ;)&#8230;</p>

<p>Let&#8217;s define those elements in <code>Person</code> companion object.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>  <span class="c1">// Classic Play2 Json Reads/Writes</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">personFormat</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">format</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Partial entity update : Json to PartialAddEntity Reads</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">partialUpdate</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">PartialAddEntity</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>    <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;name</span><span class="o">).</span><span class="n">read</span><span class="o">(</span><span class="n">readAttr</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="nc">Person</span><span class="o">.</span><span class="n">name</span><span class="o">))</span> <span class="n">orElse</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">PartialAddEntity</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="n">empty</span><span class="o">)))</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;age</span><span class="o">)</span> <span class="o">.</span><span class="n">read</span><span class="o">(</span><span class="n">readAttr</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="nc">Person</span><span class="o">.</span><span class="n">age</span><span class="o">))</span> <span class="n">orElse</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">PartialAddEntity</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="n">empty</span><span class="o">)))</span>  <span class="n">and</span>
</span><span class='line'>    <span class="c1">// need to specify type because a ref/many can be a list of dref or entities so need to tell it explicitly</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;characters</span><span class="o">).</span><span class="n">read</span><span class="o">(</span> <span class="n">readAttr</span><span class="o">[</span><span class="kt">Set</span><span class="o">[</span><span class="kt">DRef</span><span class="o">]](</span><span class="nc">Person</span><span class="o">.</span><span class="n">characters</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>    <span class="n">reduce</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Entity Reads (looks like Json combinators but it&#39;s Datomisca combinators)</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">entity2Person</span><span class="k">:</span> <span class="kt">EntityReader</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>    <span class="n">name</span>      <span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>   <span class="n">and</span>
</span><span class='line'>    <span class="n">age</span>       <span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>     <span class="n">and</span>
</span><span class='line'>    <span class="n">characters</span><span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="kt">Set</span><span class="o">[</span><span class="kt">DRef</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">)(</span><span class="nc">Person</span><span class="o">.</span><span class="n">apply</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Entity Writes (looks like Json combinators but it&#39;s Datomisca combinators)</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">person2Entity</span><span class="k">:</span> <span class="kt">PartialAddEntityWriter</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>    <span class="n">name</span>      <span class="o">.</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>   <span class="n">and</span>
</span><span class='line'>    <span class="n">age</span>       <span class="o">.</span><span class="n">write</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>     <span class="n">and</span>
</span><span class='line'>    <span class="n">characters</span><span class="o">.</span><span class="n">write</span><span class="o">[</span><span class="kt">Set</span><span class="o">[</span><span class="kt">DRef</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">)(</span><span class="nc">DatomicMapping</span><span class="o">.</span><span class="n">unlift</span><span class="o">(</span><span class="nc">Person</span><span class="o">.</span><span class="n">unapply</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have everything to work except a few configurations.</p>

<h3>Add AutoSource routes at beginning <code>conf/routes</code></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">-&gt;</span>      <span class="o">/</span><span class="n">person</span>                     <span class="n">controllers</span><span class="o">.</span><span class="nc">Persons</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create <code>conf/play.plugins</code> to initialize Datomisca Plugin</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">400</span><span class="k">:</span><span class="kt">play.modules.datomisca.DatomicPlugin</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Append to <code>conf/application.conf</code> to initialize MongoDB connection</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">datomisca</span><span class="o">.</span><span class="n">uri</span><span class="o">.</span><span class="n">mem</span><span class="o">=</span><span class="s">&quot;datomic:mem://mem&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Insert your first 2 persons with Curl</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{</span> <span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bob</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">25</span><span class="o">,</span> <span class="s">&quot;characters&quot;</span><span class="k">:</span> <span class="err">[&quot;</span><span class="kt">person.characters/stupid</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;person.characters/violent&quot;</span><span class="err">]</span> <span class="o">}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/persons</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">21</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">id</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">17592186045423</span><span class="o">}</span> <span class="kt">-&gt;</span> <span class="kt">oh</span> <span class="kt">a</span> <span class="kt">Datomic</span> <span class="kt">ID</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{</span> <span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">john</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">43</span><span class="o">,</span> <span class="s">&quot;characters&quot;</span><span class="k">:</span> <span class="err">[&quot;</span><span class="kt">person.characters/clever</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;person.characters/weak&quot;</span><span class="err">]</span> <span class="o">}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/persons</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">21</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">id</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">17592186045425</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Querying is the biggest difference in Datomic</h3>

<p>In Datomic, you can&#8217;t do a <code>getAll</code> without providing a Datomic Query.</p>

<p>But what is a Datomic query? It&#8217;s inspired by <code>Datalog</code> which uses predicates to express the constraints on the searched entities. You can combine predicates together.</p>

<p>With Datomisca Autosource, you can directly send datalog queries in the query parameter <code>q</code> for GET or in body for POST with one restriction: your query can&#8217;t accept input parameters and must return only the entity ID. For ex:</p>

<p><code>[ :find ?e :where [ ?e :person/name "john"] ] --&gt; OK</code></p>

<p><code>[ :find ?e ?name :where [ ?e :person/name ?name] ] --&gt; KO</code></p>

<p>Let&#8217;s use it by finding all persons.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:text/plain&quot;</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">[</span><span class="kt">:find</span> <span class="kt">?e</span> <span class="kt">:where</span> <span class="o">[</span><span class="kt">?e</span> <span class="kt">:person/name</span><span class="o">]]</span><span class="sc">&#39; &#39;</span><span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/persons/find</span><span class="err">&#39;</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">231</span>
</span><span class='line'>
</span><span class='line'><span class="err">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">name</span><span class="err">&quot;</span><span class="kt">:</span> <span class="err">&quot;</span><span class="kt">bob</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">age</span><span class="err">&quot;</span><span class="kt">:</span> <span class="err">25</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;characters&quot;</span><span class="k">:</span> <span class="err">[</span>
</span><span class='line'>            <span class="err">&quot;</span><span class="kt">:person.characters/violent</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;:person.characters/stupid&quot;</span>
</span><span class='line'>        <span class="err">]</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;id&quot;</span><span class="k">:</span> <span class="err">17592186045423</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s">&quot;name&quot;</span><span class="k">:</span> <span class="err">&quot;</span><span class="kt">john</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;age&quot;</span><span class="k">:</span> <span class="err">43</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;characters&quot;</span><span class="k">:</span> <span class="err">[</span>
</span><span class='line'>            <span class="err">&quot;</span><span class="kt">:person.characters/clever</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;:person.characters/weak&quot;</span>
</span><span class='line'>        <span class="err">]</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;id&quot;</span><span class="k">:</span> <span class="err">17592186045425</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="err">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Please note the use of POST here instead of GET because Curl doesn&#8217;t like <code>[]</code> in URL even using <code>-g</code> option</p></blockquote>

<p>Now you can use all other routes provided by Autosource</p>

<h2>Autosource Standard Routes</h2>

<h3>Get / Find / Stream</h3>

<ul>
<li>GET /persons?&#8230;    -> Find by query</li>
<li>GET /persons/ID     -> Find by ID</li>
<li>GET /persons/stream -> Find by query &amp; stream result by page</li>
</ul>


<h3>Insert / Batch / Find</h3>

<ul>
<li>POST /persons + BODY -> Insert</li>
<li>POST /persons/find + BODY -> find by query (when query is too complex to be in a GET)</li>
<li>POST /persons/batch  + BODY -> batch insert (multiple)</li>
</ul>


<h3>Update / batch</h3>

<ul>
<li>PUT  /persons/ID   + BODY  -> Update by ID</li>
<li>PUT  /persons/ID/partial   + BODY  -> Update partially by ID</li>
<li>PUT  /persons/batch   -> batch update (multiple)</li>
</ul>


<h3>Delete / Batch</h3>

<ul>
<li>DELETE /persons/ID    -> delete by ID</li>
<li>DELETE /persons/batch + BODY -> batch delete (multiple)</li>
</ul>


<br/>


<br/>


<h2>Conclusion</h2>

<p>Play-Autosource&#8217;s ambition was to be DB agnostic (as much as possible) and showing that the concept can be applied to schemaless DB (ReactiveMongo &amp; CouchDB) and schema DB (Datomic) is a good sign it can work. Naturally, there are a few more elements to provide for Datomic than in ReactiveMongo but it&#8217;s useful anyway.</p>

<p>Thank to <a href="https://twitter.com/TrevorReznik">@TrevorReznik</a> for his contribution of CouchBase Autosource.</p>

<p>I hope to see soon one for Slick and a few more ;)</p>

<p>Have Autofun!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play2 Json Interpolation & Pattern Matching]]></title>
    <link href="http://www.mandubian.com/2013/07/04/json-interpolation-pattern-matching/"/>
    <updated>2013-07-04T08:08:00+02:00</updated>
    <id>http://www.mandubian.com/2013/07/04/json-interpolation-pattern-matching</id>
    <content type="html"><![CDATA[<h4>EXPERIMENTAL / DRAFT</h4>

<br/>




<div class="well">
<p>Do you remember <code>JsPath</code> pattern matching presented in <a href="http://mandubian.com/2013/05/01/jspath-pattern-matching/">this article</a> ?</p>
<p>Let&#8217;s now go further with something that you should enjoy even more: <b>Json Interpolation &amp; Pattern Matching</b>.</p>

<p>I&#8217;ve had the idea of these features for some time in my mind but let&#8217;s render unto Caesar what is Caesar&#8217;s : <a href="http://rapture.io/jsonSupport">Rapture.io</a> proved that it could be done quite easily and I must say I <del>stole</del> got inspired by a few implementation details from them! (<i>specially the @inline implicit conversion for string interpolation class which is required due to a ValueClass limitation that should be removed in further Scala versions</i>)
</div>


<p>First of all, code samples as usual&#8230;</p>

<h2>Create JsValue using String interpolation</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{ &quot;foo&quot; : &quot;bar&quot;, &quot;foo2&quot; : 123 }&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;foo&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bar</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;foo2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span> <span class="o">==</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="s">&quot;foo2&quot;</span> <span class="o">-&gt;</span> <span class="mi">123</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;[ 1, true, &quot;foo&quot;, 345.234]&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">[</span><span class="err">1</span>,<span class="kt">true</span>,<span class="err">&quot;</span><span class="kt">foo</span><span class="err">&quot;</span>,<span class="err">345</span><span class="kt">.</span><span class="err">234</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span> <span class="o">==</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mf">345.234</span><span class="o">)</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, pure Json in a string&#8230;</p>

<p>How does it work? Using <a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">String interpolation</a> introduced in Scala 2.10.0 and Jackson for the parsing&#8230;</p>

<p>In String interpolation, you can also put Scala variables directly in the interpolated string. You can do the same in Json interpolation.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">alpha</span> <span class="k">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'><span class="n">alpha</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">foo</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">beta</span> <span class="k">=</span> <span class="mi">123L</span>
</span><span class='line'><span class="n">beta</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{ &quot;alpha&quot; : &quot;$alpha&quot;, &quot;beta&quot; : $beta}&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;alpha&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">foo</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;beta&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">gamma</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="n">gamma</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsArray</span> <span class="o">=</span> <span class="o">[</span><span class="err">1</span>,<span class="err">2</span>,<span class="err">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">delta</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value1&quot;</span><span class="o">,</span> <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">delta</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsObject</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">value1</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">value2</span><span class="err">&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">     |         {</span>
</span><span class='line'><span class="s">     |           &quot;alpha&quot; : &quot;$alpha&quot;,</span>
</span><span class='line'><span class="s">     |           &quot;beta&quot; : $beta,</span>
</span><span class='line'><span class="s">     |           &quot;gamma&quot; : $gamma,</span>
</span><span class='line'><span class="s">     |           &quot;delta&quot; : $delta,</span>
</span><span class='line'><span class="s">     |           &quot;eta&quot; : {</span>
</span><span class='line'><span class="s">     |             &quot;foo&quot; : &quot;bar&quot;,</span>
</span><span class='line'><span class="s">     |             &quot;foo2&quot; : [ &quot;bar21&quot;, 123, true, null ]</span>
</span><span class='line'><span class="s">     |           }</span>
</span><span class='line'><span class="s">     |         }</span>
</span><span class='line'><span class="s">     |       &quot;&quot;&quot;</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;alpha&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">foo</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;beta&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;gamma&quot;</span><span class="k">:</span><span class="err">[1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="err">]</span><span class="o">,</span><span class="s">&quot;delta&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key1</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value1</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key2</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value2</span><span class="err">&quot;</span><span class="o">},</span><span class="s">&quot;eta&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">foo</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">bar</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">foo2</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[</span><span class="err">&quot;</span><span class="kt">bar21</span><span class="err">&quot;</span>,<span class="err">123</span>,<span class="kt">true</span>,<span class="kt">null</span><span class="o">]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note that string variables must be put between <code>"..."</code> because without it the parser will complain.</em></p>

<p>Ok, so now it&#8217;s really trivial to write Json, isn&#8217;t it?</p>

<p>String interpolation just replaces the string you write in your code by some Scala code concatenating pieces of strings with variables as you would write yourself. Kind-of: <code>s"toto ${v1} tata" =&gt; "toto + v1 + " tata" + ...</code></p>

<p>But at compile-time, it doesn&#8217;t compile your String into Json: the Json parsing is done at runtime with string interpolation. So using Json interpolation doesn&#8217;t provide you with compile-time type safety and parsing for now.</p>

<blockquote><p>In the future, I may replace String interpolation by a real Macro which will also parse the string at compile-time. Meanwhile, if you want to rely on type-safety, go on using <code>Json.obj / Json.arr</code> API.</p></blockquote>

<br/>


<h2>Json pattern matching</h2>

<p>What is one of the first feature that you discover when learning Scala and that makes you say immediately: &#8220;Whoaa Cool feature&#8221;? <strong>Pattern Matching</strong>.</p>

<p>You can write:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">opt</span> <span class="k">=</span> <span class="nc">Option</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">opt</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">toto</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">opt</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="s">&quot;not empty option:$s&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span>    <span class="k">=&gt;</span> <span class="s">&quot;empty option&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">not</span> <span class="n">empty</span> <span class="n">option</span><span class="k">:</span><span class="kt">toto</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or direct variable assignement using pattern matching</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=</span> <span class="n">opt</span>
</span><span class='line'><span class="n">s</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why not doing this with Json?</p>

<p>And&#8230;. Here it is with Json pattern matching!!!</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="s">&quot;foo2&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">)</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsObject</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;foo&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bar</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;foo2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{ &quot;foo&quot; : $a, &quot;foo2&quot; : $b }&quot;&quot;&quot;</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res5</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[(</span><span class="kt">play.api.libs.json.JsValue</span>, <span class="kt">play.api.libs.json.JsValue</span><span class="o">)]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">Some</span><span class="o">((</span><span class="s">&quot;bar&quot;</span><span class="o">,</span><span class="mi">123</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{ &quot;foo&quot; : $a, &quot;foo2&quot; : $b}&quot;&quot;&quot;</span> <span class="k">=</span> <span class="n">json</span><span class="s">&quot;&quot;&quot; { &quot;foo&quot; : &quot;bar&quot;, &quot;foo2&quot; : 123 }&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">a</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'><span class="n">b</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">json</span><span class="s">&quot;[ $v1, 2, $v2, 4 ]&quot;</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'><span class="n">v1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">v2</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Magical?</p>

<p>Not at all&#8230; Just <code>unapplySeq</code> using the tool that enables this kind of Json manipulation as trees: <code>JsZipper</code>&#8230;</p>

<blockquote><p>The more I use JsZippers, the more I find fields where I can use them ;)</p></blockquote>

<br/>


<h2>More complex Json pattern matching</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{</span>
</span><span class='line'><span class="s">    &quot;key1&quot; : &quot;value1&quot;,</span>
</span><span class='line'><span class="s">    &quot;key2&quot; : [</span>
</span><span class='line'><span class="s">      &quot;alpha&quot;,</span>
</span><span class='line'><span class="s">      { &quot;foo&quot; : &quot;bar&quot;,</span>
</span><span class='line'><span class="s">        &quot;foo2&quot; : {</span>
</span><span class='line'><span class="s">          &quot;key21&quot; : &quot;value21&quot;,</span>
</span><span class='line'><span class="s">          &quot;key22&quot; : [ &quot;value221&quot;, 123, false ]</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">      },</span>
</span><span class='line'><span class="s">      true,</span>
</span><span class='line'><span class="s">      123.45</span>
</span><span class='line'><span class="s">    ]</span>
</span><span class='line'><span class="s">  }&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">value1</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span><span class="o">,{</span><span class="s">&quot;foo&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bar</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;foo2&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key21</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value21</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key22</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[</span><span class="err">&quot;</span><span class="kt">value221</span><span class="err">&quot;</span>,<span class="err">123</span>,<span class="kt">false</span><span class="o">]}},</span><span class="kc">true</span><span class="o">,</span><span class="mf">123.45</span><span class="err">]</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{ &quot;key1&quot; : $v1, &quot;key2&quot; : [&quot;alpha&quot;, $v2, true, $v3] }&quot;&quot;&quot;</span> <span class="k">=</span> <span class="n">js</span>
</span><span class='line'><span class="n">v1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="s">&quot;value1&quot;</span>
</span><span class='line'><span class="n">v2</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;foo&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bar</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;foo2&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key21</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value21</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key22</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[</span><span class="err">&quot;</span><span class="kt">value221</span><span class="err">&quot;</span>,<span class="err">123</span>,<span class="kt">false</span><span class="o">]}}</span>
</span><span class='line'><span class="n">v3</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="mf">123.45</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{</span>
</span><span class='line'><span class="s">      &quot;key1&quot; : &quot;value1&quot;,</span>
</span><span class='line'><span class="s">      &quot;key2&quot; : [&quot;alpha&quot;, $v1, true, $v2]</span>
</span><span class='line'><span class="s">    }&quot;&quot;&quot;</span>   <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="n">res9</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[(</span><span class="kt">play.api.libs.json.JsValue</span>, <span class="kt">play.api.libs.json.JsValue</span><span class="o">)]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">Some</span><span class="o">(({</span><span class="s">&quot;foo&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bar</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;foo2&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key21</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value21</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key22</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[</span><span class="err">&quot;</span><span class="kt">value221</span><span class="err">&quot;</span>,<span class="err">123</span>,<span class="kt">false</span><span class="o">]}},</span><span class="mf">123.45</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A non matching example maybe ? ;)</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>  <span class="n">js</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">json</span><span class="s">&quot;&quot;&quot;{</span>
</span><span class='line'><span class="s">      &quot;key1&quot; : &quot;value1&quot;,</span>
</span><span class='line'><span class="s">      &quot;key2&quot; : [&quot;alpha&quot;, $v1, false, $v2]</span>
</span><span class='line'><span class="s">    }&quot;&quot;&quot;</span>   <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="n">res10</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[(</span><span class="kt">play.api.libs.json.JsValue</span>, <span class="kt">play.api.libs.json.JsValue</span><span class="o">)]</span> <span class="k">=</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you like that, please tell it so that I know whether it&#8217;s worth pushing it to Play Framework!</p>

<br/>


<h2>Using these features right now in a Scala/SBT project</h2>

<p>These features are part of my experimental project JsZipper presented in <a href="http://mandubian.com/2013/05/01/JsZipper/">this article</a>.</p>

<p>To use it, add following lines to your SBT <code>Build.scala</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ApplicationBuild</span> <span class="k">extends</span> <span class="nc">Build</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">mandubianRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/releases/&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">main</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="nc">Project</span><span class="o">(</span><span class="n">appName</span><span class="o">,</span> <span class="n">appVersion</span><span class="o">,</span> <span class="n">appDependencies</span><span class="o">).</span><span class="n">settings</span><span class="o">(</span>
</span><span class='line'>    <span class="n">resolvers</span> <span class="o">++=</span> <span class="n">mandubianRepo</span><span class="o">,</span>
</span><span class='line'>    <span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="s">&quot;play-json-zipper&quot;</span>  <span class="o">%%</span> <span class="s">&quot;play-json-zipper&quot;</span>    <span class="o">%</span> <span class="s">&quot;0.1-SNAPSHOT&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In your Scala code, import following packages</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">syntax._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.functional.syntax._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.extensions._</span>
</span></code></pre></td></tr></table></div></figure>


<p>PatternMatch your fun!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play AutoSource : 2'30 Kickstart Full REST & CRUD Datasource in Play App (demo'ed with ReactiveMongo + AngularJS)]]></title>
    <link href="http://www.mandubian.com/2013/06/11/play-autosource/"/>
    <updated>2013-06-11T18:18:00+02:00</updated>
    <id>http://www.mandubian.com/2013/06/11/play-autosource</id>
    <content type="html"><![CDATA[<h4>EXPERIMENTAL / DRAFT</h4>

<p>The module code and sample app can be found on Github <a href="https://github.com/mandubian/play-autosource">here</a></p>

<br/>


<p>Here we go:</p>

<h3>0&#8217; : Create App</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">play2</span> <span class="k">new</span> <span class="n">auto</span><span class="o">-</span><span class="n">persons</span>
</span><span class='line'>       <span class="k">_</span>            <span class="k">_</span>
</span><span class='line'> <span class="k">_</span> <span class="nc">__</span> <span class="o">|</span> <span class="o">|</span> <span class="nc">__</span> <span class="k">_</span> <span class="k">_</span>  <span class="k">_</span><span class="o">|</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="-Symbol">&#39;_</span> <span class="o">\|</span> <span class="o">|/</span> <span class="k">_</span><span class="err">&#39;</span> <span class="o">|</span> <span class="o">||</span> <span class="o">|</span><span class="k">_</span><span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="nc">__/|</span><span class="k">_</span><span class="o">|\</span><span class="nc">____|\__</span> <span class="o">(</span><span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="o">|</span><span class="k">_</span><span class="o">|</span>            <span class="o">|</span><span class="nc">__</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="n">play</span><span class="o">!</span> <span class="mf">2.1</span><span class="o">.</span><span class="mi">1</span> <span class="o">(</span><span class="n">using</span> <span class="nc">Java</span> <span class="mf">1.7</span><span class="o">.</span><span class="mi">0</span><span class="n">_21</span> <span class="n">and</span> <span class="nc">Scala</span> <span class="mf">2.10</span><span class="o">.</span><span class="mi">0</span><span class="o">),</span> <span class="n">http</span><span class="o">://</span><span class="n">www</span><span class="o">.</span><span class="n">playframework</span><span class="o">.</span><span class="n">org</span>
</span><span class='line'>
</span><span class='line'><span class="nc">The</span> <span class="k">new</span> <span class="n">application</span> <span class="n">will</span> <span class="n">be</span> <span class="n">created</span> <span class="n">in</span> <span class="o">/</span><span class="nc">Users</span><span class="o">/</span><span class="n">pvo</span><span class="o">/</span><span class="n">zenexity</span><span class="o">/</span><span class="n">workspaces</span><span class="o">/</span><span class="n">workspace_mandubian</span><span class="o">/</span><span class="n">auto</span><span class="o">-</span><span class="n">persons</span>
</span><span class='line'>
</span><span class='line'><span class="nc">What</span> <span class="n">is</span> <span class="n">the</span> <span class="n">application</span> <span class="n">name</span><span class="o">?</span> <span class="o">[</span><span class="kt">auto-persons</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Which</span> <span class="n">template</span> <span class="k">do</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">use</span> <span class="k">for</span> <span class="k">this</span> <span class="k">new</span> <span class="n">application</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">1</span>             <span class="o">-</span> <span class="nc">Create</span> <span class="n">a</span> <span class="n">simple</span> <span class="nc">Scala</span> <span class="n">application</span>
</span><span class='line'>  <span class="mi">2</span>             <span class="o">-</span> <span class="nc">Create</span> <span class="n">a</span> <span class="n">simple</span> <span class="nc">Java</span> <span class="n">application</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="nc">OK</span><span class="o">,</span> <span class="n">application</span> <span class="n">auto</span><span class="o">-</span><span class="n">persons</span> <span class="n">is</span> <span class="n">created</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Have</span> <span class="n">fun</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<h3>10&#8217; : edit project/Build.scala, add <code>play-autosource:reactivemongo</code> dependency</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">mandubianRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;Mandubian repository snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;Mandubian repository releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/releases/&quot;</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">appDependencies</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">main</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="nc">Project</span><span class="o">(</span><span class="n">appName</span><span class="o">,</span> <span class="n">appVersion</span><span class="o">,</span> <span class="n">appDependencies</span><span class="o">).</span><span class="n">settings</span><span class="o">(</span>
</span><span class='line'>  <span class="n">resolvers</span> <span class="o">++=</span> <span class="n">mandubianRepo</span><span class="o">,</span>
</span><span class='line'>  <span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;play-autosource&quot;</span>   <span class="o">%%</span> <span class="s">&quot;reactivemongo&quot;</span>       <span class="o">%</span> <span class="s">&quot;1.0-SNAPSHOT&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;org.specs2&quot;</span>        <span class="o">%%</span> <span class="s">&quot;specs2&quot;</span>              <span class="o">%</span> <span class="s">&quot;1.13&quot;</span>        <span class="o">%</span> <span class="s">&quot;test&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;junit&quot;</span>              <span class="o">%</span> <span class="s">&quot;junit&quot;</span>               <span class="o">%</span> <span class="s">&quot;4.8&quot;</span>         <span class="o">%</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>30&#8217; : Create new ReactiveMongo AutoSource Controller in app/Person.scala</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BORING IMPORTS</span>
</span><span class='line'><span class="c1">// Json</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.functional.syntax._</span>
</span><span class='line'><span class="c1">// Reactive JSONCollection</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.modules.reactivemongo.json.collection.JSONCollection</span>
</span><span class='line'><span class="c1">// Autosource</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.autosource.reactivemongo._</span>
</span><span class='line'><span class="c1">// AutoSource is Async so imports Scala Future implicits</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Play.current</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &gt;&gt;&gt; THE IMPORTANT PART &lt;&lt;&lt;</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Persons</span> <span class="k">extends</span> <span class="nc">ReactiveMongoAutoSourceController</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">coll</span> <span class="k">=</span> <span class="n">db</span><span class="o">.</span><span class="n">collection</span><span class="o">[</span><span class="kt">JSONCollection</span><span class="o">](</span><span class="s">&quot;persons&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>50&#8217; : Add AutoSource routes at beginning <code>conf/routes</code></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">-&gt;</span>      <span class="o">/</span><span class="n">person</span>                     <span class="n">controllers</span><span class="o">.</span><span class="nc">Persons</span>
</span></code></pre></td></tr></table></div></figure>


<h3>60&#8217; : Create <code>conf/play.plugins</code> to initialize ReactiveMongo Plugin</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">400</span><span class="k">:</span><span class="kt">play.modules.reactivemongo.ReactiveMongoPlugin</span>
</span></code></pre></td></tr></table></div></figure>


<h3>70&#8217; : Append to <code>conf/application.conf</code> to initialize MongoDB connection</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">mongodb</span><span class="o">.</span><span class="n">uri</span> <span class="o">=</span><span class="s">&quot;mongodb://localhost:27017/persons&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>80&#8217; : Launch application</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">play2</span> <span class="n">run</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Loading</span> <span class="n">project</span> <span class="n">definition</span> <span class="n">from</span> <span class="o">/.../</span><span class="n">auto</span><span class="o">-</span><span class="n">persons</span><span class="o">/</span><span class="n">project</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Set</span> <span class="n">current</span> <span class="n">project</span> <span class="n">to</span> <span class="n">auto</span><span class="o">-</span><span class="n">persons</span> <span class="o">(</span><span class="n">in</span> <span class="n">build</span> <span class="n">file</span><span class="o">:/.../</span><span class="n">auto</span><span class="o">-</span><span class="n">persons</span><span class="o">/)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Updating</span> <span class="o">{</span><span class="n">file</span><span class="o">:/.../</span><span class="n">auto</span><span class="o">-</span><span class="n">persons</span><span class="o">/}</span><span class="n">auto</span><span class="o">-</span><span class="n">persons</span><span class="o">...</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Done</span> <span class="n">updating</span><span class="o">.</span>
</span><span class='line'><span class="o">---</span> <span class="o">(</span><span class="nc">Running</span> <span class="n">the</span> <span class="n">application</span> <span class="n">from</span> <span class="nc">SBT</span><span class="o">,</span> <span class="n">auto</span><span class="o">-</span><span class="n">reloading</span> <span class="n">is</span> <span class="n">enabled</span><span class="o">)</span> <span class="o">---</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="n">play</span> <span class="o">-</span> <span class="nc">Listening</span> <span class="k">for</span> <span class="nc">HTTP</span> <span class="n">on</span> <span class="o">/</span><span class="mi">0</span><span class="k">:</span><span class="err">0</span><span class="kt">:</span><span class="err">0</span><span class="kt">:</span><span class="err">0</span><span class="kt">:</span><span class="err">0</span><span class="kt">:</span><span class="err">0</span><span class="kt">:</span><span class="err">0</span><span class="kt">:</span><span class="err">0</span><span class="kt">:</span><span class="err">9000</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="kt">Server</span> <span class="kt">started</span><span class="o">,</span> <span class="kt">use</span> <span class="kt">Ctrl+D</span> <span class="kt">to</span> <span class="kt">stop</span> <span class="kt">and</span> <span class="kt">go</span> <span class="kt">back</span> <span class="kt">to</span> <span class="kt">the</span> <span class="kt">console...</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Compiling</span> <span class="mi">5</span> <span class="nc">Scala</span> <span class="n">sources</span> <span class="n">and</span> <span class="mi">1</span> <span class="nc">Java</span> <span class="n">source</span> <span class="n">to</span> <span class="o">/.../</span><span class="n">auto</span><span class="o">-</span><span class="n">persons</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">scala</span><span class="o">-</span><span class="mf">2.10</span><span class="o">/</span><span class="n">classes</span><span class="o">...</span>
</span><span class='line'><span class="o">[</span><span class="kt">warn</span><span class="o">]</span> <span class="n">there</span> <span class="n">were</span> <span class="mi">2</span> <span class="n">feature</span> <span class="n">warnings</span><span class="o">;</span> <span class="n">re</span><span class="o">-</span><span class="n">run</span> <span class="k">with</span> <span class="o">-</span><span class="n">feature</span> <span class="k">for</span> <span class="n">details</span>
</span><span class='line'><span class="o">[</span><span class="kt">warn</span><span class="o">]</span> <span class="n">one</span> <span class="n">warning</span> <span class="n">found</span>
</span><span class='line'><span class="o">[</span><span class="kt">success</span><span class="o">]</span> <span class="nc">Compiled</span> <span class="n">in</span> <span class="mi">6</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<h3>100&#8217; : Insert your first 2 persons with Curl</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{</span> <span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bob</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">25</span> <span class="o">}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">33</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">id</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;51</span><span class="kt">b868ef31d4002c0bac8ba4</span><span class="err">&quot;</span><span class="o">}</span> <span class="kt">-&gt;</span> <span class="kt">oh</span> <span class="kt">a</span> <span class="kt">BSONObjectId</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{</span> <span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">john</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">43</span> <span class="o">}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">33</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">id</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;51</span><span class="kt">b868fa31d4002c0bac8ba5</span><span class="err">&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>110&#8217; : Get all persons</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">118</span>
</span><span class='line'>
</span><span class='line'><span class="err">[</span>
</span><span class='line'>  <span class="o">{</span><span class="err">&quot;</span><span class="kt">name</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">bob</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">age</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">25</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span><span class="s">&quot;id&quot;</span><span class="k">:</span><span class="err">&quot;51</span><span class="kt">b868ef31d4002c0bac8ba4</span><span class="err">&quot;</span><span class="o">},</span>
</span><span class='line'>  <span class="o">{</span><span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">john</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">43</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span><span class="s">&quot;id&quot;</span><span class="k">:</span><span class="err">&quot;51</span><span class="kt">b868fa31d4002c0bac8ba5</span><span class="err">&quot;</span><span class="o">}</span>
</span><span class='line'><span class="err">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>115&#8217; : Delete one person</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">DELETE</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person/</span><span class="err">51</span><span class="kt">b868ef31d4002c0bac8ba4</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">33</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">id</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;51</span><span class="kt">b868ef31d4002c0bac8ba4</span><span class="err">&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>120&#8217; : Verify person was deleted</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">GET</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person/</span><span class="err">51</span><span class="kt">b868ef31d4002c0bac8ba4</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">404</span> <span class="nc">Not</span> <span class="nc">Found</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">text/plain</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">37</span>
</span><span class='line'>
</span><span class='line'><span class="kt">ID</span> <span class="err">51</span><span class="kt">b868ef31d4002c0bac8ba4</span> <span class="kt">not</span> <span class="kt">found</span>
</span></code></pre></td></tr></table></div></figure>


<h3>125&#8217; : Update person</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">PUT</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{</span> <span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">john</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">35</span> <span class="o">}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person/</span><span class="err">51</span><span class="kt">b868fa31d4002c0bac8ba5</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">33</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">id</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;51</span><span class="kt">b868fa31d4002c0bac8ba5</span><span class="err">&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>130&#8217; : Batch insert 2 persons (johnny &amp; tom) with more properties</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">[{</span> <span class="err">&quot;</span><span class="kt">name</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">johnny</span><span class="err">&quot;</span>, <span class="err">&quot;</span><span class="kt">age</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">15</span>, <span class="err">&quot;</span><span class="kt">address</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">city</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">Paris</span><span class="err">&quot;</span>, <span class="err">&quot;</span><span class="kt">street</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">rue</span> <span class="kt">quincampoix</span><span class="err">&quot;</span><span class="o">}</span> <span class="o">}</span>,<span class="o">{</span> <span class="err">&quot;</span><span class="kt">name</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">tom</span><span class="err">&quot;</span>, <span class="err">&quot;</span><span class="kt">age</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">3</span>, <span class="err">&quot;</span><span class="kt">address</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">city</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">Trifouilly</span><span class="err">&quot;</span>, <span class="err">&quot;</span><span class="kt">street</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">rue</span> <span class="kt">des</span> <span class="kt">accidents</span> <span class="kt">de</span> <span class="kt">poucettes</span><span class="err">&quot;</span><span class="o">}</span> <span class="o">}]</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person/batch</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">8</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">nb</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">2</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>135&#8217; : Get all persons whose name begins by &#8220;john&#8221;</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{</span><span class="s">&quot;name&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">$regex</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">^john</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person/find</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">175</span>
</span><span class='line'>
</span><span class='line'><span class="err">[</span>
</span><span class='line'>  <span class="o">{</span><span class="err">&quot;</span><span class="kt">name</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">john</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">age</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">35</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span><span class="s">&quot;id&quot;</span><span class="k">:</span><span class="err">&quot;51</span><span class="kt">b868fa31d4002c0bac8ba5</span><span class="err">&quot;</span><span class="o">},</span>
</span><span class='line'>  <span class="o">{</span><span class="s">&quot;id&quot;</span><span class="k">:</span><span class="err">&quot;51</span><span class="kt">b86a1931d400bc01ac8ba8</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">johnny</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">15</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span><span class="s">&quot;address&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">city</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">Paris</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">street</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">rue</span> <span class="kt">quincampoix</span><span class="err">&quot;</span><span class="o">}}</span>
</span><span class='line'><span class="err">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>140&#8217; : Delete all persons</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">DELETE</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person/batch</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nc">OK</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">text/plain</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">7</span>
</span><span class='line'>
</span><span class='line'><span class="kt">deleted</span>
</span></code></pre></td></tr></table></div></figure>


<h3>145&#8217; : Take 5&#8217; rest</h3>

<br/>


<h3>150&#8217; : Done</h3>

<br/>


<br/>


<h2>So what was demonstrated here?</h2>

<p>With Play-Autosource, in a few lines, you obtain :</p>

<ul>
<li><strong>A backed abstract datasource (here implemented for <a href="http://www.reactivemongo.org">ReactiveMongo</a> but it could be implemented for other DBs)</strong></li>
<li><strong>All CRUD operations are exposed as pure REST services</strong></li>
<li><strong>The datasource is typesafe (here <code>JsObject</code> but we&#8217;ll show later that we can use any type)</strong></li>
</ul>


<p>It can be useful to kickstart any application in which you&#8217;re going to work iteratively on our data models in direct interaction with front-end.</p>

<p>It could also be useful to Frontend developers who need to bootstrap frontend code with Play Framework application backend. With <em>Autosource</em>, they don&#8217;t have to care about modelizing strictly a datasource on server-side and can dig into their client-side code quite quickly.</p>

<br/>


<br/>


<h2>Adding constraints &amp; validation</h2>

<blockquote><p>Now you tell me: &#8220;Hey that&#8217;s stupid, you store directly <code>JsObject</code> but my data are structured and must be validated before inserting them&#8221;</p></blockquote>

<p>Yes you&#8217;re right so let&#8217;s add some type constraints on our data:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Persons</span> <span class="k">extends</span> <span class="nc">ReactiveMongoAutoSourceController</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">coll</span> <span class="k">=</span> <span class="n">db</span><span class="o">.</span><span class="n">collection</span><span class="o">[</span><span class="kt">JSONCollection</span><span class="o">](</span><span class="s">&quot;persons&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// we validate the received Json as JsObject because the autosource type is JsObject</span>
</span><span class='line'>  <span class="c1">// and we add classic validations on types</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">val</span> <span class="n">reader</span> <span class="k">=</span> <span class="nc">__</span><span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="n">keepAnd</span> <span class="o">(</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;age&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="nc">Reads</span><span class="o">.</span><span class="n">min</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="n">keepAnd</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">max</span><span class="o">(</span><span class="mi">117</span><span class="o">))</span>
</span><span class='line'>  <span class="o">).</span><span class="n">tupled</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try it now:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">X</span> <span class="nc">POST</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">{</span> <span class="s">&quot;nameXXX&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">bob</span><span class="err">&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="k">:</span><span class="err">25</span> <span class="o">}</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">header</span> <span class="s">&quot;Content-Type:application/json&quot;</span> <span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9000</span><span class="kt">/person</span> <span class="kt">--include</span>
</span><span class='line'>
</span><span class='line'><span class="nc">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">400</span> <span class="nc">Bad</span> <span class="nc">Request</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Type</span><span class="k">:</span> <span class="kt">application/json</span><span class="o">;</span> <span class="n">charset</span><span class="k">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="nc">Content</span><span class="o">-</span><span class="nc">Length</span><span class="k">:</span> <span class="err">62</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="err">&quot;</span><span class="kt">obj.name</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[{</span><span class="err">&quot;</span><span class="kt">msg</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">validate.error.missing-path</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">args</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[]}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can add progressively constraints on your data in a few lines. With <code>AutoSource</code>, you don&#8217;t need to determine immediately the exact shape of your models and you can work with <code>JsObject</code> directly as long as you need. Sometimes, you&#8217;ll even discover that you don&#8217;t even need a structured model and <code>JsObject</code> will be enough. (<em>but I also advise to design a bit things before implementing ;)</em>)</p>

<blockquote><p>Keep in mind that our sample is based on an implementation for <em>ReactiveMongo</em> so using Json is natural. For other DB, other data structure might be more idiomatic&#8230;</p></blockquote>

<br/>


<br/>


<h2>Use typesafe models</h2>

<blockquote><p>Now you tell me: &#8220;Funny but but but <code>JsObject</code> is evil because it&#8217;s not strict enough. I&#8217;m a OO developer (maybe abused by ORM gurus when I was young) and my models are case-classes&#8230;&#8221;</p></blockquote>

<p>Yes you&#8217;re right, sometimes, you need more business logic or you want to separate concerns very strictly and your model will be shaped as case-classes.</p>

<p>So let&#8217;s replace our nice little <code>JsObject</code> by a more serious <code>case class</code>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// the model</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Person</span><span class="o">{</span>
</span><span class='line'>  <span class="c1">// the famous Json Macro which generates at compile-time a Reads[Person] in a one-liner</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">fmt</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">format</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The autosource... shorter than before</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Persons</span> <span class="k">extends</span> <span class="nc">ReactiveMongoAutoSourceController</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">coll</span> <span class="k">=</span> <span class="n">db</span><span class="o">.</span><span class="n">collection</span><span class="o">[</span><span class="kt">JSONCollection</span><span class="o">](</span><span class="s">&quot;persons&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note that I removed the validations I had introduced before because there are not useful anymore: using Json macros, I created an implicit <code>Format[Person]</code> which is used implicitly by AutoSource.</p>

<blockquote><p>So, now you can see why I consider AutoSource as a <em>typesafe datasource</em>.</p></blockquote>

<br/>


<br/>


<h2>Let&#8217;s be front-sexy with AngularJS</h2>

<p>You all know that <a href="http://www.angularjs.org/">AngularJS</a> is the new kid on the block and that you must use it if you want to be sexy nowadays.</p>

<p>I&#8217;m already sexy so I must be able to use it without understanding anything to it and that&#8217;s exactly what I&#8217;ve done: in 30mn without knowing anything about Angular (but a few concepts), I wrote a dumb CRUD front page plugged on my wonderful <code>AutoSource</code>.</p>

<br/>


<h3>Client DS in app/assets/javascripts/persons.js</h3>

<p>This is the most important part of this sample: we need to call our CRUD autosource endpoints from angularJS.</p>

<p>We are going to use <em>Angular resources</em> for it even if it&#8217;s not really the best feature of AngularJS. Anyway, in a few lines, it works pretty well in my raw case.</p>

<p><em>(thanks to Paul Dijou for reviewing this code because I repeat I don&#8217;t know angularJS at all and I wrote this in 20mn without trying to understand anything :D)</em></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span>
</span><span class='line'>  <span class="c1">// injects ngResource</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;ngResource&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="c1">// creates the Person factory backed by our autosource</span>
</span><span class='line'>  <span class="c1">// Please remark the url person/:id which will use transparently our CRUD AutoSource endpoints</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;$resource&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;person/:id&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s2">&quot;id&quot;</span> <span class="o">:</span> <span class="s2">&quot;@id&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}])</span>
</span><span class='line'>  <span class="c1">// creates a controller</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;PersonCtrl&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="s2">&quot;Person&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">createForm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// retrieves all persons</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">persons</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">query</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// creates a person using createForm and refreshes list</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">createForm</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">createForm</span><span class="p">.</span><span class="nx">age</span><span class="p">});</span>
</span><span class='line'>      <span class="nx">person</span><span class="p">.</span><span class="nx">$save</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">createForm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">persons</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">query</span><span class="p">();</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// removes a person and refreshes list</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">person</span><span class="p">.</span><span class="nx">$remove</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">persons</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">query</span><span class="p">();</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// updates a person and refreshes list</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">person</span><span class="p">.</span><span class="nx">$save</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">persons</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">query</span><span class="p">();</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CRUD UI in index.scala.html</h3>

<p>Now let&#8217;s create our CRUD UI page using angular directives. We need to be able to:</p>

<ul>
<li>list persons</li>
<li>update/delete each person</li>
<li>create new persons</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(message: String)
</span><span class='line'>
</span><span class='line'>@main(&quot;Welcome to Play 2.1&quot;) {
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;PersonCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- create form --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>name:<span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;createForm.name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;age&quot;</span><span class="nt">&gt;</span>age:<span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;createForm.age&quot;</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;create()&quot;</span><span class="nt">&gt;</span>Create new person<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hr/&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- List of persons with update/delete buttons --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table&gt;</span>
</span><span class='line'>      <span class="nt">&lt;thead&gt;&lt;th&gt;</span>name<span class="nt">&lt;/th&gt;&lt;th&gt;</span>age<span class="nt">&lt;/th&gt;&lt;td&gt;</span>actions<span class="nt">&lt;/td&gt;&lt;/thead&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tbody</span> <span class="na">ng-repeat=</span><span class="s">&quot;person in persons&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;person.name&quot;</span><span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;person.age&quot;</span><span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;update(person)&quot;</span><span class="nt">&gt;</span>Update<span class="nt">&lt;/button&gt;&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;remove(person)&quot;</span><span class="nt">&gt;</span>Delete<span class="nt">&lt;/button&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>Import Angular in main.scala.html</h3>

<p>We need to import angularjs in our application and create angular application using <code>ng-app</code></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(title: String)(content: Html)
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- please note the directive ng-app to initialize angular app--&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>@title<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span> <span class="na">href=</span><span class="s">&quot;@routes.Assets.at(&quot;</span><span class="na">stylesheets</span><span class="err">/</span><span class="na">main</span><span class="err">.</span><span class="na">css</span><span class="err">&quot;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">type=</span><span class="s">&quot;image/png&quot;</span> <span class="na">href=</span><span class="s">&quot;@routes.Assets.at(&quot;</span><span class="na">images</span><span class="err">/</span><span class="na">favicon</span><span class="err">.</span><span class="na">png</span><span class="err">&quot;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;@routes.Assets.at(&quot;</span><span class="na">javascripts</span><span class="err">/</span><span class="na">jquery-1</span><span class="err">.</span><span class="na">9</span><span class="err">.</span><span class="na">0</span><span class="err">.</span><span class="na">min</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular-resource.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;@routes.Assets.at(&quot;</span><span class="na">javascripts</span><span class="err">/</span><span class="na">person</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        @content
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What else??? Oh yes Security&#8230;</h2>

<blockquote><p>I know what you think: &#8220;Uhuh, the poor guy who exposes his DB directly on the network and who is able to delete everything without any security&#8221;</p></blockquote>

<p>Once again, you&#8217;re right. <em>(yes I know I love flattery)</em></p>

<p>Autosource is by default not secured in any way and actually I don&#8217;t really care about security because this is your job to secure your exposed APIs and there are so many ways to secure services that I prefer to let you choose the one you want.</p>

<p>Anyway, I&#8217;m a nice boy and I&#8217;m going to show you how you could secure the <code>DELETE</code> endpoint using the authentication action composition sample given in <a href="http://www.playframework.com/documentation/2.1.1/ScalaActionsComposition">Play Framework documentation</a>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// FAKE USER class to simulate a user extracted from DB.</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">User</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'><span class="k">object</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">find</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">User</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Persons</span> <span class="k">extends</span> <span class="nc">ReactiveMongoAutoSourceController</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// The action composite directly copied for PlayFramework doc</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">Authenticated</span><span class="o">(</span><span class="n">action</span><span class="k">:</span> <span class="kt">User</span> <span class="o">=&gt;</span> <span class="nc">EssentialAction</span><span class="o">)</span><span class="k">:</span> <span class="kt">EssentialAction</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Let&#39;s define a helper function to retrieve a User</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">getUser</span><span class="o">(</span><span class="n">request</span><span class="k">:</span> <span class="kt">RequestHeader</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">request</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">).</span><span class="n">flatMap</span><span class="o">(</span><span class="n">u</span> <span class="k">=&gt;</span> <span class="nc">User</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="n">u</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Now let&#39;s define the new Action</span>
</span><span class='line'>    <span class="nc">EssentialAction</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">getUser</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">u</span> <span class="k">=&gt;</span> <span class="n">action</span><span class="o">(</span><span class="n">u</span><span class="o">)(</span><span class="n">request</span><span class="o">)).</span><span class="n">getOrElse</span> <span class="o">{</span>
</span><span class='line'>        <span class="nc">Done</span><span class="o">(</span><span class="nc">Unauthorized</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">coll</span> <span class="k">=</span> <span class="n">db</span><span class="o">.</span><span class="n">collection</span><span class="o">[</span><span class="kt">JSONCollection</span><span class="o">](</span><span class="s">&quot;persons&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// &gt;&gt;&gt; IMPORTANT PART &lt;&lt;&lt;</span>
</span><span class='line'>  <span class="c1">// We simply override the delete action</span>
</span><span class='line'>  <span class="c1">// If authenticated, we call the original action</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">delete</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">BSONObjectID</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Authenticated</span> <span class="o">{</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">super</span><span class="o">.</span><span class="n">delete</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="s">&quot;ok&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the login action which log any user</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">login</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;logged in&quot;</span><span class="o">).</span><span class="n">withSession</span><span class="o">(</span><span class="s">&quot;user&quot;</span> <span class="o">-&gt;</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the logout action which log out any user</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">logout</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;logged out&quot;</span><span class="o">).</span><span class="n">withNewSession</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing to complicated here.
If you need to add headers in your responses and params to querystring, it&#8217;s easy to wrap autosource actions. Please refer to Play Framework doc for more info&#8230;</p>

<blockquote><p>I won&#8217;t try it here, the article is already too long but it should work&#8230;</p></blockquote>

<br/>


<br/>


<h2>Play-Autosource is DB agnostic</h2>

<p><code>Play-Autosource</code> Core is independent of the DB and provides Reactive (Async/Nonblocking) APIs to fulfill PlayFramework requirements.</p>

<p>Naturally this 1st implementation uses <a href="http://www.reactivemongo.org">ReactiveMongo</a> which is one of the best sample of DB reactive driver. MongoDB fits very well in this concept too because document records are really compliant to JSON datasources.</p>

<p>But other implementations for other DB can be done and I count on you people to contribute them.</p>

<blockquote><p>DB implementation contributions are welcome (Play-Autosource is just <em>Apache2 licensed</em>) and AutoSource API are subject to evolutions if they appear to be erroneous.</p></blockquote>

<br/>


<br/>


<h2>Conclusion</h2>

<p>Play-Autosource provides a very fast &amp; lightweight way to create a REST CRUD typesafe datasource in your Play/Scala application. You can begin with blob data such as <code>JsObject</code> and then elaborate the model of your data progressively by adding constraints or types to it.</p>

<p>There would be many more things to say about <code>Play/Autosource</code>:</p>

<ul>
<li>you can also override writers to change output format</li>
<li>you have some alpha streaming API also</li>
<li>etc&#8230;</li>
</ul>


<p>There are also lots of features to improve/add because it&#8217;s still a very draft module.</p>

<p>If you like it and have ideas, don&#8217;t hesitate to discuss, to contribute, to improve etc&#8230;</p>

<p><code>curl -X POST -d "{ "coding" : "Have fun"} http://localhost:9000/developer</code></p>

<p>PS: Thanks to James Roper for his <a href="http://jazzy.id.au/default/2013/05/08/advanced_routing_in_play_framework.html">article about advanced routing in Play Framework which I copied shamefully XD</a></p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Json Crafting : JsZipper + ReactiveMongo + multiple Async WS calls]]></title>
    <link href="http://www.mandubian.com/2013/05/01/reactive-json-crafting-jszipper-reactivemongo-webservice/"/>
    <updated>2013-05-01T17:17:00+02:00</updated>
    <id>http://www.mandubian.com/2013/05/01/reactive-json-crafting-jszipper-reactivemongo-webservice</id>
    <content type="html"><![CDATA[<h4>EXPERIMENTAL / DRAFT</h4>

<p>The sample app can be found on Github <a href="https://github.com/mandubian/play-json-zipper/tree/master/samples/multiservices">here</a></p>

<br/>


<p>Hi again folks!</p>

<p>Now, you may certainly have realized I&#8217;m <a href="http://www.playframework.org">Play2.1</a> Json API advocate. But you may also have understood that I&#8217;m not interested in Json as an end in itself. What catches my attention is that it&#8217;s a versatile arborescent data structure that can be used in web server&amp;client, in DB such as <a href="http://reactivemongo.org">ReactiveMongo</a> and also when communicating between servers with WebServices.</p>

<p>So I keep exploring what can be done with Json (specially in the context of PlayFramework reactive architecture) and building the tools that are required to concretize my ideas.</p>

<div class="well">
<p>My last article introduced <a href="http://www.mandubian.com/2013/05/01/jspath-pattern-matching/">JsPath Pattern Matching</a> and I told you that I needed this tool to use it with JsZipper. It&#8217;s time to use it&#8230;</p>
<p>Here is why I want to do:</p>
<ul>
  <li><b>Build dynamically a Json structure by aggregating data obtained by calling several external WS</b> such as twitterAPI or github API or whatever API.</li>

  <li><b>Build this structure from a Json template stored in MongoDB</b> in which I will find the URL and params of WebServices to call.</li>

  <li><b>Use Play2.1/WS & ReactiveMongo reactive API</b> meaning resulting Json should be built in an asynchronous and non-blocking way.</li>

  <li><b>Use concept of JsZipper</b> introduced in my <a href="http://www.mandubian.com/2013/05/01/JsZipper/">previous article</a> to be able to modify efficiently Play2.1/Json immutable structures.</li>
</ul>
</div>


<blockquote><p>Please note that this idea and its implementation is just an exercise of style to study the idea and introduce technical concepts but naturally it might seem a bit fake. Moreover, keep in mind, JsZipper API is still draft&#8230;</p></blockquote>

<br/>


<h2>The idea of Json template</h2>

<p>Imagine I want to gather twitter user timeline and github user profile in a single Json object.</p>

<p>I also would like to:</p>

<ul>
<li>configure the URL of WS and query parameters to fetch data</li>
<li>customize the resulting Json structure</li>
</ul>


<p>Let&#8217;s use a <em>Json template</em> such as:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;streams&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;twitter&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span> <span class="p">:</span> <span class="s2">&quot;http://localhost:9000/twitter/statuses/user_timeline&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;twitter_nick&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;github&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span> <span class="p">:</span> <span class="s2">&quot;http://localhost:9000/github/users&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;github_nick&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>url</code> and <code>user_id</code> found in <code>__\streams\twitter, I can call twitter API to fetch the stream of tweets and the same for</code>__\streams\github`. Finally I replace the content of each node as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;streams&quot;</span> <span class="k">:</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">&quot;</span><span class="kt">twitter</span><span class="err">&quot;</span> <span class="kt">:</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TWITTER USER TIMELINE HERE</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="s">&quot;github&quot;</span> <span class="k">:</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// GITHUB USER PROFILE HERE</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Moreover, I&#8217;d like to store multiple templates like previous sample with multiple <code>user_id</code> to be able to retrieve multiple streams at the same time.</p>

<br/>


<h2>Creating Json template in Play/ReactiveMongo (v0.9)</h2>

<p>Recently, Stephane Godbillon has released <a href="http://reactivemongo.org">ReactiveMongo v0.9</a> with corresponding Play plugin. This version really improves and eases the way you can manipulate Json directly with Play &amp; Mongo from Scala.</p>

<p>Let&#8217;s store a few instance of previous templates using this API:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// gets my mongo collection</span>
</span><span class='line'><span class="k">def</span> <span class="n">coll</span> <span class="k">=</span> <span class="n">db</span><span class="o">.</span><span class="n">collection</span><span class="o">[</span><span class="kt">JSONCollection</span><span class="o">](</span><span class="s">&quot;templates&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">provision</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span> <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;streams&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;twitter&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;url&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://localhost:9000/twitter/statuses/user_timeline&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;user_id&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;twitter_nick1&quot;</span>
</span><span class='line'>        <span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;github&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;url&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://localhost:9000/github/users&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;user_id&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;github_nick1&quot;</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">),</span>
</span><span class='line'>    <span class="o">...</span> <span class="n">more</span> <span class="n">templates</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">coll</span><span class="o">.</span><span class="n">bulkInsert</span><span class="o">(</span><span class="n">values</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">nb</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;nb&quot;</span><span class="o">-&gt;</span><span class="n">nb</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hard isn&#8217;t it?</p>

<p>Note that I use <code>localhost</code> URL because with real Twitter/Github API I would need OAuth2 tokens and this would be a pain for this sample :)</p>

<br/>


<br/>


<h2>Reactive Json crafting</h2>

<p>Now, let&#8217;s do the real job i.e the following steps:</p>

<ul>
<li>retrieve the template(s) from Mongo using ReactiveMongo <code>JsonCollection</code></li>
<li>call the WebServices to fetch the data using Play Async WS</li>
<li>update the Json template(s) using Monadic JsZipper <code>JsZipperM[Future]</code></li>
</ul>


<p>The interesting technical points here are that:</p>

<ul>
<li>ReactiveMongo is async so we get <code>Future[JsValue]</code></li>
<li>Play/WS is Async so we get also <code>Future[JsValue]</code></li>
<li>We need to call multiple WS so we have a <code>Seq[Future[JsValue]]</code></li>
</ul>


<p>We could use Play/Json transformers presented in a <a href="http://www.mandubian.com/2012/10/29/unveiling-play-2-dot-1-json-api-part3-json-transformers/">previous article</a> but knowing that you have to manage Futures and multiple WS calls, it would create quite complicated code.</p>

<p>Here is where Monadic JsZipper becomes interesting:</p>

<ul>
<li><p><code>JsZipper</code> allows modifying immutable JsValue which is already cool</p></li>
<li><p><code>JsZipperM[Future]</code> allows modifying <code>JsValue</code> in the future and it&#8217;s even better!</p></li>
</ul>


<p>Actually the real power of JsZipper (<em>besides being able to modify/delete/create a node in immutable Json tree</em>) is to transform a Json tree into a Stream of nodes that it can traverse in depth, in width or whatever you need.</p>

<br/>


<h3>Less code with WS sequential calls</h3>

<p>Here is the code because you&#8217;ll see how easy it is:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// a helper to call WS</span>
</span><span class='line'><span class="k">def</span> <span class="n">callWSFromTemplate</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">((</span><span class="n">value</span> <span class="o">\</span> <span class="s">&quot;url&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span>
</span><span class='line'>    <span class="o">.</span><span class="n">withQueryString</span><span class="o">(</span> <span class="s">&quot;user_id&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">value</span> <span class="o">\</span> <span class="s">&quot;user_id&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">get</span><span class="o">().</span><span class="n">map</span><span class="o">{</span> <span class="n">resp</span> <span class="k">=&gt;</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// calling WS sequentially</span>
</span><span class='line'><span class="k">def</span> <span class="n">dataSeq</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">{</span>
</span><span class='line'>  <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>    <span class="k">for</span><span class="o">{</span>
</span><span class='line'>      <span class="n">templates</span> <span class="k">&lt;-</span> <span class="n">coll</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">()).</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">].</span><span class="n">toList</span>   <span class="c1">// retrieves templates from Mongo</span>
</span><span class='line'>      <span class="n">updated</span>   <span class="k">&lt;-</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">templates</span><span class="o">).</span><span class="n">updateAllM</span><span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;twitter&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">callWSFromTemplate</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;github&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="n">callWSFromTemplate</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span>             <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">yield</span> <span class="nc">Ok</span><span class="o">(</span><span class="n">updated</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note:</p>

<ul>
<li><p><code>Json.toJson(templates)</code> transforms a <code>List[JsObject]</code> into <code>JsArray</code> because we want to manipulate pure <code>JsValue</code> with <code>JsZipperM[Future]</code>.</p></li>
<li><p><code>.updateAllM( (JsPath, JsValue) =&gt; Future[JsValue] )</code> is a wrapper API hiding the construction of a <code>JsZipperM[Future]</code>: once built, the `JsZipperM[Future] traverses the Json tree and for each node, it calls the provided function <em>flatMapping</em> on Futures before going to next node. This makes the calls to WS sequential and not parallel.</p></li>
<li><p><code>case (_ \ "twitter", value)</code> : yes here is the JsPath pattern matching and imagine the crazy stuff you can do mixing Json traversal and pattern matching ;)</p></li>
<li><p><code>Async</code> means the embedded code will return <code>Future[Result]</code> but remember that it DOESN&#8217;T mean the <code>Action</code> is synchronous/blocking because in Play, everything is Asynchronous/non-blocking by default.</p></li>
</ul>


<p>Then you could tell me that this is cool but the WS are not called in parallel but sequentially. Yes it&#8217;s true but imagine that it&#8217;s less than 10 lines of code and could even be reduced. Yet, here is the parallelized version&#8230;</p>

<br/>


<h3>Parallel WS calls</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">dataPar</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">{</span>
</span><span class='line'>  <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>    <span class="n">coll</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">()).</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">].</span><span class="n">toList</span><span class="o">.</span><span class="n">flatMap</span><span class="o">{</span> <span class="n">templates</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="c1">// converts List[JsObject] into JsArray</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">jsonTemplates</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">templates</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// gathers all nodes that need to be updated</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">nodes</span> <span class="k">=</span> <span class="n">jsonTemplates</span><span class="o">.</span><span class="n">findAll</span><span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;twitter&quot;</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="o">|</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;github&quot;</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="kc">true</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// launches WS calls in parallel and updates original JsArray</span>
</span><span class='line'>      <span class="nc">Future</span><span class="o">.</span><span class="n">traverse</span><span class="o">(</span><span class="n">nodes</span><span class="o">){</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">(</span><span class="n">path</span><span class="o">@(</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;twitter&quot;</span><span class="o">),</span> <span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">callWSFromTemplate</span><span class="o">(</span><span class="n">value</span><span class="o">).</span><span class="n">map</span><span class="o">(</span> <span class="n">resp</span> <span class="k">=&gt;</span> <span class="n">path</span> <span class="o">-&gt;</span> <span class="n">resp</span> <span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">(</span><span class="n">path</span><span class="o">@(</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;github&quot;</span><span class="o">),</span> <span class="n">value</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="n">callWSFromTemplate</span><span class="o">(</span><span class="n">value</span><span class="o">).</span><span class="n">map</span><span class="o">(</span> <span class="n">resp</span> <span class="k">=&gt;</span> <span class="n">path</span> <span class="o">-&gt;</span> <span class="n">resp</span> <span class="o">)</span>
</span><span class='line'>      <span class="o">}.</span><span class="n">map</span><span class="o">{</span> <span class="n">pathvalues</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">(</span><span class="n">jsonTemplates</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="n">pathvalues</span><span class="k">:_</span><span class="kt">*</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that:</p>

<ul>
<li><p><code>jsonTemplates.findAll( filter: (JsPath, JsValue) =&gt; Boolean )</code> traverses the Json tree and returns a <code>Stream[(JsPath, JsValue)]</code> containing the filtered nodes. This is not done with <code>Future</code> because we want to get all nodes now to be able to launch all WS calls in parallel.</p></li>
<li><p><code>Future.traverse(nodes)(T =&gt; Future[T])</code> traverses the filtered values and calls all WS in parallel.</p></li>
<li><p><code>case (path@(_ \ "twitter"), value)</code> is just JsPath pattern matching once again keeping track of full path to be able to return it with the value <code>path -&gt; resp</code> for next point.</p></li>
<li><p><code>jsonTemplates.set( (JsPath, JsValue)* )</code> finally updates all values at given path. Note how easy it is to update multiple values at multiple paths.</p></li>
</ul>


<p>A bit less elegant than the sequential case but not so much.</p>

<br/>


<br/>


<h2>Conclusion</h2>

<p>This sample is a bit stupid but you can see the potential of mixing those different tools together.</p>

<p>Alone, JsZipper and JsPath pattern matching provides very powerful ways of manipulating Json that Reads/Writes can&#8217;t do easily.</p>

<p>When you add reactive API on top of that, JsZipper becomes really interesting and elegant.</p>

<p>The sample app can be found on Github <a href="https://github.com/mandubian/play-json-zipper/tree/master/samples/multiservices">here</a></p>

<p>Have JsZipperM[fun]!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play2 Json Path Pattern Matching]]></title>
    <link href="http://www.mandubian.com/2013/05/01/jspath-pattern-matching/"/>
    <updated>2013-05-01T17:17:00+02:00</updated>
    <id>http://www.mandubian.com/2013/05/01/jspath-pattern-matching</id>
    <content type="html"><![CDATA[<h4>EXPERIMENTAL / DRAFT</h4>

<br/>




<div class="well">
<p>While experimenting <b>Play21/Json Zipper</b> in my <a href="http://www.mandubian.com/2013/05/01/JsZipper/">previous article</a>, I needed to match patterns on <code>JsPath</code> and decided to explore a bit this topic.</p>
<p>This article just presents my experimentations on <code>JsPath</code> pattern matching so that people interested in the topic can tell me if they like it or not and what they would add or remove. So don&#8217;t hesitate to let comments about it.</p>
<p>If the result is satisfying, I&#8217;ll propose it to Play team ;)</p>
</div>


<p>Let&#8217;s go to samples as usual.</p>

<h2>Very simple pattern matching</h2>

<h3><code>match/scale</code>-style</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">__</span> <span class="o">\</span> <span class="n">key</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">toto</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>val</code>-style</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span> <span class="o">\</span> <span class="n">toto</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span><span class='line'><span class="n">toto</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I don&#8217;t write <code>val __ \ toto = __ \ "toto"</code> <em>(2x Underscore)</em> as you would expect.</p>

<p>Why? Let&#8217;s write it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nc">__</span> <span class="o">\</span> <span class="n">toto</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">20</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">recursive</span> <span class="kt">value</span> <span class="kt">x$1</span> <span class="kt">needs</span> <span class="k">type</span>
</span><span class='line'><span class="kt">val</span> <span class="k">__</span> <span class="kt">\</span> <span class="kt">toto</span> <span class="o">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, 1st <code>__</code> is considered as a variable to be affected by Scala compiler. Then the variable <code>__</code> appears on left and right side which is not good.</p>

<p>So I use <code>_</code> to ignore its value because I know it&#8217;s <code>__</code>. If I absolutely wanted to match with <code>__</code>, you would have written:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nc">JsPath</span> <span class="o">\</span> <span class="n">toto</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span><span class='line'><span class="n">toto</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Pattern matching with indexed path</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">toto</span><span class="o">)@@</span><span class="n">idx</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">toto</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">)@@</span><span class="n">idx</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">idx</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span>      <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the usage of <code>@@</code> operator that you can dislike. <em>I didn&#8217;t find anything better for now but if anyone has a better idea, please give it to me ;)</em></p>

<br/>


<h2>Pattern matching the last element of a JsPath</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span> <span class="o">\</span> <span class="n">last</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span>
</span><span class='line'><span class="n">last</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">gamma</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>_</code>, I ignore everything before <code>gamma</code> node.</p>

<br/>


<h2>Matching only the first element and the last one</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span> <span class="o">\</span> <span class="n">first</span> <span class="o">\?\</span> <span class="n">last</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">first</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">last</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">first</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\?\</span> <span class="n">last</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">first</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">last</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>\?\</code> operator which is also a temporary choice: I didn&#8217;t want to choose <code>\\</code> ause <code>\?\</code> operator only works in the case where you match between the first and the last element of the path and not between anything and anything&#8230;</p>

<br/>


<h2>A few more complex cases</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">alpha</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\</span> <span class="n">beta</span> <span class="o">\</span> <span class="n">gamma</span> <span class="o">\</span> <span class="n">delta</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">alpha</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">beta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">beta</span>
</span><span class='line'><span class="n">gamma</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">gamma</span>
</span><span class='line'><span class="n">delta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">alpha</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\</span> <span class="k">_</span> <span class="o">\</span> <span class="k">_</span> <span class="o">\</span> <span class="n">delta</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">alpha</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">delta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span><span class="o">@@</span><span class="n">idx</span> <span class="o">\?\</span> <span class="n">gamma</span> <span class="o">\</span> <span class="n">delta</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">gamma</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">gamma</span>
</span><span class='line'><span class="n">delta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span><span class="o">@@</span><span class="mi">2</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="kc">true</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res4</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>And finally using regex?</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">pattern</span> <span class="k">=</span> <span class="s">&quot;&quot;&quot;al(\d)*pha&quot;&quot;&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="n">pattern</span><span class="k">:</span> <span class="kt">scala.util.matching.Regex</span> <span class="o">=</span> <span class="n">al</span><span class="o">(\</span><span class="n">d</span><span class="o">)*</span><span class="n">pha</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;al1234pha&quot;</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\</span> <span class="n">pattern</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span> <span class="k">=&gt;</span> <span class="kc">true</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, I think we can provide more features and now I&#8217;m going to use it with my <code>JsZipper</code> stuff in my next article ;)</p>

<p>If you like it, tell it!</p>

<p>Have fun!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JsZipper : Play2 Json advanced (& monadic) manipulations]]></title>
    <link href="http://www.mandubian.com/2013/05/01/JsZipper/"/>
    <updated>2013-05-01T17:17:00+02:00</updated>
    <id>http://www.mandubian.com/2013/05/01/JsZipper</id>
    <content type="html"><![CDATA[<h4>EXPERIMENTAL / DRAFT</h4>

<br/>


<p>The code is available on Github project <a href="https://github.com/mandubian/play-json-zipper">play-json-zipper</a></p>

<div class="well">
<p><b><code>JsZipper</code> is a new tool allowing much more complex & powerful manipulations of Json structures for Play2/Json Scala API (not a part of Play2 core for now)</b></p>
<p><code>JsZipper</code> is inspired by the <a href="http://en.wikipedia.org/wiki/Zipper_(data_structure)">Zipper</a> concept introduced by <a href="http://en.wikipedia.org/wiki/Gérard_Huet">Gérard Huet</a> in 1997.</p>

<p>The Zipper allows to update immutable traversable structures in an efficient way. Json is an immutable AST so it fits well. FYI, the Zipper behaves like a loupe that walks through each node of the AST (left/right/up/down) while keeping aware of the nodes on its left, its right and its upper. The interesting idea behind the loupe is that when it targets a node, it can modify and even delete the focused node. The analogy to the pants zipper is quite good too because when it goes down the tree, it behaves as if it was <i>opening</i> the tree to be able to drive the loupe through all nodes and when it goes up, it <i>closes</i> back the tree&#8230; I won&#8217;t tell more here, it would be too long.</p>

<p><code>JsZipper</code> is a specific interpretation of Zipper concept for Play/Json API based on :
<ul><li>Scala Streams to go through / update / construct Json AST nodes in a lazy way</li>
<li>Monadic aspects to provide <i>funnier</i> ways of manipulating the Json AST (plz see below)</li>
</ul>
</p>
<br/>
<p><i>Please note, <code>JsZipper</code> is not an end in itself but a tool useful to provide new API to manipulate Json.</i></p>
</div>


<p>Let&#8217;s go to samples because it explains everything.</p>

<p>We&#8217;ll use following Json Object.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;key11&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;TO_FIND&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;key12&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;key13&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsNull</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="mi">123</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key3&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key4&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">,</span> <span class="mf">345.6</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key411&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key4111&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;TO_FIND&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsObject</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Basic manipulations</h1>

<h2>Setting multiple paths/values</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">set</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key4&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mf">765.23</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="mf">765.23</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deleting multiple paths/values</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">delete</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key4&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key13&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Finding paths/values according to a filter</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">findAll</span><span class="o">(</span> <span class="k">_</span> <span class="o">==</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span> <span class="o">).</span><span class="n">toList</span>
</span><span class='line'><span class="n">res5</span><span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">play.api.libs.json.JsPath</span>, <span class="kt">play.api.libs.json.JsValue</span><span class="o">)]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">key1</span><span class="o">/</span><span class="n">key11</span><span class="o">,</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">key4</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">key4</span><span class="o">(</span><span class="mi">3</span><span class="o">)/</span><span class="n">key411</span><span class="o">/</span><span class="n">key4111</span><span class="o">,</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating values according to a filter based on value</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">updateAll</span><span class="o">(</span> <span class="o">(</span><span class="k">_:</span><span class="kt">JsValue</span><span class="o">)</span> <span class="o">==</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span> <span class="o">){</span> <span class="n">js</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="k">=</span> <span class="n">js</span>
</span><span class='line'>  <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span> <span class="o">+</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating values according to a filter based on path+value</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">updateAll</span><span class="o">{</span> <span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">js</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="nc">JsPathExtension</span><span class="o">.</span><span class="n">hasKey</span><span class="o">(</span><span class="n">path</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;key4111&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}{</span> <span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">js</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="k">=</span> <span class="n">js</span>
</span><span class='line'>  <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span> <span class="o">+</span> <span class="n">path</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">last</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND/key4111</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating an object from scratch</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">build</span> <span class="k">=</span> <span class="nc">JsExtensions</span><span class="o">.</span><span class="n">buildJsObject</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mi">123L</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key2&quot;</span><span class="o">)(</span><span class="mi">0</span><span class="o">)</span>      <span class="o">-&gt;</span> <span class="nc">JsBoolean</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class='line'>  <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span>           <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">build</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">},</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="err">[1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="err">]</span><span class="o">,</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">[</span><span class="kt">true</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h1>Let&#8217;s be funnier with Monads now</h1>

<blockquote><p>Let&#8217;s use <code>Future</code> as our Monad because it&#8217;s&#8230; coooool to do things in the future ;)</p></blockquote>

<p>Imagine you call several services returning <code>Future[JsValue]</code> and you want to build/update a <code>JsObject</code> from it.
Until now, if you wanted to do that with Play2/Json, it was quite tricky and required some code.</p>

<p>Here is what you can do now.</p>

<h2>Updating multiple <em>FUTURE</em> values at given paths</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeJs</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">setM</span><span class="o">[</span><span class="kt">Future</span><span class="o">](</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key4&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span>        <span class="o">-&gt;</span> <span class="n">future</span><span class="o">{</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mf">765.23</span><span class="o">)</span> <span class="o">},</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">future</span><span class="o">{</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">maybeJs</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">6</span><span class="n">beb722d</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">maybeJs</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">(</span><span class="s">&quot;2 seconds&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">res4</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="mf">765.23</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Update multiple <em>FUTURE</em> values according to a filter</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeJs</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">updateAllM</span><span class="o">[</span><span class="kt">Future</span><span class="o">](</span> <span class="o">(</span><span class="k">_:</span><span class="kt">JsValue</span><span class="o">)</span> <span class="o">==</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span> <span class="o">){</span> <span class="n">js</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">future</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="k">=</span> <span class="n">js</span>
</span><span class='line'>    <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span> <span class="o">+</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">maybeJs</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">35</span><span class="n">a4bb1a</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">maybeJs</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">(</span><span class="s">&quot;2 seconds&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a <em>FUTURE</em> JsArray from scratch</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeArr</span> <span class="k">=</span> <span class="nc">JsExtensions</span><span class="o">.</span><span class="n">buildJsArrayM</span><span class="o">[</span><span class="kt">Future</span><span class="o">](</span>
</span><span class='line'>  <span class="n">future</span> <span class="o">{</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mf">123.45</span><span class="o">)</span> <span class="o">},</span>
</span><span class='line'>  <span class="n">future</span> <span class="o">{</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">maybeArr</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">220</span><span class="n">d48e4</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">maybeArr</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">(</span><span class="s">&quot;2 seconds&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">[</span><span class="err">123</span><span class="kt">.</span><span class="err">45</span>,<span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s still draft so it can be improved but if you like it, don&#8217;t hesitate to comment and if people like it, it could become a part of Play Framework itself</p>

<p>Have fun!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Survey about most basic concept in Functional Programming]]></title>
    <link href="http://www.mandubian.com/2013/04/13/FP-survey/"/>
    <updated>2013-04-13T14:14:00+02:00</updated>
    <id>http://www.mandubian.com/2013/04/13/FP-survey</id>
    <content type="html"><![CDATA[<h4>The question</h4>

<div class="well">
<h3>What&#8217;s the first word coming in your mind when I say:</h3>
<h3><i>&#8220;Most basic concept of functional programming?&#8221;</i></h3>
</div>








<script src="http://d3js.org/d3.v3.js"></script>




<script>
var width = 800,
    height = 600;

var cluster = d3.layout.cluster()
    .size([height, width - 560]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var content = document.getElementsByClassName("entry-content")[0];

var svg = d3.select(content).append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(50,0)");

d3.json("/javascripts/survey1-results.json", function(error, json) {
  if (error) return console.warn(error);
  console.log(json);

  var nodes = cluster.nodes(json),
      links = cluster.links(nodes);

  var link = svg.selectAll(".link")
      .data(links)
      .enter().append("path")
      .attr("class", "link")
      .attr("d", diagonal);

  var node = svg.selectAll(".node")
      .data(nodes)
      .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })

  node.append("circle")
      .attr("r", 4.5);

  node.append("text")
      .attr("dx", function(d) { return d.children ? -8 : 8; })
      .attr("dy", 3)
      .style("text-anchor", function(d) { return d.children ? "end" : "start"; })
      .text(function(d) { return d.name; });
});

d3.select(self.frameElement).style("height", height + "px");

</script>


<blockquote><p>For info, this dendrograph was pre-computed using Play2.1 app sucking Tweets &amp; filtering/grouping the results in a very manual-o-matic way…</p></blockquote>

<p>Have Fun(ctional)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shapeless HList Schema-Type-Safe conversion to Datomisca/Datomic Entities]]></title>
    <link href="http://www.mandubian.com/2013/03/12/datomisca-shapeless-hlist/"/>
    <updated>2013-03-12T12:12:00+01:00</updated>
    <id>http://www.mandubian.com/2013/03/12/datomisca-shapeless-hlist</id>
    <content type="html"><![CDATA[<blockquote><p>The code is on github project <a href="https://github.com/mandubian/shapotomic">shapotomic</a></p></blockquote>

<h4>Datomisca is a Scala API for Datomic DB</h4>

<p>If you want to know more about Datomisca/Datomic schema go to my <a href="http://mandubian.com/2013/03/04/datomisca-schema/">recent article</a>. What&#8217;s interesting with Datomisca schema is that they are statically typed allowing some compiler validations and type inference.</p>

<h4><a href="https://github.com/milessabin/shapeless">Shapeless HList</a> are heterogenous polymorphic lists</h4>

<p>HList are able to contain different types of data and able to keep tracks of these types.</p>

<br/>


<div class="well">
<b><p>This project is an experience trying to :</p>

<ul>
  <li>convert HList to/from Datomic Entities</li>
  <li>check HList types against schema at compile-time</li>
</ul></b>
</div>


<p>This uses :</p>

<ul>
<li>Datomisca type-safe schema</li>
<li>Shapeless HList</li>
<li>Shapeless polymorphic functions</li>
</ul>


<p>Please note that we don&#8217;t provide any <code>Iso[From, To]</code> since there is no isomorphism here.
Actually, there are 2 monomorphisms (injective):</p>

<ul>
<li><code>HList   =&gt; AddEntity</code> to provision an entity</li>
<li><code>DEntity =&gt; HList</code> when retrieving entity</li>
</ul>


<p>We would need to implement <code>Mono[From, To]</code> certainly for our case&#8230;</p>

<h2>Code sample</h2>

<h3>Create schema based on <code>HList</code></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Koala Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Koala</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">koala</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;koala&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// schema attributes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span>        <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s name&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">age</span>         <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s age&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">trees</span>       <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;trees&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">many</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s trees&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the schema in HList form</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">schema</span> <span class="k">=</span> <span class="n">name</span> <span class="o">::</span> <span class="n">age</span> <span class="o">::</span> <span class="n">trees</span> <span class="o">::</span> <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the datomic facts corresponding to schema </span>
</span><span class='line'>  <span class="c1">// (need specifying upper type for shapeless conversion to list)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="n">schema</span><span class="o">.</span><span class="n">toList</span><span class="o">[</span><span class="kt">Operation</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Provision schema</span>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">txData</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Validate <code>HList</code> against Schema</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// creates a Temporary ID &amp; keeps it for resolving entity after insertion</span>
</span><span class='line'><span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'><span class="c1">// creates an HList entity </span>
</span><span class='line'><span class="k">val</span> <span class="n">hListEntity</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">::</span> <span class="s">&quot;kaylee&quot;</span> <span class="o">::</span> <span class="mi">3L</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">Set</span><span class="o">(</span> <span class="s">&quot;manna_gum&quot;</span><span class="o">,</span> <span class="s">&quot;tallowwood&quot;</span> <span class="o">)</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates and converts at compile-time this HList against schema</span>
</span><span class='line'><span class="n">hListEntity</span><span class="o">.</span><span class="n">toAddEntity</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">schema</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you remove a field from HList and try again, the compiler fails</span>
</span><span class='line'><span class="k">val</span> <span class="n">badHListEntity</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">::</span> <span class="s">&quot;kaylee&quot;</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">Set</span><span class="o">(</span> <span class="s">&quot;manna_gum&quot;</span><span class="o">,</span> <span class="s">&quot;tallowwood&quot;</span> <span class="o">)</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">badHListEntity</span><span class="o">.</span><span class="n">toAddEntity</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">schema</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">23</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">could</span> <span class="kt">not</span> <span class="kt">find</span> <span class="kt">implicit</span> <span class="kt">value</span> <span class="kt">for</span> <span class="kt">parameter</span> <span class="kt">pull:</span>
</span><span class='line'>  <span class="n">shapotomic</span><span class="o">.</span><span class="nc">SchemaCheckerFromHList</span><span class="o">.</span><span class="nc">Pullback2</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.TempId</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">scala.collection.immutable.Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>,
</span><span class='line'>  <span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.RawAttribute</span><span class="o">[</span><span class="kt">datomisca.DString</span>,<span class="kt">datomisca.CardinalityOne.</span><span class="k">type</span><span class="o">]</span>,
</span><span class='line'>  <span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.RawAttribute</span><span class="o">[</span><span class="kt">datomisca.DLong</span>,<span class="kt">datomisca.CardinalityOne.</span><span class="k">type</span><span class="o">]</span>,
</span><span class='line'>  <span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.RawAttribute</span><span class="o">[</span><span class="kt">datomisca.DString</span>,<span class="kt">datomisca.CardinalityMany.</span><span class="k">type</span><span class="o">]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>,<span class="kt">datomisca.AddEntity</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The compiler error is a bit weird at first but if you take a few seconds to read it, you&#8217;ll see that there is nothing hard about it, it just says:</em></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">I</span> <span class="n">can</span><span class="-Symbol">&#39;t</span> <span class="n">convert</span>
</span><span class='line'><span class="o">(</span><span class="nc">TempId</span> <span class="o">::)</span> <span class="nc">String</span>             <span class="o">::</span> <span class="nc">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>      <span class="o">::</span> <span class="nc">HNil</span> <span class="k">=&gt;</span>
</span><span class='line'>            <span class="nc">Attr</span><span class="o">[</span><span class="kt">DString</span>, <span class="kt">one</span><span class="o">]</span> <span class="o">::</span> <span class="nc">Attr</span><span class="o">[</span><span class="kt">DLong</span>, <span class="kt">one</span><span class="o">]</span> <span class="o">::</span> <span class="nc">Attr</span><span class="o">[</span><span class="kt">DString</span>, <span class="kt">many</span><span class="o">]</span> <span class="o">::</span> <span class="nc">HNil</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Convert <code>DEntity</code> to static-typed <code>HList</code> based on schema</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">e</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">resolveEntity</span><span class="o">(</span><span class="n">tx</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// rebuilds HList entity from DEntity statically typed by schema</span>
</span><span class='line'><span class="k">val</span> <span class="n">postHListEntity</span> <span class="k">=</span> <span class="n">e</span><span class="o">.</span><span class="n">toHList</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">schema</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Explicitly typing the value to show that the compiler builds the right typed HList from schema</span>
</span><span class='line'><span class="k">val</span> <span class="n">validateHListEntityType</span><span class="k">:</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="k">=</span> <span class="n">postHListEntity</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Using <code>HList</code> with compile-time schema validation is quite interesting because it provides a very basic and versatile data structure to manipulate Datomic entities in a type-safe style.</p>

<p>Moreover, as Datomic pushes atomic data manipulation (simple facts instead of full entities), it&#8217;s really cool to use <code>HList</code> instead of rigid static structure such as case-class.</p>

<p>For ex:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">simplerOp</span> <span class="k">=</span> <span class="o">(</span><span class="n">id</span> <span class="o">::</span> <span class="s">&quot;kaylee&quot;</span> <span class="o">::</span> <span class="mi">5L</span><span class="o">).</span><span class="n">toAddEntity</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">name</span> <span class="o">::</span> <span class="nc">Koala</span><span class="o">.</span><span class="n">age</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have TypedFun</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datomisca Delicatessen -  Emulsion of Scala type-safety in Datomic Schema]]></title>
    <link href="http://www.mandubian.com/2013/03/04/datomisca-schema/"/>
    <updated>2013-03-04T00:00:00+01:00</updated>
    <id>http://www.mandubian.com/2013/03/04/datomisca-schema</id>
    <content type="html"><![CDATA[<p>One more step in our progressive unveiling of <a href="http://pellucidanalytics.github.com/datomisca/index.html">Datomisca</a>, our opensource Scala API (sponsored by <a href="http://www.pellucidanalytics.com">Pellucid</a> &amp; <a href="http://www.zenexity.com">Zenexity</a>) trying to enhance <a href="http://www.datomic.com">Datomic</a> experience for Scala developers&#8230;</p>

<p>After evoking <a href="./2013-02-10-datomisca-query.html">queries compiled by Scala macros in previous article</a> and then <a href="./2013-02-18-datomisca-fact-operations.html">reactive transaction &amp; fact operation API</a>, let&#8217;s explain <strong>how <em>Datomisca</em> manages Datomic schema attributes</strong>.</p>

<br/>


<h1>Datomic Schema Reminders</h1>

<p>As explained in previous articles, Datomic stores lots of atomic facts called <code>datoms</code> which are constituted of <code>entity-id</code>, <code>attribute</code>, <code>value</code> and <code>transaction-id</code>.</p>

<p>An attribute is just a namespaced keyword <code>:&lt;namespace&gt;.&lt;nested-namespace&gt;/&lt;name&gt; such as</code>:person.address/street`:</p>

<ul>
<li><code>person.address</code> is just a hierarchical namespace <code>person</code> -> <code>address</code></li>
<li><code>street</code> is the name of the attribute</li>
</ul>


<p>It&#8217;s cool to provision all thoses atomic pieces of information but what if we provision non existing attribute with bad format, type, &#8230;? Is there a way to control the format of data in Datomic?</p>

<blockquote><p>In a less strict way than SQL, Datomic provides schema facility allowing to constrain the accepted attributes and their type values.</p></blockquote>

<h2>Schema attribute definition</h2>

<p>Datomic schema just defines the accepted attributes and some constraints on those attributes. Each schema attribute can be defined by following fields:</p>

<h3>value type</h3>

<ul>
<li><strong>basic types</strong> : <code>string</code>, <code>long</code>, <code>float</code>, <code>bigint</code>, <code>bigdec</code>, <code>boolean</code>, <code>instant</code>, <code>uuid</code>, <code>uri</code>, <code>bytes</code> (yes NO <code>int</code>).</li>
<li><strong>reference</strong> : in Datomic you can reference other entities (these are lazy relations not as strict as the ones in RDBMS)</li>
</ul>


<h3>cardinality</h3>

<ul>
<li><strong>one</strong> : one-to-one relation if you want an analogy with RDBMS</li>
<li><strong>many</strong> : one-to-many relation</li>
</ul>


<blockquote><p>Please note that in Datomic, all relations are bidirectional even for one-to-many.</p></blockquote>

<h3>optional constraints:</h3>

<ul>
<li>unicity</li>
<li>index creation</li>
<li>fulltext indexation</li>
<li>a few more exotic ones that you&#8217;ll find in <a href="http://docs.datomic.com/schema.html">Datomic doc about schema</a></li>
</ul>


<h2>Schema attributes are entities</h2>

<p>The schema validation is applied at fact insertion and allows to prevent from inserting unknown attributes or bad value types. But how are schema attributes defined?</p>

<p><strong>Actually, schema attributes are themselves entities. </strong></p>

<p>Remember, in previous article, I had introduced entities as being just loose aggregation of datoms just identified by the same entity ID (the first attribute of a datom).</p>

<p>So a schema attribute is just an entity stored in a special partition <code>:db.part/db</code> and defined by a few specific fields corresponding to the ones in previous paragraph. Here are the fields used to define a Datomic schema attribute technically speaking:</p>

<h3>mandatory fields</h3>

<ul>
<li><code>:db/ident</code> : specifies unique name of the attribute</li>
<li><code>:db/valueType</code> : specifies one the previous types - <em>Please note that even those types are not hard-coded in Datomic and in the future, adding new types could be a new feature.</em></li>
<li><code>:db/cardinality</code> : specifies the cardinality <code>one</code> or <code>many</code> of the attribute - a many attribute is just a set of values and type <code>Set</code> is important because Datomic only manages sets of unique values as it won&#8217;t return multiple times the same value when querying.</li>
</ul>


<h3>optional fields</h3>

<ul>
<li><code>:db/unique</code></li>
<li><code>:db/doc</code> (<em>useful to document your schema</em>)</li>
<li><code>:db/index</code></li>
<li><code>:db/fulltext</code></li>
<li><code>:db/isComponent</code></li>
<li><code>:db/noHistory</code></li>
</ul>


<p>Here is an example of schema attribute declaration written in Clojure:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:person/name</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A person&#39;s name&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>As you can see, creating schema attributes just means creating new entities in the right partition. So, to add new attributes to Datomic, you just have to add new facts.</p></blockquote>

<br/>


<h1>Schema sample</h1>

<p>Let&#8217;s create a schema defining a Koala living in an eucalyptus.</p>

<div class="well">
  <p>Yes I&#8217;m a super-Koala fan! Don&#8217;t ask me why, this is a long story not linked at all to Australia :D&#8230; But saving Koalas is important to me so I put this little banner for them&#8230;<span style="float: right"><a href="http://www.savethekoala.com"><img src="http://www.mandubian.com/images/mandubian/buttondonate.gif" /></a></span>
  </p>
</div>


<p>Let&#8217;s define a koala by following attributes:</p>

<ul>
<li>a name <code>String</code></li>
<li>an age <code>Long</code></li>
<li>a sex which can be <code>male</code> or `female</li>
<li><p>a few eucalyptus trees in which to feed defined by:</p>

<ul>
<li>a species being a <code>reference</code> to one of the possible species of eucalyptus trees</li>
<li>a row <code>Long</code> (<em>let&#8217;s imagine those trees are planted in rows/columns</em>)</li>
<li>a column <code>Long</code></li>
</ul>
</li>
</ul>


<p>Here is the Datomic schema for this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/name</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'> <span class="ss">:db/unique</span> <span class="ss">:db.unique/value</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s name&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/age</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/long</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s age&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/sex</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/ref</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s sex&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/eucalyptus</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/ref</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/many</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s eucalyptus trees&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus/species</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/ref</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A eucalyptus specie&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus/row</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/long</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A eucalyptus row&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus/col</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/long</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A eucalyptus column&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; koala sexes as keywords</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:sex/male</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:sex/female</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; eucalyptus species</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/manna_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/tasmanian_blue_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/swamp_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/grey_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/river_red_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/tallowwood</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this sample, you can see that we have defined 4 namespaces:</p>

<ul>
<li><code>koala</code> used to logically regroup koala entity fields</li>
<li><code>eucalyptus</code> used to logically regroup eucalyptus entity fields</li>
<li><code>sex</code> used to identify koala sex male or female as unique keywords</li>
<li><code>eucalyptus.species</code> to identify eucalyptus species as unique keywords</li>
</ul>


<p>Remark also:</p>

<ul>
<li><code>:koala/name</code> field is uniquely valued meaning no koala can have the same name</li>
<li><code>:koala/eucalyptus</code> field is a <em>one-to-many</em> reference to eucalyptus entities</li>
</ul>


<br/>


<h1>Datomisca way of declaring schema</h1>

<h2>First of all, initialize your Datomic DB</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;datomic:mem://koala-db&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">createDatabase</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">connect</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The NOT-preferred way</h2>

<p>Now, you must know it but Datomisca intensively uses Scala 2.10 macros to provide compile-time parsing and validation of Datomic queries or operations written in Clojure.</p>

<p>Previous Schema attributes definition is just a set of classic operations so you can ask Datomisca to parse them at compile-time as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">ops</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">{:db/id #db/id[:db.part/db]</span>
</span><span class='line'><span class="s"> :db/ident :koala/name</span>
</span><span class='line'><span class="s"> :db/valueType :db.type/string</span>
</span><span class='line'><span class="s"> :db/unique :db.unique/value</span>
</span><span class='line'><span class="s"> :db/cardinality :db.cardinality/one</span>
</span><span class='line'><span class="s"> :db/doc &quot;A koala&#39;s name&quot;}</span>
</span><span class='line'><span class="s">...</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can provision the schema into Datomic using:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">ops</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The preferred way</h2>

<p>Ok the previous is cool as you can validate and provision a clojure schema using Datomisca.
But Datomisca provides a programmatic way of writing schema in Scala. This brings :</p>

<ul>
<li><strong>scala idiomatic</strong> way of manipulating schema</li>
<li><strong>Type-safety</strong> to Datomic schema attributes.</li>
</ul>


<p>Let&#8217;s see the code directly:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Sex Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">SexSchema</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// First create your namespace</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">sex</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;sex&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// enumerated values</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">FEMALE</span>  <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">sex</span> <span class="o">/</span> <span class="s">&quot;female&quot;</span><span class="o">)</span> <span class="c1">// :sex/female</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">MALE</span>    <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">sex</span> <span class="o">/</span> <span class="s">&quot;male&quot;</span><span class="o">)</span>   <span class="c1">// :sex/male</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// facts representing the schema to be provisioned</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="nc">FEMALE</span><span class="o">,</span> <span class="nc">MALE</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Eucalyptus Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">EucalyptusSchema</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">eucalyptus</span>  <span class="k">=</span> <span class="k">new</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;eucalyptus&quot;</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// new is just here to allow structural construction</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">species</span>   <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;species&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// different species</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">MANNA_GUM</span>           <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;manna_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">TASMANIAN_BLUE_GUM</span>  <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;tasmanian_blue_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">SWAMP_GUM</span>           <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;swamp_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">GRY_GUM</span>             <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;grey_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">RIVER_RED_GUM</span>       <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;river_red_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">TALLOWWOOD</span>          <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;tallowwood&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// schema attributes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">species</span>  <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span> <span class="o">/</span> <span class="s">&quot;species&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Eucalyptus&#39;s species&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">row</span>      <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span> <span class="o">/</span> <span class="s">&quot;row&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Eucalyptus&#39;s row&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">col</span>      <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span> <span class="o">/</span> <span class="s">&quot;col&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Eucalyptus&#39;s column&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// facts representing the schema to be provisioned</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="n">species</span><span class="o">,</span> <span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">MANNA_GUM</span><span class="o">,</span> <span class="nc">TASMANIAN_BLUE_GUM</span><span class="o">,</span> <span class="nc">SWAMP_GUM</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">GRY_GUM</span><span class="o">,</span> <span class="nc">RIVER_RED_GUM</span><span class="o">,</span> <span class="nc">TALLOWWOOD</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Koala Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">KoalaSchema</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">koala</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;koala&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// schema attributes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span>         <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s name&quot;</span><span class="o">).</span><span class="n">withUnique</span><span class="o">(</span><span class="nc">Unique</span><span class="o">.</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">age</span>          <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s age&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sex</span>          <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;sex&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s sex&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">eucalyptus</span>   <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;eucalyptus&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">many</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s trees&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// facts representing the schema to be provisioned</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="n">eucalyptus</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Provision Schema by just accumulating all txData</span>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">SexSchema</span><span class="o">.</span><span class="n">txData</span> <span class="o">++</span>
</span><span class='line'>  <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">txData</span> <span class="o">++</span>
</span><span class='line'>  <span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">txData</span>
</span><span class='line'><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing complicated, isn&#8217;t it?</p>

<p>Exactly the same as writing Clojure schema but in Scala&#8230;</p>

<br/>


<h1>Datomisca type-safe schema</h1>

<p>Datomisca takes advantage of Scala type-safety to enhance Datomic schema attribute and make them static-typed. Have a look at Datomisca <code>Attribute</code> definition:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Attribute</span><span class="o">[</span><span class="kt">DD</span> <span class="k">&lt;:</span> <span class="kt">DatomicData</span>, <span class="kt">Card</span> <span class="k">&lt;:</span> <span class="kt">Cardinality</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So an <code>Attribute</code> is typed by 2 parameters:</p>

<ul>
<li>a <code>DatomicData</code> type</li>
<li>a <code>Cardinality</code> type</li>
</ul>


<p>So when you define a schema attribute using <em>Datomisca</em> API, the compiler also infers those types.</p>

<p>Take this example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">name</span>  <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s name&quot;</span><span class="o">).</span><span class="n">withUnique</span><span class="o">(</span><span class="nc">Unique</span><span class="o">.</span><span class="n">value</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>SchemaType.string</code> implies this is a <code>Attribute[DString, _]</code></li>
<li><code>Cardinality.one</code> implies this is a `Attribute[_, Cardinality.one]</li>
</ul>


<p>So <code>name</code> is a <code>Attribute[DString, Cardinality.one]</code></p>

<p>In the same way:</p>

<ul>
<li><code>age</code> is <code>Attribute[DLong, Cardinality.one]</code></li>
<li><code>sex</code> is <code>Attribute[DRef, Cardinality.one]</code></li>
<li><code>eucalyptus</code> is <code>Attribute[DRef, Cardinality.many]</code></li>
</ul>


<blockquote><p>As you can imagine, using this type-safe schema attributes, Datomisca can ensure consistency between the Datomic schema and the types manipulated in Scala.</p></blockquote>

<br/>


<h2>Taking advantage of type-safe schema</h2>

<h3>Checking types when creating facts</h3>

<blockquote><p>Based on the typed attribute, the compiler can help us a lot to validate that we give the right type for the right attribute.</p></blockquote>

<p>Schema facilities are extensions of basic Datomisca so you must import following to use them:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">DatomicMapping._</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a code sample:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// correct tree with right types</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree58</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="mi">5L</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">8L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">tree58</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/species</span> <span class="kt">:species/swamp_gum</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/row</span> <span class="err">5</span>
</span><span class='line'>  <span class="kt">:eucalyptus/col</span> <span class="err">8</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000000</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// incorrect tree with a string instead of a long for row</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree58</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">8L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">18</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">could</span> <span class="kt">not</span> <span class="kt">find</span> <span class="kt">implicit</span> <span class="kt">value</span> <span class="kt">for</span> <span class="kt">parameter</span> <span class="kt">attrC:</span>
</span><span class='line'>  <span class="n">datomisca</span><span class="o">.</span><span class="nc">Attribute2PartialAddEntityWriter</span><span class="o">[</span><span class="kt">datomisca.DLong</span>,<span class="kt">datomisca.CardinalityOne.</span><span class="k">type</span>,<span class="kt">String</span><span class="o">]</span>
</span><span class='line'>         <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span></code></pre></td></tr></table></div></figure>


<p>In second case, compiling fails because <code>DLong =&gt; String</code> doesn&#8217;t exist.</p>

<p>In first case, it works because <code>DLong =&gt; Long</code> is valid.</p>

<br/>


<h3>Checking types when getting fields from Datomic entities</h3>

<p>First of all, let&#8217;s create our first little Koala named <em>Rose</em> which loves feeding from 2 eucalyptus trees.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree58</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="mi">5L</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">8L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">tree74</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/species</span> <span class="kt">:species/swamp_gum</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/row</span> <span class="err">5</span>
</span><span class='line'>  <span class="kt">:eucalyptus/col</span> <span class="err">8</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000002</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree74</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">RIVER_RED_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="mi">7L</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">4L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">tree74</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/species</span> <span class="kt">:species/river_red_gum</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/row</span> <span class="err">7</span>
</span><span class='line'>  <span class="kt">:eucalyptus/col</span> <span class="err">4</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000004</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">rose</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">name</span>        <span class="o">-&gt;</span> <span class="s">&quot;rose&quot;</span> <span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">age</span>         <span class="o">-&gt;</span> <span class="mi">3L</span> <span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">sex</span>         <span class="o">-&gt;</span> <span class="nc">SexSchema</span><span class="o">.</span><span class="nc">FEMALE</span><span class="o">.</span><span class="n">ref</span> <span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">eucalyptus</span>  <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="nc">DRef</span><span class="o">(</span><span class="n">tree58</span><span class="o">.</span><span class="n">id</span><span class="o">),</span> <span class="nc">DRef</span><span class="o">(</span><span class="n">tree74</span><span class="o">.</span><span class="n">id</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">rose</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/eucalyptus</span> <span class="o">[</span><span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000001</span><span class="o">]</span>, <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000002</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/name</span> <span class="err">&quot;</span><span class="kt">rose</span><span class="err">&quot;</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000003</span><span class="o">]</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/sex</span> <span class="kt">:sex/female</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/age</span> <span class="err">3</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s provision those koala &amp; trees into Datomic and retrieve real entity corresponding to our little Rose kitty.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">tree58</span><span class="o">,</span> <span class="n">tree74</span><span class="o">,</span> <span class="n">rose</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">realRose</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">resolveEntity</span><span class="o">(</span><span class="n">tx</span><span class="o">,</span> <span class="n">rose</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally let&#8217;s take advantage of typed schema attribute to access safely to fiels of the entity:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeRose</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">tree58</span><span class="o">,</span> <span class="n">tree74</span><span class="o">,</span> <span class="n">rose</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">realRose</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">resolveEntity</span><span class="o">(</span><span class="n">tx</span><span class="o">,</span> <span class="n">rose</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">age</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">age</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sex</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">sex</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">eucalyptus</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="n">eucalyptus</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">maybeRose</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">Long</span>, <span class="kt">Long</span>, <span class="kt">Set</span><span class="o">[</span><span class="kt">Long</span><span class="o">])]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">49</span><span class="n">f454d6</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s important here is that you get a <code>(String, Long, Long, Set[Long])</code> which means the compiler was able to infer the right types from the Schema Attribute&#8230;</p>

<p>Greattt!!!</p>

<p>Ok that&#8217;s all for today!</p>

<p>Next article about an extension Datomisca provides for convenience : mapping Datomic entities to Scala structures such as case-classes or tuples. We don&#8217;t believe this is really the philosophy of Datomic in which atomic operations are much more interesting. But sometimes it&#8217;s convenient when you want to have data abstraction layer&#8230;</p>

<p>Have KoalaFun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shapelaysson = Shapeless + Play-Json ]]></title>
    <link href="http://www.mandubian.com/2013/02/27/shapelaysson/"/>
    <updated>2013-02-27T00:00:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/27/shapelaysson</id>
    <content type="html"><![CDATA[<p>Do you like <a href="https://github.com/milessabin/shapeless">Shapeless</a>, this great API developed by Miles Sabin studying generic/polytypic programming in Scala?</p>

<p>Do you like <a href="https://github.com/mandubian/play-json-alone">Play-json</a>, the Play Json 2.1 Json API developed for Play 2.1 framework and now usable as stand-alone module providing functional &amp; typesafe Json validation and Scala conversion?</p>

<br/>


<h4>Here is <strong>Shapelaysson</strong> an API interleaving Play-Json with Shapeless to be able to <strong>manipulate Json from/to Shapeless HList</strong></h4>

<p><em>HList are heterogenous polymorphic lists able to contain different types of data and able to keep tracks of these types</em></p>

<br/>


<blockquote><p><a href="https://github.com/mandubian/shapelaysson/">Shapelaysson</a> is a Github project with test/samples</p></blockquote>

<br/>


<blockquote><p><code>Shapelaysson</code> takes part in my reflexions around manipulating pure data structures from/to JSON.</p></blockquote>

<h2>A few pure Json from/to HList samples</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">shapeless._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">HList._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Tuples._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">shapelaysson._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates + converts a JsArray into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">foo</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates + converts a JsObject into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span>
</span><span class='line'><span class="n">res3</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">toto</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates + converts imbricated JsObject into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;foofoo&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;barbar1&quot;</span> <span class="o">-&gt;</span> <span class="mf">123.45</span><span class="o">,</span> <span class="s">&quot;barbar2&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;tutu&quot;</span><span class="o">),</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;bar&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;barbar&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;blabla&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">|</span>   <span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="o">(</span><span class="kt">Float</span> <span class="kt">::</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">HNil</span><span class="o">)</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="o">(</span><span class="kt">Int</span> <span class="kt">::</span> <span class="kt">Boolean</span> <span class="kt">::</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">HNil</span><span class="o">)</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span>
</span><span class='line'><span class="n">res4</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Float</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.HNil</span><span class="o">]]</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Int</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Boolean</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">toto</span> <span class="o">::</span> <span class="mf">123.45</span> <span class="o">::</span> <span class="n">tutu</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="kc">true</span> <span class="o">::</span> <span class="n">blabla</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates with ERROR JsArray into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span> <span class="nc">JsError</span><span class="o">(</span><span class="s">&quot;validate.error.expected.jsnumber&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">23</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">value</span> <span class="kt">must</span> <span class="kt">is</span> <span class="kt">not</span> <span class="kt">a</span> <span class="kt">member</span> <span class="kt">of</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>
</span><span class='line'>                    <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span> <span class="nc">JsError</span><span class="o">(</span><span class="s">&quot;validate.error.expected.jsnumber&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// converts HList to JsValue</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="mf">123.45F</span> <span class="o">::</span> <span class="s">&quot;tutu&quot;</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">)</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">[</span><span class="err">123</span><span class="kt">.</span><span class="err">44999694824219</span>,<span class="err">&quot;</span><span class="kt">tutu</span><span class="err">&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A few Json Reads/Writes[HList] samples</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.functional.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a Reads[ String :: Long :: (String :: Boolean :: HNil) :: HNil]</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nc">HListReads2</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>      <span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>        <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>        <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span>
</span><span class='line'>     <span class="o">|</span>      <span class="o">).</span><span class="n">tupled</span><span class="o">.</span><span class="n">hlisted</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">).</span><span class="n">tupled</span><span class="o">.</span><span class="n">hlisted</span>
</span><span class='line'><span class="nc">HListReads2</span><span class="k">:</span> <span class="kt">play.api.libs.json.Reads</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Boolean</span>,<span class="kt">shapeless.HNil</span><span class="o">]]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]]</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">Reads$$anon$8</span><span class="k">@</span><span class="mi">7</span><span class="n">e4a09ee</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates/converts JsObject to HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;bar&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;toto&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;alpha&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;chboing&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;beta&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span>
</span><span class='line'>     <span class="o">|</span>   <span class="o">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">).</span><span class="n">validate</span><span class="o">(</span><span class="nc">HListReads2</span><span class="o">)</span>
</span><span class='line'><span class="n">res7</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Boolean</span>,<span class="kt">shapeless.HNil</span><span class="o">]]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">toto</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="n">chboing</span> <span class="o">::</span> <span class="kc">true</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create a Writes[String :: Long :: HNil]</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">implicit</span> <span class="k">val</span> <span class="nc">HListWrites</span><span class="k">:</span> <span class="kt">Writes</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>         <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>         <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span><span class='line'>     <span class="o">|</span>       <span class="o">).</span><span class="n">tupled</span><span class="o">.</span><span class="n">hlisted</span>
</span><span class='line'><span class="nc">HListWrites</span><span class="k">:</span> <span class="kt">play.api.libs.json.Writes</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">Writes$$anon$5</span><span class="k">@</span><span class="mi">7</span><span class="n">c9d07e2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// writes a HList to JsValue</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="s">&quot;toto&quot;</span> <span class="o">::</span> <span class="mi">123L</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">)</span>
</span><span class='line'><span class="n">res8</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;foo&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;bar&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Adding shapelaysson in your dependencies</h2>

<p>In your <code>Build.scala</code>, add:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">sbt._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Keys._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ApplicationBuild</span> <span class="k">extends</span> <span class="nc">Build</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">mandubianRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/releases/&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">sonatypeRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;Sonatype OSS Releases&quot;</span> <span class="n">at</span> <span class="s">&quot;http://oss.sonatype.org/content/repositories/releases/&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Sonatype OSS Snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;http://oss.sonatype.org/content/repositories/snapshots/&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">playJsonAlone</span> <span class="k">=</span> <span class="nc">Project</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildName</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">settings</span> <span class="k">=</span> <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildSettings</span> <span class="o">++</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>      <span class="n">resolvers</span> <span class="o">++=</span> <span class="n">mandubianRepo</span> <span class="o">++</span> <span class="n">sonatypeRepo</span><span class="o">,</span>
</span><span class='line'>      <span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;org.mandubian&quot;</span>  <span class="o">%%</span> <span class="s">&quot;shapelaysson&quot;</span>  <span class="o">%</span> <span class="s">&quot;0.1-SNAPSHOT&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;org.specs2&quot;</span>     <span class="o">%%</span> <span class="s">&quot;specs2&quot;</span>        <span class="o">%</span> <span class="s">&quot;1.13&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;junit&quot;</span>           <span class="o">%</span> <span class="s">&quot;junit&quot;</span>         <span class="o">%</span> <span class="s">&quot;4.8&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More to come maybe in this draft project&#8230;
Suggestions are welcome too</p>

<p>Have Fun :: HNil!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being aware Scala 2.10.0 Futures conceal Fatal exceptions]]></title>
    <link href="http://www.mandubian.com/2013/02/22/scala-future-fatal-exception/"/>
    <updated>2013-02-22T14:14:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/22/scala-future-fatal-exception</id>
    <content type="html"><![CDATA[<p>A short article to talk about <strong>an interesting issue concerning Scala 2.10.0 Future that might interest you</strong>.</p>

<div class="well">
<h3>Summary</h3><br/>
<p>When a <code>Fatal</code> exception is thrown in your <code>Future</code> callback, it&#8217;s not caught by the <code>Future</code> and is thrown to the provided <code>ExecutionContext</code>.</p>
<p><i>But the current default Scala global <code>ExecutionContext</code> doesn&#8217;t register an <code>UncaughtExceptionHandler</code> for these fatal exceptions and your <code>Future</code> just hangs forever without notifying anything to anybody.</i></p>
</div>


<blockquote><p>This issue is well <a href="https://issues.scala-lang.org/browse/SI-7029">known</a> and a solution to the problem has already been <a href="https://github.com/scala/scala/pull/2044">merged</a> into branch 2.10.x. But this issue is present in Scala 2.10.0 so it&#8217;s interesting to keep this issue in mind IMHO. Let&#8217;s explain clearly about it.</p></blockquote>

<h2>Exceptions can be contained by Future</h2>

<p>Let&#8217;s write some stupid code with Futures.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.concurrent._</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Take default Scala global ExecutionContext which is a ForkJoin Thread Pool</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">global</span>
</span><span class='line'><span class="n">ec</span><span class="k">:</span> <span class="kt">scala.concurrent.ExecutionContextExecutor</span> <span class="o">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">ExecutionContextImpl</span><span class="k">@</span><span class="mi">15</span><span class="n">f445b7</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create an immediately redeemed Future with a simple RuntimeException</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="n">future</span><span class="o">(</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span> <span class="o">)(</span><span class="n">ec</span><span class="o">)</span>
</span><span class='line'><span class="n">f</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">27380357</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Access brutally the value to show that the Future contains my RuntimeException</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="n">res22</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">Failure</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">RuntimeException</span><span class="k">:</span> <span class="kt">foo</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use blocking await to get Future result</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="mi">2</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'><span class="n">warning</span><span class="k">:</span> <span class="kt">there</span> <span class="kt">were</span> <span class="err">1</span> <span class="kt">feature</span> <span class="kt">warnings</span><span class="o">;</span> <span class="n">re</span><span class="o">-</span><span class="n">run</span> <span class="k">with</span> <span class="o">-</span><span class="n">feature</span> <span class="k">for</span> <span class="n">details</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">RuntimeException</span><span class="k">:</span> <span class="kt">foo</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">14</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">14</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>You can see that a <code>Future</code> can contain an <code>Exception</code> (or more generally <code>Throwable</code>).</p></blockquote>

<br/>


<h2>Fatal Exceptions can&#8217;t be contained by Future</h2>

<p>If you look in <a href="https://github.com/scala/scala/blob/v2.10.0/src/library/scala/concurrent/Future.scala#L53">Scala 2.10.0 Future.scala</a>, in the scaladoc, you can find:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>* The following throwable objects are not contained in the future:
</span><span class='line'>* - `Error` - errors are not contained within futures
</span><span class='line'>* - `InterruptedException` - not contained within futures
</span><span class='line'>* - all `scala.util.control.ControlThrowable` except `NonLocalReturnControl` - not contained within futures</span></code></pre></td></tr></table></div></figure>


<p>and in the code, in several places, in <code>map</code> or <code>flatMap</code> for example, you can read:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">NonFatal</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">p</span> <span class="n">failure</span> <span class="n">t</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This means that every <code>Throwable</code> that is Fatal can&#8217;t be contained in the <code>Future.Failure</code>.</p></blockquote>

<br/>


<h2>What&#8217;s a <em>Fatal</em> Throwable?</h2>

<p>To define what&#8217;s fatal, let&#8217;s see what&#8217;s declared as non-fatal in <a href="http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/index.html#scala.util.control.NonFatal$">NonFatal ScalaDoc</a>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>* Extractor of non-fatal Throwables.  
</span><span class='line'>* Will not match fatal errors like VirtualMachineError  
</span><span class='line'>* (for example, OutOfMemoryError, a subclass of VirtualMachineError),  
</span><span class='line'>* ThreadDeath, LinkageError, InterruptedException, ControlThrowable, or NotImplementedError. 
</span><span class='line'>*
</span><span class='line'>* Note that [[scala.util.control.ControlThrowable]], an internal Throwable, is not matched by
</span><span class='line'>* `NonFatal` (and would therefore be thrown).</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Let&#8217;s consider Fatal exceptions are just critical errors that can&#8217;t be recovered in general.</p></blockquote>

<h2>So what&#8217;s the problem?</h2>

<p>It seems right not to catch fatal errors in the `Future, isn&#8217;t it?</p>

<p>But, look at following code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Let&#39;s throw a simple Fatal exception</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="n">future</span><span class="o">(</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">NotImplementedError</span><span class="o">()</span> <span class="o">)(</span><span class="n">ec</span><span class="o">)</span>
</span><span class='line'><span class="n">f</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">59747</span><span class="n">b17</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, the <code>Future</code> doesn&#8217;t contain the Fatal Exception as expected.</p>

<p><strong>But where is my Fatal Exception if it&#8217;s not caught??? No crash, notification or whatever?</strong></p>

<p>There should be an `UncaughtExceptionHandler at least notifying it!</p>

<br/>


<h2>The problem is in the default Scala <code>ExecutionContext</code>.</h2>

<p>As explained in this <a href="https://issues.scala-lang.org/browse/SI-7029">issue</a>, the exception is lost due to the implementation of the default global <code>ExecutionContext</code> provided in Scala.</p>

<p>This is a simple ForkJoin pool of threads but it has no <code>UncaughtExceptionHandler</code>. Have a look at code in <a href="https://github.com/scala/scala/blob/v2.10.0/src/library/scala/concurrent/impl/ExecutionContextImpl.scala#L72">Scala 2.10.0 ExecutionContextImpl.scala</a></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">ForkJoinPool</span><span class="o">(</span>
</span><span class='line'>        <span class="n">desiredParallelism</span><span class="o">,</span>
</span><span class='line'>        <span class="n">threadFactory</span><span class="o">,</span>
</span><span class='line'>        <span class="kc">null</span><span class="o">,</span> <span class="c1">//FIXME we should have an UncaughtExceptionHandler, see what Akka does</span>
</span><span class='line'>        <span class="kc">true</span><span class="o">)</span> <span class="c1">// Async all the way baby</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">NonFatal</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Here it&#8217;s quite clear: there is no registered `UncaughtExceptionHandler.</p>

<p>What&#8217;s the consequence?</p></blockquote>

<h2>Your Future hangs forever</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="mi">30</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'><span class="n">warning</span><span class="k">:</span> <span class="kt">there</span> <span class="kt">were</span> <span class="err">1</span> <span class="kt">feature</span> <span class="kt">warnings</span><span class="o">;</span> <span class="n">re</span><span class="o">-</span><span class="n">run</span> <span class="k">with</span> <span class="o">-</span><span class="n">feature</span> <span class="k">for</span> <span class="n">details</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">TimeoutException</span><span class="k">:</span> <span class="kt">Futures</span> <span class="kt">timed</span> <span class="kt">out</span> <span class="kt">after</span> <span class="o">[</span><span class="err">30</span> <span class="kt">seconds</span><span class="o">]</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="o">.</span><span class="n">ready</span><span class="o">(</span><span class="nc">Promise</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">96</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, you can wait as long as you want, the Future is never redeemed properly, it just hangs forever and you don&#8217;t even know that a Fatal Exception has been thrown.</p>

<p>As explained in the issue, please note, if you use a custom <code>ExecutionContext</code> based on <code>SingleThreadExecutor</code>, this issue doesn&#8217;t appear!</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">es</span> <span class="k">=</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Executors</span><span class="o">.</span><span class="n">newSingleThreadExecutor</span>
</span><span class='line'><span class="n">es</span><span class="k">:</span> <span class="kt">java.util.concurrent.ExecutorService</span> <span class="o">=</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Executors$FinalizableDelegatedExecutorService</span><span class="k">@</span><span class="mi">1</span><span class="n">e336f59</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">fromExecutorService</span><span class="o">(</span><span class="n">es</span><span class="o">)</span>
</span><span class='line'><span class="n">ec</span><span class="k">:</span> <span class="kt">scala.concurrent.ExecutionContextExecutorService</span> <span class="o">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">ExecutionContextImpl$$anon$1</span><span class="k">@</span><span class="mi">34</span><span class="n">f43dac</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">](</span><span class="k">throw</span> <span class="k">new</span> <span class="nc">NotImplementedError</span><span class="o">())(</span><span class="n">ec</span><span class="o">)</span>
</span><span class='line'><span class="nc">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;pool-1-thread-1&quot;</span> <span class="n">f</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">7</span><span class="n">d01f935</span>
</span><span class='line'><span class="n">scala</span><span class="o">.</span><span class="nc">NotImplementedError</span><span class="k">:</span> <span class="kt">an</span> <span class="kt">implementation</span> <span class="kt">is</span> <span class="kt">missing</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$line41</span><span class="o">.</span><span class="nc">$read$$iw$$iw$$iw$$iw$$iw$$iw$$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$line41</span><span class="o">.</span><span class="nc">$read$$iw$$iw$$iw$$iw$$iw$$iw$$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">15</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p><strong>In Scala 2.10.0, if you have a Fatal Exception in a Future callback, your Future just trashes the Fatal Exception and hangs forever without notifying anything.</strong></p>

<p>Hopefully, due to this <a href="https://github.com/scala/scala/pull/2044">already merged PR</a>, in a future delivery of Scala 2.10.x, this problem should be corrected.</p>

<p>To finish, in the same old good <a href="https://issues.scala-lang.org/browse/SI-7029">issue</a>, Viktor Klang also raised the question of what should be considered as fatal or not:</p>

<blockquote><p>there&#8217;s a bigger topic at hand here, the one whether NotImplementedError, InterruptedException and ControlThrowable are to be considered fatal or not.</p></blockquote>

<p>Meanwhile, be aware and take care ;)</p>

<p>Have <code>Promise[NonFatal]</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Play2 SCALA JSON API Stand-alone]]></title>
    <link href="http://www.mandubian.com/2013/02/21/play-json-stand-alone/"/>
    <updated>2013-02-21T14:14:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/21/play-json-stand-alone</id>
    <content type="html"><![CDATA[<p>In a very recent <a href="https://github.com/playframework/Play20/pull/754">Pull Request</a>, `play-json has been made a stand-alone module in <a href="https://github.com/playframework/Play20">Play2.2-SNAPSHOT master</a> as play-iteratees.</p>

<p>It means:</p>

<ul>
<li>You can take Play2 Scala Json API as a stand-alone library and keep using Json philosophy promoted by <a href="http://www.playframework.org">Play Framework</a> anywhere.</li>
<li><code>play-json</code> module is stand-alone in terms of dependencies but is a part &amp; parcel of Play2.2 so it will evolve and follow Play2.x releases (and following versions) always ensuring full compatibility with play ecosystem.</li>
<li><code>play-json</code> module has 3 ultra lightweight dependencies:

<ul>
<li> <code>play-functional</code></li>
<li> <code>play-datacommons</code></li>
<li> <code>play-iteratees</code></li>
</ul>
</li>
</ul>


<p>These are pure Scala generic pieces of code from Play framework so no Netty or whatever dependencies in it.<br/>
You can then import <code>play-json</code> in your project without any fear of bringing unwanted deps.</p>

<p><code>play-json</code> will be released with future Play2.2 certainly so meanwhile, I provide:</p>

<ul>
<li>a build published in my <a href="https://github.com/mandubian/mandubian-mvn/">Maven Github repository</a></li>
<li>a sample project called <a href="https://github.com/mandubian/play-json-alone">play-json-alone</a></li>
</ul>


<br/>


<blockquote><p>Even if the version is <em>2.2-SNAPSHOT</em>, be aware that this is the same code as the one released in Play 2.1.0. This API has reached a good stability level. Enhancements and bug corrections will be brought to it but it&#8217;s production-ready right now.</p></blockquote>

<h2>Adding play-json 2.2-SNAPSHOT in your dependencies</h2>

<p>In your <code>Build.scala</code>, add:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">sbt._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Keys._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ApplicationBuild</span> <span class="k">extends</span> <span class="nc">Build</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">mandubianRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/releases/&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">playJsonAlone</span> <span class="k">=</span> <span class="nc">Project</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildName</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">settings</span> <span class="k">=</span> <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildSettings</span> <span class="o">++</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>      <span class="n">resolvers</span> <span class="o">++=</span> <span class="n">mandubianRepo</span><span class="o">,</span>
</span><span class='line'>      <span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;play&quot;</span>        <span class="o">%%</span> <span class="s">&quot;play-json&quot;</span> <span class="o">%</span> <span class="s">&quot;2.2-SNAPSHOT&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;org.specs2&quot;</span>  <span class="o">%%</span> <span class="s">&quot;specs2&quot;</span> <span class="o">%</span> <span class="s">&quot;1.13&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;junit&quot;</span>        <span class="o">%</span> <span class="s">&quot;junit&quot;</span> <span class="o">%</span> <span class="s">&quot;4.8&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using play-json 2.2-SNAPSHOT in your code:</h2>

<p>Just import the following and get everything from Play2.1 Json API:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.functional._</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">EucalyptusTree</span><span class="o">(</span><span class="n">col</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">row</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">EucalyptusTree</span><span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">fmt</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">format</span><span class="o">[</span><span class="kt">EucalyptusTree</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Koala</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">home</span><span class="k">:</span> <span class="kt">EucalyptusTree</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Koala</span><span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">fmt</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">format</span><span class="o">[</span><span class="kt">Koala</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">kaylee</span> <span class="k">=</span> <span class="nc">Koala</span><span class="o">(</span><span class="s">&quot;kaylee&quot;</span><span class="o">,</span> <span class="nc">EucalyptusTree</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">23</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">prettyPrint</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">kaylee</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Json</span><span class="o">.</span><span class="n">fromJson</span><span class="o">[</span><span class="kt">Koala</span><span class="o">](</span>
</span><span class='line'>  <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;kaylee&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;home&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;col&quot;</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;row&quot;</span> <span class="o">-&gt;</span> <span class="mi">23</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Using <code>play-json</code>, you can get some bits of <a href="http://www.playframework.org">Play Framework</a> pure Web philosophy.<br/>
Naturally, to unleash its full power, don&#8217;t hesitate to dive into <a href="http://www.playframework.org">Play Framework</a> and discover 100% full Web Reactive Stack ;)</p></blockquote>

<p>Thanks a lot to Play Framework team for promoting play-json as stand-alone module!<br/>
Lots of interesting features incoming soon ;)</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datomisca Delicatessen - The Scala Reactive Cherry on the Datomic Cake of Facts]]></title>
    <link href="http://www.mandubian.com/2013/02/18/datomisca-fact-operations/"/>
    <updated>2013-02-18T14:14:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/18/datomisca-fact-operations</id>
    <content type="html"><![CDATA[<p>Let&#8217;s go on unveiling <a href="http://pellucidanalytics.github.com/datomisca/index.html">Datomisca</a> a bit more.</p>

<p>Remember Datomisca is an opensource Scala API (sponsored by <a href="http://www.pellucidanalytics.com">Pellucid</a> and <a href="http://www.zenexity.com">Zenexity</a>) trying to enhance <a href="http://www.datomic.com">Datomic</a> experience for Scala developers.</p>

<p>After evoking <a href="./2013-02-10-datomisca-query.html">queries compiled by Scala macros in previous article</a>, I&#8217;m going to describe how <em>Datomisca</em> allows to create Datomic fact operations in a programmatic way and sending them to Datomic transactor using asynchronous/non-blocking API based on <em>Scala 2.10 Future/ExecutionContext</em>.</p>

<br/>


<h1><a name="datomic-facts">Facts about Datomic</a></h1>

<p>First, let&#8217;s remind a few facts about Datomic:</p>

<blockquote><p>Datomic is a <a href="http://docs.datomic.com/query.html">immutable fact-oriented distributed schema-constrained database</a></p></blockquote>

<p>It means:</p>

<h4>Datomic stores very small units of data called <em>facts</em></h4>

<p>Yes no tables, documents or even columns in Datomic. Everything stored in it is a very small fact.</p>

<br/>


<h4><em>Fact</em> is the atomic unit of data</h4>

<p>Facts are represented by the following tuple called <strong>Datom</strong></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">datom</span> <span class="nb">= </span><span class="p">[</span><span class="nv">entity</span> <span class="nv">attribute</span> <span class="nv">value</span> <span class="nv">tx</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>entity</em> is an ID and several facts can share the same ID making them facts of the same entity. <strong>Here you can see that an entity is very loose concept in Datomic.</strong></li>
<li><em>attribute</em> is just a namespaced keyword : <code>:person/name</code> which is generally constrained by a typed schema attribute. <strong>The namespace can be used to logically identify an entity like <em>&#8220;person&#8221;</em> by regrouping several attributes in the same namespace.</strong></li>
<li><em>value</em> is the value of this attribute for this entity at this instant</li>
<li><em>tx</em> uniquely identifies the <a href="http://docs.datomic.com/glossary.html#sec-35">transaction</a> in which this fact was inserted. Naturally a transaction is associated with a time.</li>
</ul>


<br/>


<h4><em>Facts</em> are immutable &amp; temporal</h4>

<p>It means that:</p>

<ul>
<li><strong>You can&#8217;t change the past</strong><br/>
Facts are immutable ie you can&#8217;t mutate a fact as other databases generally do: Datomic always creates a new version of the fact with a new value.</li>
<li><strong>Datomic always grows</strong><br/>
If you add more facts, nothing is deleted so the DB grows. Naturally you can truncate a DB, export it and rebuild a new smaller one.</li>
<li><strong>You can foresee a possible future</strong><br/>
From your present, you can temporarily add facts to Datomic without committing them on central storage thus simulating a possible future.</li>
</ul>


<br/>


<h4>Reads/writes are distributed across different components</h4>

<ul>
<li><strong>One Storage service</strong> storing physically the data (Dynamo DB/Infinispan/Postgres/Riak/&#8230;)</li>
<li><strong>Multiple Peers</strong> (generally local to your app instances) behaving like high-speed synchronized cache obfuscating all the local data storage and synchro mechanism and providing the <em>Datalog</em> queries.</li>
<li><strong>One (or several) transactor(s)</strong> centralizing the write mechanism allowing ACID transactions and notifying peers about those evolutions.</li>
</ul>


<p>For more info about architecture, go to <a href="http://docs.datomic.com/architecture.html">this page</a></p>

<br/>


<h4>Immutability means known DB state is always consistent</h4>

<p>You might not be up-to-date with central data storage as Datomic is distributed, you can even lose connection with it but the data you know are always consistent because nothing can be mutated.</p>

<blockquote><p>This immutability concept is one of the most important to understand in Datomic.</p></blockquote>

<br/>


<h4>Schema contrains entity attributes</h4>

<p>Datomic allows to define that a given attribute must :</p>

<ul>
<li>be of <strong>given type</strong> : <code>String</code> or <code>Long</code> or <code>Instant</code> etc…</li>
<li>have <strong>cardinality</strong> (<code>one</code> or <code>many</code>)</li>
<li>be <strong>unique</strong> or not</li>
<li>be <strong>fullsearchable</strong> or not</li>
<li>be <strong>documented</strong></li>
<li>…</li>
</ul>


<p>It means that if you try to insert a fact with an attribute and a value of the wrong type, Datomic will refuse it.</p>

<p>Datomic entity can also reference other entities in Datomic providing relations in Datomic (even if Datomic is not RDBMS). One interesting thing to know is that <strong>all relations in Datomic are bidirectional.</strong></p>

<blockquote><p>I hope you immediately see the link between these typed schema attributes and potential Scala type-safe features…</p></blockquote>

<br/>


<blockquote><p><strong>Author&#8217;s note : Datomic is more about <em>evolution</em> than mutation</strong><br/>
<em>I&#8217;ll let you meditate this sentence linked to theory of evolution ;)</em></p></blockquote>

<br/>


<h1><a name="datomic-ops">Datomic operations</a></h1>

<p>When you want to create a new fact in Datomic, you send a write operation request to the <code>Transactor</code>.</p>

<h2><a name="datomic-ops-basic">Basic operations</a></h2>

<p>There are 2 basic operations:</p>

<h4>Add a Fact</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="nv">entity-id</span> <span class="nv">attribute</span> <span class="nv">value</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding a fact for the same entity will <em>NOT update</em> existing fact but create a new fact with same <em>entity-id</em> and a new <em>tx</em>.</p>

<h4>Retract a Fact</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db/retract</span> <span class="nv">entity-id</span> <span class="nv">attribute</span> <span class="nv">value</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Retracting a fact doesn&#8217;t erase any fact but just tells: <em>&#8220;for this entity-id, from now, there is no more this attribute&#8221;</em></p>

<p>You might wonder why providing the value when you want to remove a fact? This is because an attribute can have a <em>MANY</em> cardinality in which case you want to remove just a value from the set of values.</p>

<h2><a name="datomic-ops-entity">Entity operations</a></h2>

<p>In Datomic, you often manipulate groups of facts identifying an entity. An entity has no physical existence in Datomic but is just a group of facts having the same <em>entity-id</em>. Generally, the attributes constituting an entity are logically grouped under the same namespace (<code>:person/name</code>, <code>:person/age</code>…) but this is not mandatory at all.</p>

<p>Datomic provides 2 operations to manipulate entities directly</p>

<h4>Add Entity</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span> <span class="mi">-1</span><span class="p">]</span>
</span><span class='line'>  <span class="ss">:person/name</span> <span class="s">&quot;Bob&quot;</span>
</span><span class='line'>  <span class="ss">:person/spouse</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span> <span class="mi">-2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually this is equivalent to 2 <em>Add-Fact</em> operations:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span> <span class="mi">-1</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="nv">id</span> <span class="ss">:person/name</span> <span class="s">&quot;Bob&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="nv">id</span> <span class="ss">:person/age</span> <span class="mi">30</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Retract Entity</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db.fn/retractEntity</span> <span class="nv">entity-id</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2><a name="datomic-ops-ident">Special case of identified values</a></h2>

<p>In Datomic, there are special entities built using the special attribute <code>:db/ident</code> of type <code>Keyword</code> which are said to be <em>identified by the given keyword</em>.</p>

<p>There are created as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:person.characters/clever</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:person.characters/dumb</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you use <code>:person.characters/clever</code> or <code>:person.characters/dumb</code>, it references directly one of those 2 entities without using their ID.</p>

<p>You can see those identified entities as enumerated values also.</p>

<p>Now that you know how it works in Datomic, let&#8217;s go to <em>Datomisca</em>!</p>

<br/>


<h1><a name="datomisca-ops">Datomisca programmatic operations</a></h1>

<p>Datomisca&#8217;s preferred way to build Fact/Entity operations is programmatic because it provides more flexibility to Scala developers.
Here are the translation of previous operations in Scala:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a Namespace</span>
</span><span class='line'><span class="k">val</span> <span class="n">person</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a add-fact operation </span>
</span><span class='line'><span class="c1">// It creates the datom (id keyword value _) from</span>
</span><span class='line'><span class="c1">//   - a temporary id (or a final long ID)</span>
</span><span class='line'><span class="c1">//   - the couple `(keyword, value)`</span>
</span><span class='line'><span class="k">val</span> <span class="n">addFact</span> <span class="k">=</span> <span class="nc">Fact</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Bob&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a retract-fact operation</span>
</span><span class='line'><span class="k">val</span> <span class="n">retractFact</span> <span class="k">=</span> <span class="nc">Fact</span><span class="o">.</span><span class="n">retract</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates identified values</span>
</span><span class='line'><span class="k">val</span> <span class="n">violent</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">character</span> <span class="o">/</span> <span class="s">&quot;violent&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">dumb</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">character</span> <span class="o">/</span> <span class="s">&quot;dumb&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a add-entity operation</span>
</span><span class='line'><span class="k">val</span> <span class="n">addEntity</span> <span class="k">=</span> <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Bob&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">30L</span><span class="o">,</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;characters&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">violent</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">dumb</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a retract-entity operation from real Long ID of the entity</span>
</span><span class='line'><span class="k">val</span> <span class="n">retractEntity</span> <span class="k">=</span> <span class="nc">Entity</span><span class="o">.</span><span class="n">retract</span><span class="o">(</span><span class="mi">3L</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">addFact</span><span class="o">,</span> <span class="n">retractFact</span><span class="o">,</span> <span class="n">addEntity</span><span class="o">,</span> <span class="n">retractEntity</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that:</p>

<ul>
<li><code>person / "name"</code> creates the keyword <code>:person/name</code> from namespace <code>person</code></li>
<li><code>DId(Partition.USER)</code> generates a temporary Datomic Id in Partition <code>USER</code>. <em>Please note that you can create your own partition too</em>.</li>
<li><code>violent.ref</code> is used to access the keyword reference of the <em>identified entity</em>.</li>
<li><code>ops = Seq(…)</code> represents a collection of operations to be sent to <em>transactor</em>.</li>
</ul>


<br/>


<h1><a name="datomisca-macro-ops">Datomisca Macro operations</a></h1>

<p>Remember the way Datomisca dealt with query by parsing/validating Datalog/Clojure queries at compile-time using Scala macros?</p>

<p>You can do the same in Datomisca with operations:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">weak</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span> <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span><span class="o">,</span> <span class="s">&quot;weak&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">val</span> <span class="n">dumb</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span> <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span><span class="o">,</span> <span class="s">&quot;dumb&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">ops</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">   [:db/add #db/id[:db.part/user] :db/ident :region/n]</span>
</span><span class='line'><span class="s">   [:db/add \${DId(Partition.USER)} :db/ident :region/n]</span>
</span><span class='line'><span class="s">   [:db/retract #db/id[:db.part/user] :db/ident :region/n]</span>
</span><span class='line'><span class="s">   [:db/retractEntity 1234]</span>
</span><span class='line'><span class="s">   {</span>
</span><span class='line'><span class="s">      :db/id \${id}</span>
</span><span class='line'><span class="s">      :person/name &quot;toto&quot;</span>
</span><span class='line'><span class="s">      :person/age 30</span>
</span><span class='line'><span class="s">      :person/characters [ \$weak \$dumb ]</span>
</span><span class='line'><span class="s">   }</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It compiles what&#8217;s between <code>"""…"""</code> at compile-time and tells you if there are errors and then it builds Scala corresponding operations.</p>

<p>Ok it&#8217;s cool but if you look better, you&#8217;ll see there is some sugar in this Clojure code:</p>

<ul>
<li><code>\${DId(Partition.USER)}</code></li>
<li><code>\$weak</code></li>
<li><code>\$dumb</code></li>
</ul>


<p><strong>You can use Scala variables and inject them into Clojure operations at compile-time as you do for Scala string interpolation</strong></p>

<blockquote><p>For Datomic queries, the compiled way is really natural but we tend to prefer programmatic way to build operations because it feels to be much more &#8220;scala-like&#8221; after experiencing both methods.</p></blockquote>

<h2><a name="datomisca-parse-ops">Datomisca runtime parsing</a></h2>

<p>There is a last way to create operations by parsing at runtime a String and throwing an exception if the syntax is not valid.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">parseOps</span><span class="o">(</span><span class="s">&quot;&quot;&quot; … &quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>It&#8217;s very useful if you have existing Datomic Clojure files (containing schema or bootstrap data) that you want to load into Datomic.</p></blockquote>

<br/>


<h1><a name="datomisca-transact">Datomisca reactive transactions</a></h1>

<p>Last but not the least, let&#8217;s send those operations to Datomic Transactor.</p>

<p>In its Java API, Datomic Connection provides a <code>transact</code> asynchronous API based on a <code>ListenableFuture</code>. This API can be enhanced in Scala because Scala provides much more evolved asynchronous/non-blocking facilities than Java based on Scala 2.10 <code>Future</code>/<code>ExecutionContext</code>.</p>

<p><code>Future</code> allows to implement your asynchronous call using continuation style based on Scala classic <code>map/flatMap</code> methods.
<code>ExecutionContext</code> is a great tool allowing to specify in which pool of threads your asynchronous call will be executed making it non-blocking with respect to your current execution context (or thread).</p>

<blockquote><p>This new feature is really important when you work with reactive API such as Datomisca or Play too so don&#8217;t hesitate to study it further.</p></blockquote>

<p>Let&#8217;s look at code directly to show how it works in <em>Datomisca</em>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// don&#39;t forget to bring an ExecutionContext in your scope… </span>
</span><span class='line'><span class="c1">// Here is default Scala ExecutionContext which is a simple pool of threads with one thread per core by default</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates an URI</span>
</span><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;datomic:mem://mydatomicdn&quot;</span>
</span><span class='line'><span class="c1">// creates implicit connection</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">connect</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a few operations</span>
</span><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">addFact</span><span class="o">,</span> <span class="n">retractFact</span><span class="o">,</span> <span class="n">addEntity</span><span class="o">,</span> <span class="n">retractEntity</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">ops</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">:</span> <span class="kt">TxReport</span> <span class="o">=&gt;</span>
</span><span class='line'>   <span class="c1">// do something</span>
</span><span class='line'>   <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// return a value of type R (anything you want)</span>
</span><span class='line'>   <span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">R</span> <span class="o">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">res</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Another example by building ops directly in the transact call and using flatMap</span>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">id</span><span class="o">)(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">30L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">weak</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">dumb</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;tutu&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">54L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">violent</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">clever</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;tata&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">23L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">weak</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">clever</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">flatMap</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span> <span class="k">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">res</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Please note the <code>tx: TxReport</code> which is a structure returned by Datomic transactor containing information about last transaction.</p></blockquote>

<h1><a name="datomisca-resolve">Datomisca resolving Real ID</a></h1>

<p>In all samples, we create operations based on temporary ID built by Datomic in a given partition.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But once you have inserted a fact or an entity into Datomic, you need to resolve the real final ID to use it further because the temporary ID is no more meaningful.</p>

<p>The final ID is resolved from the <code>TxReport</code> send back by Datomic transactor. This <code>TxReport</code> contains a map between temporary ID and final ID. Here is how you can use it in Datomisca:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">id1</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">id2</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">id1</span><span class="o">)(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">30L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">weak</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">dumb</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">id2</span><span class="o">)(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;tutu&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">54L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">violent</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">clever</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">finalId1</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="n">resolve</span><span class="o">(</span><span class="n">id1</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">finalId2</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="n">resolve</span><span class="o">(</span><span class="n">id2</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// or</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">List</span><span class="o">(</span><span class="n">finalId1</span><span class="o">,</span> <span class="n">finalId2</span><span class="o">)</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">id1</span><span class="o">,</span> <span class="n">id2</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span><span class="o">.</span><span class="n">resolve</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<div class="well">That&#8217;s all for now… Next articles about writing programmatic Datomic schema with Datomisca.</div>


<p>Have Promise[Fun]!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datomisca Delicatessen - Datomic queries coated in a thin layer of Scala]]></title>
    <link href="http://www.mandubian.com/2013/02/10/datomisca-query/"/>
    <updated>2013-02-10T13:13:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/10/datomisca-query</id>
    <content type="html"><![CDATA[<p>Last week, we have launched <a href="http://pellucidanalytics.github.com/datomisca/index.html">Datomisca</a>, our opensource Scala API trying to enhance <a href="http://www.datomic.com">Datomic</a> experience for Scala developers.</p>

<p>Datomic is great in Clojure because it is was made for it. Yet, we believe Scala can provide a very good platform for Datomic too because the functional concepts found in Clojure are also in Scala except that Scala is a compiled and statically typed language whereas Clojure is dynamic. Scala could also bring a few features on top of Clojure based on its features such as static typing, typeclasses, macros…</p>

<p>This article is the first of a serie of articles aiming at describing as shortly as possible specific features provided by Datomisca.
Today, let&#8217;s present how Datomisca enhances Datomic queries.</p>

<br/>


<h1><a name="datomic-query">Query in Datomic?</a></h1>

<p>Let&#8217;s take the same old example of a Person having :</p>

<ul>
<li>a name <code>String</code></li>
<li>a age <code>Long</code></li>
<li>a birth <code>Date</code></li>
</ul>


<p>So, how do you write a query in Datomic searching a person by its name?
Like that…</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="k">def</span> <span class="n">q</span> <span class="o">[</span> <span class="kt">:find</span> <span class="kt">?e</span>
</span><span class='line'>  <span class="kt">:in</span> <span class="kt">$</span> <span class="kt">?name</span>
</span><span class='line'>  <span class="kt">:where</span> <span class="o">[</span> <span class="kt">?e</span> <span class="kt">:person/name</span> <span class="kt">?name</span> <span class="o">]</span>
</span><span class='line'><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this is Clojure using Datalog rules.</p>

<p>In a summary, this query:</p>

<ul>
<li>accepts 2 inputs parameters:

<ul>
<li>a datasource <code>$</code></li>
<li>a name parameter <code>?name</code></li>
</ul>
</li>
<li>searches facts respecting datalog rule <code>[ ?e :person/name ?name ]</code>: a fact having attribute <code>:person/name</code> with value <code>?name</code></li>
<li>returns the ID of the found facts <code>?e</code></li>
</ul>


<br/>


<h2><a name="datomic-query-reminders">Reminders about Datomic queries</a></h2>

<h3>Query is a static data structure</h3>

<p>An important aspect of queries to understand in Datomic is that a query is purely a static data structure and not something functional. We could compare it to a prepared statement in SQL: build it once and reuse it as much as you need.</p>

<h3>Query has input/ouput parameters</h3>

<p>In previous example:</p>

<ul>
<li><code>:in</code> enumerates input parameters</li>
<li><code>:find</code> enumerates output parameters</li>
</ul>


<p>When executing this query, you must provide the right number of input parameters and you will retrieve the given number of output parameters.</p>

<br/>


<h1><a name="datomisca-query">Query in Datomisca?</a></h1>

<p>So now, how do you write the same query in Datomisca?</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">[ :find ?e</span>
</span><span class='line'><span class="s">  :in $ ?name</span>
</span><span class='line'><span class="s">  :where [ ?e :person/name ?name ] </span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I see you&#8217;re a bit disappointed: a query as a string whereas in Clojure, it&#8217;s a real data structure…</p>

<p>This is actually the way the Java API sends query for now. Moreover, using strings like implies potential bad practices such as building queries by concatenating strings which are often the origin of risks of code injection in SQL for example…</p>

<p>But in Scala we can do a bit better using new Scala 2.10 features : Scala macros.</p>

<p><strong>So, using Datomisca, when you write this code, in fact, the query string is parsed by a Scala macro:</strong></p>

<ul>
<li><strong>If there are any error, the compilation breaks showing where the error was detected.</strong></li>
<li><strong>If the query seems valid (with respect to our parser), the String is actually replaced by a AST representing this query as a data structure.</strong></li>
<li><strong>The input/output parameters are infered to determine their numbers.</strong></li>
</ul>


<blockquote><p>Please note that the compiled query is a simple immutable AST which could be manipulated as a Clojure query and re-used as many times as you want.</p></blockquote>

<h3>Example OK with single output</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">     [ :find ?e</span>
</span><span class='line'><span class="s">       :in $ ?name</span>
</span><span class='line'><span class="s">       :where [ ?e :person/name ?name ] </span>
</span><span class='line'><span class="s">     ]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">q</span><span class="k">:</span> <span class="kt">datomisca.TypedQueryAuto2</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span><span class="o">]</span> <span class="k">=</span> <span class="o">[</span> <span class="kt">:find</span> <span class="kt">?e</span> <span class="kt">:in</span> <span class="kt">$</span> <span class="kt">?name</span> <span class="kt">:where</span> <span class="o">[</span><span class="kt">?e</span> <span class="kt">:person/name</span> <span class="kt">?name</span><span class="o">]</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without going in deep details, here you can see that the compiled version of <code>q</code> isn&#8217;t a <code>Query[String]</code> but a <code>TypedQueryAuto2[DatomicData, DatomicData, DatomicData]</code> being an AST representing the query.</p>

<p><code>TypedQueryAuto2[DatomicData, DatomicData, DatomicData]</code> means you have:</p>

<ul>
<li>2 input parameters <code>$ ?name</code> of type <code>DatomicData</code> and <code>DatomicData</code></li>
<li>Last type parameter represents output parameter <code>?e</code> of type <code>DatomicData</code></li>
</ul>


<p><em>Note : <code>DatomicData</code> is explained in next paragraph.</em></p>

<br/>


<h3>Example OK with several outputs</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">     [ :find ?e ?age</span>
</span><span class='line'><span class="s">       :in $ ?name</span>
</span><span class='line'><span class="s">       :where [ ?e :person/name ?name ] </span>
</span><span class='line'><span class="s">              [ ?e :person/age ?age ]  </span>
</span><span class='line'><span class="s">     ]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">q</span><span class="k">:</span> <span class="kt">datomisca.TypedQueryAuto2</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span>,<span class="o">(</span><span class="kt">datomisca.DatomicData</span>, <span class="kt">datomisca.DatomicData</span><span class="o">)]</span> <span class="k">=</span> <span class="o">[</span> <span class="kt">:find</span> <span class="kt">?e</span> <span class="kt">?age</span> <span class="kt">:in</span> <span class="kt">$</span> <span class="kt">?name</span> <span class="kt">:where</span> <span class="o">[</span><span class="kt">?e</span> <span class="kt">:person/name</span> <span class="kt">?name</span><span class="o">]</span> <span class="o">[</span><span class="kt">?e</span> <span class="kt">:person/age</span> <span class="kt">?age</span><span class="o">]</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TypedQueryAuto2[DatomicData,DatomicData,(DatomicData, DatomicData)]</code> means you have:</p>

<ul>
<li>2 input parameters <code>$ ?name</code> of type <code>DatomicData</code></li>
<li>last tupled type parameter represents the 2 output parameters <code>?e ?age</code> of type <code>DatomicData</code></li>
</ul>


<br/>


<h3>Examples with syntax-error</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">     [ :find ?e</span>
</span><span class='line'><span class="s">       :in $ ?name</span>
</span><span class='line'><span class="s">       :where [ ?e :person/name ?name </span>
</span><span class='line'><span class="s">     ]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">14</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">`]&#39; expected but end of source found</span>
</span><span class='line'><span class="kt">     ]&quot;&quot;&quot;)</span>
</span><span class='line'><span class="kt">      ^</span>
</span><span class='line'>
</span><span class='line'><span class="kt">scala&gt; val q  = Query(&quot;&quot;&quot;</span>
</span><span class='line'><span class="kt">     [ :find ?e</span>
</span><span class='line'><span class="kt">       :in $ ?name</span>
</span><span class='line'><span class="kt">       :where [ ?e person/name ?name ]</span>
</span><span class='line'><span class="kt">     ]&quot;&quot;&quot;)</span>
</span><span class='line'><span class="kt">&lt;console&gt;:13: error: `</span><span class="err">]&#39;</span> <span class="kt">expected</span> <span class="kt">but</span> <span class="err">`</span><span class="kt">p</span><span class="err">&#39;</span> <span class="kt">found</span>
</span><span class='line'>       <span class="k">:</span><span class="kt">where</span> <span class="o">[</span> <span class="kt">?e</span> <span class="kt">person/name</span> <span class="kt">?name</span> <span class="o">]</span>
</span><span class='line'>                   <span class="o">^</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is see that the compiler will tell you where it detects syntax errors.</p>

<p><em>The query compiler is not yet complete so don&#8217;t hesitate to report us when you discover issues.</em></p>

<br/>


<h2><a name="datomicdata">What&#8217;s <code>DatomicData</code> ?</a></h2>

<p>Datomisca wraps completely Datomic API and types. So Datomisca doesn&#8217;t let any Datomic/Clojure types perspirating into its domain and wraps them all in the so-called <code>DatomicData</code> which is the abstract parent trait of all Datomic types seen from Datomisca. For each Datomic type, you have the corresponding specific <code>DatomicData</code>:</p>

<ul>
<li>DString for String</li>
<li>DLong for Long</li>
<li>DatomicFloat for Float</li>
<li>DSet for Set</li>
<li>DInstant for Instant</li>
<li>&#8230;</li>
</ul>


<h3>Why not using Pure Scala types directly?</h3>

<p>Firstly, because type correspondence is not exact between Datomic types and Scala. The best sample is <code>Instant</code>: is it a <code>java.util.Date</code> or a <code>jodatime.DateTime</code>?</p>

<p>Secondly, we wanted to keep the possibility of converting Datomic types into different Scala types depending on our needs so we have abstracted those types.</p>

<p>This abstraction also isolates us and we can decide exactly how we want to map Datomic types to Scala. The trade-off is naturally that, if new types appear in Datomic, we must wrap them.</p>

<br/>


<h3>Keep in mind that Datomisca queries accept and return <code>DatomicData</code></h3>

<p>All query data used as input and output paremeters shall be <code>DatomicData</code>. When getting results, you can convert those generic <code>DatomicData</code> into one of the previous specific types (<code>DString</code>, <code>DLong</code>, … ).</p>

<p>From <code>DatomicData</code>, you can also convert to Scala pure types based on implicit typeclasses:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">DatomicData</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="k">implicit</span> <span class="n">rd</span><span class="k">:</span> <span class="kt">DDReader</span><span class="o">[</span><span class="kt">DatomicData</span>, <span class="kt">T</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">ClassCastException</span><span class="k">:</span> <span class="kt">datomisca.DString</span> <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">cast</span> <span class="kt">to</span> <span class="kt">datomisca.DLong</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note 1 : that current Scala query compiler is a bit restricted to the specific domain of Datomic queries and doesn&#8217;t support all Clojure syntax which might create a few limitations when calling Clojure functions in queries. Anyway, a full Clojure syntax Scala compiler is in the TODO list so these limitations will disappear once it&#8217;s implemented…</em></p>

<br/>


<p><em>Note 2 : Current macro just infers the number of input/output parameters but, using Schema typed attributes that we will present in a future article, we will provide some deeper features such as parameter type inference.</em></p>

<br/>


<h1><a name="execute">Execute the query</a></h1>

<p>You can create queries independently of any connection to Datomic.
But you need an implicit <code>DatomicConnection</code> in your scope to execute it.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Creates an implicit connection</span>
</span><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;…&quot;</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">connect</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Creates the query</span>
</span><span class='line'><span class="k">val</span> <span class="n">queryFindByName</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">[ :find ?e ?birth</span>
</span><span class='line'><span class="s">  :in $ ?name</span>
</span><span class='line'><span class="s">  :where [ ?e :person/name ?name ]</span>
</span><span class='line'><span class="s">         [ ?e :person/birth ?birth ]        </span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Executes the query     </span>
</span><span class='line'><span class="k">val</span> <span class="n">results</span><span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">DatomicData</span>, <span class="kt">DatomicData</span><span class="o">]</span> <span class="kt">=</span> <span class="kt">Datomic.q</span><span class="o">(</span><span class="kt">queryFindByName</span>, <span class="kt">database</span>, <span class="kt">DString</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">John</span><span class="err">&quot;</span><span class="o">))</span>
</span><span class='line'><span class="kt">//</span> <span class="kt">Results</span> <span class="k">type</span> <span class="kt">is</span> <span class="kt">precised</span> <span class="kt">for</span> <span class="kt">the</span> <span class="kt">example</span> <span class="kt">but</span> <span class="kt">not</span> <span class="kt">required</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note we made the <code>database</code> input parameter mandatory even if it&#8217;s implicit in when importing <code>Datomic._</code> because in Clojure, it&#8217;s also required and we wanted to stick to it.</em></p>

<h3>Compile-error if wrong number of inputs</h3>

<p>If you don&#8217;t provide 2 input parameters, you will get a compile error because the query expects 2 input parameters.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Following would not compile because query expects 2 input parameters</span>
</span><span class='line'><span class="k">val</span> <span class="n">results</span><span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">DatomicData</span>, <span class="kt">DatomicData</span><span class="o">]</span> <span class="kt">=</span> <span class="kt">Datomic.q</span><span class="o">(</span><span class="kt">queryFindByName</span>, <span class="kt">DString</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">John</span><span class="err">&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="kt">Compiling</span> <span class="err">1</span> <span class="kt">Scala</span> <span class="kt">source</span> <span class="kt">to</span> <span class="kt">/Users/pvo/zenexity/workspaces/workspace_pellucid/datomisca/samples/getting-started/target/scala-</span><span class="err">2</span><span class="kt">.</span><span class="err">10</span><span class="kt">/classes...</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span> <span class="kt">/Users/pvo/zenexity/workspaces/workspace_pellucid/datomisca/samples/getting-started/src/main/scala/GettingStarted.scala:</span><span class="err">87</span><span class="kt">:</span> <span class="kt">overloaded</span> <span class="kt">method</span> <span class="kt">value</span> <span class="kt">q</span> <span class="kt">with</span> <span class="kt">alternatives:</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">A</span>, <span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)](</span><span class="kt">query:</span> <span class="kt">datomisca.TypedQueryAuto1</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span>, <span class="kt">a:</span> <span class="kt">A</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span>, <span class="kt">implicit</span> <span class="kt">ddwa:</span> <span class="kt">datomisca.DD2Writer</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>, <span class="kt">implicit</span> <span class="kt">outConv:</span> <span class="kt">datomisca.DatomicDataToArgs</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)])</span><span class="kt">List</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span> <span class="kt">&lt;and&gt;</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)](</span><span class="kt">query:</span> <span class="kt">datomisca.TypedQueryAuto0</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span>, <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">outConv:</span> <span class="kt">datomisca.DatomicDataToArgs</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)])</span><span class="kt">List</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span> <span class="kt">&lt;and&gt;</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">OutArgs</span> <span class="k">&lt;:</span> <span class="kt">datomisca.Args</span>, <span class="kt">T</span><span class="o">](</span><span class="kt">q:</span> <span class="kt">datomisca.TypedQueryInOut</span><span class="o">[</span><span class="kt">datomisca.Args1</span>,<span class="kt">OutArgs</span><span class="o">]</span>, <span class="kt">d1:</span> <span class="kt">datomisca.DatomicData</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span>, <span class="kt">implicit</span> <span class="kt">outConv:</span> <span class="kt">datomisca.DatomicDataToArgs</span><span class="o">[</span><span class="kt">OutArgs</span><span class="o">]</span>, <span class="kt">implicit</span> <span class="kt">ott:</span> <span class="kt">datomisca.ArgsToTuple</span><span class="o">[</span><span class="kt">OutArgs</span>,<span class="kt">T</span><span class="o">])</span><span class="kt">List</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="kt">&lt;and&gt;</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">InArgs</span> <span class="k">&lt;:</span> <span class="kt">datomisca.Args</span><span class="o">](</span><span class="kt">query:</span> <span class="kt">datomisca.PureQuery</span>, <span class="kt">in:</span> <span class="kt">InArgs</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span><span class="o">)</span><span class="kt">List</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span><span class="o">]]</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>  <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">applied</span> <span class="kt">to</span> <span class="o">(</span><span class="kt">datomisca.TypedQueryAuto2</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span>,<span class="o">(</span><span class="kt">datomisca.DatomicData</span>, <span class="kt">datomisca.DatomicData</span><span class="o">)]</span>, <span class="kt">datomisca.DString</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>         <span class="kt">val</span> <span class="kt">results</span> <span class="kt">=</span> <span class="kt">Datomic.q</span><span class="o">(</span><span class="kt">queryFindByName</span>, <span class="kt">DString</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">John</span><span class="err">&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>                               <span class="kt">^</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span> <span class="kt">one</span> <span class="kt">error</span> <span class="kt">found</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span> <span class="o">(</span><span class="kt">compile:compile</span><span class="o">)</span> <span class="kt">Compilation</span> <span class="kt">failed</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compile error seems a bit long as the compiler tries a few different version of <code>Datomic.q</code> but just remind that when you see <code>cannot be applied to (datomisca.TypedQueryAuto2[…</code>, it means you provided the wrong number of input parameters.</p>

<br/>


<h3>Use query results</h3>

<p>Query results are <code>List[DatomicData…]</code> depending on the output parameters inferred by the Scala macros.</p>

<p>In our case, we have 2 output parameters so we expect a <code>List[(DatomicData, DatomicData)]</code>.
Using <code>List.map</code> (or <code>headOption</code> to get the first one only), you can then use pattern matching to specialize your <code>(DatomicData, DatomicData)</code> to <code>(DLong, DInstant)</code> as you expect.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">results</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">e</span><span class="k">:</span> <span class="kt">DLong</span><span class="o">,</span> <span class="n">birth</span><span class="k">:</span> <span class="kt">DInstant</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="c1">// converts into Scala types</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">eAsLong</span> <span class="k">=</span> <span class="n">e</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">birthAsDate</span> <span class="k">=</span> <span class="n">birth</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">java.util.Date</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note 1: that when you want to convert your <code>DatomicData</code>, you can use our converters based on implicit typeclasses as following</em></p>

<p><em>Note 2: The Scala macro has not way just based on query to infer the real types of output parameters but ther is a TODO in the roadmap: using typed schema attributes presented in a future article, we will be able to do better certainly… Be patient ;)</em></p>

<br/>


<h1><a name="complex">More complex queries</a></h1>

<p>As Datomisca parses the queries, you may wonder what is the level of completeness of the query parser for now?</p>

<p>Here are a few examples showing what can be executed already:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using variable number of inputs</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s"> :find ?e</span>
</span><span class='line'><span class="s"> :in $ [?names ...] </span>
</span><span class='line'><span class="s"> :where [?e :person/name ?names]</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">q</span><span class="o">(</span><span class="n">q</span><span class="o">,</span> <span class="n">database</span><span class="o">,</span> <span class="nc">DSet</span><span class="o">(</span><span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">),</span> <span class="nc">DString</span><span class="o">(</span><span class="s">&quot;tata&quot;</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using tuple inputs</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">  :find ?e ?name ?age</span>
</span><span class='line'><span class="s">  :in $ [[?name ?age]]</span>
</span><span class='line'><span class="s">  :where [?e :person/name ?name]</span>
</span><span class='line'><span class="s">         [?e :person/age ?age]</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">q</span><span class="o">(</span><span class="n">q</span><span class="o">,</span>
</span><span class='line'>  <span class="n">database</span><span class="o">,</span>
</span><span class='line'>  <span class="nc">DSet</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">DSet</span><span class="o">(</span><span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">),</span> <span class="nc">DLong</span><span class="o">(</span><span class="mi">30L</span><span class="o">)),</span>
</span><span class='line'>    <span class="nc">DSet</span><span class="o">(</span><span class="nc">DString</span><span class="o">(</span><span class="s">&quot;tutu&quot;</span><span class="o">),</span> <span class="nc">DLong</span><span class="o">(</span><span class="mi">54L</span><span class="o">))</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using function such as fulltext search</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">  :find ?e ?n</span>
</span><span class='line'><span class="s">  :where [(fulltext $ :person/name &quot;toto&quot;) [[ ?e ?n ]]]</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using rules</span>
</span><span class='line'><span class="k">val</span> <span class="n">totoRule</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">.</span><span class="n">rules</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">[ [ [toto ?e]</span>
</span><span class='line'><span class="s">    [?e :person/name &quot;toto&quot;]</span>
</span><span class='line'><span class="s">] ]</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s"> :find ?e ?age</span>
</span><span class='line'><span class="s"> :in $ %</span>
</span><span class='line'><span class="s"> :where [?e :person/age ?age]</span>
</span><span class='line'><span class="s">        (toto ?e)</span>
</span><span class='line'><span class="s">]</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using query specifying just the field in fact to be searched</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[:find ?e :where [?e :person/name]]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note that currently Datomisca reserializes queries to string when executing because Java API requires it but once Datomic Java API accepts that we pass List[List[Object]] instead of strings for query, the interaction will be more direct…</em></p>

<div class="well">Next articles about Datomic operations to insert/retract facts or entities in Datomic using Datomisca.</div>


<p>Have datomiscafun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing the Fool with Scala Macros - Implementing PataMorphism]]></title>
    <link href="http://www.mandubian.com/2013/01/30/maquereau-patamorphism/"/>
    <updated>2013-01-30T13:13:00+01:00</updated>
    <id>http://www.mandubian.com/2013/01/30/maquereau-patamorphism</id>
    <content type="html"><![CDATA[<div class="well">
You can find the code on my Github code <a href="http://github.com/mandubian/maquereau">Maquereau</a> 
</div>


<h1><a name="maquereau">Maquereau <em>[Scomber Scombrus]</em></a></h1>

<div style="float: right"><img src="http://www.mandubian.com/images/mandubian/maquereau_white.jpg" /></div>


<blockquote><p><em>[/makʀo/] in french phonetics</em></p></blockquote>

<p>Since I discovered Scala Macros with Scala 2.10, I&#8217;ve been really impressed by their power. But great power means great responsibility as you know. Nevertheless, I don&#8217;t care about responsability as I&#8217;m just experimenting. As if mad scientists couldn&#8217;t experiment freely!</p>

<p>Besides being a very tasty pelagic fish from scombroid family, <a href="http://github.com/mandubian/maquereau">Maquereau</a> is my new sandbox project to experiment eccentric ideas with Scala Macros.</p>

<p>Here is my first experiment which aims at studying the concepts of pataphysics applied to Scala Macros.</p>

<br/>


<br/>


<h1><a name="pataphysics">Pataphysics applied to Macros</a></h1>

<h3>Programming is math</h3>

<blockquote><p>I&#8217;ve heard people saying that programming is not math.<br/>
This is really wrong, programming is math.</p></blockquote>

<p>And let&#8217;s be serious, how would you seek attention in urbane cocktails without
 those cute little words such as functors, monoids, contravariance, monads?</p>

<blockquote><p>She/He> What do you do?<br/>
You> I&#8217;m coding a list fold.<br/>
She/He> Ah ok, bye.<br/>
You> Hey wait…</p></blockquote>

<br/>


<blockquote><p>She/He> What do you do?<br/>
You> I&#8217;m deconstructing my list with a catamorphism based on a F-algebra as underlying functor.<br/>
She/He> Whahhh this is so exciting! Actually you&#8217;re really sexy!!!<br/>
You> Yes I known insignificant creature!</p></blockquote>

<br/>


<h3>Programming is also a bit of Physics</h3>

<p>Code is static meanwhile your program is launched in a runtime environment which is dynamic and you must take these dynamic aspects into account in your code too (memory, synchronization, blocking calls, resource consumption…). For the purpose of the demo, let&#8217;s accept programming also implies some concepts of physics when dealing with dynamic aspects of a program.</p>

<br/>


<h3>Compiling is Programming Metaphysics</h3>

<p>Between code and runtime, there is a weird realm, the compiler runtime which is in charge of converting static code to dynamic program:</p>

<ul>
<li>The compiler knows things you can&#8217;t imagine.</li>
<li>The compiler is aware of the fundamental nature of math &amp; physics of programming.</li>
<li>The compiler is beyond these rules of math &amp; physics, it&#8217;s metaphysics.</li>
</ul>


<br/>


<h3>Macro is Pataphysics</h3>

<div style="float: right"><img src="http://www.mandubian.com/images/mandubian/ubu.png"/></div>


<p>Now we have Scala Macros which are able:</p>

<ul>
<li>to intercept the compiling process for a given piece of code</li>
<li>to analyze the compiler AST code and do some computation on it</li>
<li>to generate another AST and inject it back into the compile-chain</li>
</ul>


<p>When you write a Macro in your own code, you write code which runs in the compiler runtime. Moreover a macro can go even further by asking for compilation from within the compiler: <code>c.universe.reify{ some code }</code>… Isn&#8217;t it great to imagine those recursive compilers?</p>

<p>So Scala macro knows the fundamental rules of the compiler. Given compiler is metaphysics, Scala macro lies beyond metaphysics and the science studying this topic is called pataphysics.</p>

<p>This science provides very interesting concepts and this article is about applying them to the domain of Scala Macros.</p>

<p>I&#8217;ll let you discover pataphysics by yourself on <a href="http://en.wikipedia.org/wiki/'Pataphysics">wikipedia</a></p>

<br/>


<blockquote><p>Let&#8217;s explore the realm of pataphysics applied to Scala macro development by implementing the great concept of patamorphism, well-known among pataphysicians.</p></blockquote>

<br/>


<br/>


<h1><a name="defining-patamorphism">Defining Patamorphism</a></h1>

<p>In 1976, the great pataphysician, Ernst Von Schmurtz defined patamorphism as following:</p>

<blockquote><p>A patamorphism is a patatoid in the category of endopatafunctors…</p></blockquote>

<p>Explaining the theory would be too long with lots of weird formulas. Let&#8217;s just  skip that and go directly to the conclusions.</p>

<h4>First of all, we can consider the realm of pataphysics is the context of Scala Macros.</h4>

<br/>


<p>Now, let&#8217;s take point by point and see if Scala Macro can implement a patamorphism.</p>

<h4>A patamorphism should be callable from outside the realm of pataphysics</h4>

<p>A Scala macro is called from your code which is out of the realm of Scala macro.</p>

<h4>A patamorphism can&#8217;t have effect outside the realm of pataphysics after execution</h4>

<p>This means we must implement a Scala Macro that :</p>

<ul>
<li>has effect only at compile-time</li>
<li>has NO effect at run-time</li>
</ul>


<p>From outside the compiler, a patamorphism is an identity morphism that could be translated in Scala as:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">pataMorph</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span>
</span></code></pre></td></tr></table></div></figure>


<h4>A patamorphism can change the nature of things while being computed</h4>

<p>Even if it has no effect once applied, meanwhile it is computed, it can :</p>

<ul>
<li>have side-effects on anything</li>
<li>be blocking</li>
<li>be mutable</li>
</ul>


<p>Concerning these points, nothing prevents a Scala Macro from respecting those points.</p>

<h4>A patamorphism is a patatoid</h4>

<p>You may know it but patatoid principles require that the morphism should be customisable by a custom abstract seed. In Scala samples, patatoid are generally described as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Patatoid</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Seed is specific to a Patatoid and is used to configure the sprout mechanism  </span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span>
</span><span class='line'>  <span class="c1">// sprout is the classic name</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sprout</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">Seed</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So a patamorphism could be implemented as :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">PataMorphism</span> <span class="k">extends</span> <span class="nc">Patatoid</span>
</span></code></pre></td></tr></table></div></figure>


<p>A custom patamorphism implemented as a Scala Macro would be written as :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">MyPataMorphism</span> <span class="k">extends</span> <span class="nc">PataMorphism</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span> <span class="o">=</span> <span class="nc">MyCustomSeed</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sprout</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">Seed</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=</span> <span class="n">macro</span> <span class="n">sproutImpl</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// here is the corresponding macro implementation</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sproutImpl</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in current Scala Macro API, this is not possible for a Scala Macro to override an abstract function so we can&#8217;t write it like that and we need to trick a bit. Here is how we can do simply :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Patatoid</span><span class="o">{</span>
</span><span class='line'>  <span class="c1">// Seed is specific to a Patatoid and is used to configure the sprout mechanism  </span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span>
</span><span class='line'>  <span class="c1">// we put the signature of the macro implementation in the abstract trait</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  * PataMorphism </span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">PataMorphism</span> <span class="k">extends</span> <span class="nc">Patatoid</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Custom patamorphism</span>
</span><span class='line'><span class="k">object</span> <span class="nc">MyPataMorphism</span> <span class="k">extends</span> <span class="nc">PataMorphism</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span> <span class="o">=</span> <span class="nc">MyCustomSeed</span>
</span><span class='line'>  <span class="c1">// the real sprout function expected for patatoid</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sprout</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">seed</span><span class="k">:</span> <span class="kt">Seed</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=</span> <span class="n">macro</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the real implementation of the macro and of the patatoid abstract operation</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>    <span class="c1">// Your implementation here</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<div class="well">
<h3>Conclusion</h3>
<p>We have shown that we could implement a patamorphism using a Scala Macro.</p>
<p>But the most important is the implementation of the macro which shall:
<ul>
<li>have effect only at compile-time (with potential side-effect, sync, blocking)</li>
<li>have NO effect at runtime</li>
</ul>
<p>Please note that pataphysics is the science of exceptions so all previous rules are true as long as there are no exception to them.</p>
</div>


<p><strong>Let&#8217;s implement a 1st sample of patamorphism called <code>VerySeriousCompiler</code>.</strong></p>

<br/>


<br/>


<h1><a name="veryseriouscompiler">Sample #1: VerySeriousCompiler</a></h1>

<h2>What is it?</h2>

<p><code>VerySeriousCompiler</code> is a pure patamorphism which allows to change compiler behavior by :</p>

<ul>
<li>Choosing how long you want the compilation to last</li>
<li>Displaying great messages at a given speed while compiling</li>
<li>Returning the exact same code tree given in input</li>
</ul>


<p><strong><code>VerySeriousCompiler</code> is an identity morphism returning your exact code without leaving any trace in AST after macro execution.</strong></p>

<p><code>VerySeriousCompiler</code> is implemented exactly using previous patamorphic pattern and the compiling phase can be configured using custom Seed:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Seed builder </span>
</span><span class='line'><span class="cm">  * @param duration the duration of compiling in ms</span>
</span><span class='line'><span class="cm">  * @param speed the speed between each message display in ms</span>
</span><span class='line'><span class="cm">  * @param messages the messages to display</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">seed</span><span class="o">(</span><span class="n">duration</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">speed</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">messages</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>When to use it?</h2>

<p>VerySeriousCompiler is a useful tool when you want to have a coffee or discuss quietly at work with colleagues and fool your boss making him/her believe you&#8217;re waiting for the end of a very long compiling process.</p>

<p>To use it, you just have to modify your code using :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">VerySeriousCompiler</span><span class="o">.</span><span class="n">sprout</span><span class="o">{</span>
</span><span class='line'>  <span class="err">…</span><span class="n">some</span> <span class="n">code</span><span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//or even </span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">xxx</span> <span class="k">=</span> <span class="nc">VerySeriousCompiler</span><span class="o">.</span><span class="n">sprout</span><span class="o">{</span>
</span><span class='line'>  <span class="err">…</span><span class="n">some</span> <span class="n">code</span> <span class="n">returning</span> <span class="n">something</span><span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you launch compilation for the duration you want, displaying meaningful messages in case your boss looks at your screen. Then, you have an excuse if your boss is not happy about your long pause, tell him/her: &#8220;Look, it&#8217;s compiling&#8221;.</p>

<p>Remember that this PataMorphism doesn&#8217;t pollute your code at runtime at all, it has only effects at compile-time and doesn&#8217;t inject any other code in the AST.</p>

<br/>


<br/>


<h2>Usage</h2>

<h3>With default seed (5s compiling with msgs each 400ms)</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">VerySeriousCompiler._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create a class for ex</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Toto</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// using default seed</span>
</span><span class='line'><span class="n">sprout</span><span class="o">(</span><span class="nc">Toto</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">))</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span><span class="nc">Toto</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compile:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/classes...
</span><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/test-classes...
</span><span class='line'>Finding ring kernel that rules them all...................
</span><span class='line'>computing fast fourier transform code optimization....................
</span><span class='line'>asking why Obiwan Kenobi...................
</span><span class='line'>resolving implicit typeclass from scope....................
</span><span class='line'>constructing costate comonad....................
</span><span class='line'>Do you like gladiator movies?....................
</span><span class='line'>generating language systemic metafunction....................
</span><span class='line'>verifying isomorphic behavior....................
</span><span class='line'>inflating into applicative functor...................
</span><span class='line'>verifying isomorphic behavior...................
</span><span class='line'>invoking Nyarlathotep to prevent crawling chaos....................
</span><span class='line'>Hear me carefully, your eyelids are very heavy, you're a koalaaaaa....................
</span><span class='line'>resolving implicit typeclass from scope...................
</span><span class='line'>[info] PataMorphismSpec
</span><span class='line'>[info] 
</span><span class='line'>[info] VerySeriousCompiler should
</span><span class='line'>[info] + sprout with default seed
</span><span class='line'>[info] Total for specification PataMorphismSpec
</span><span class='line'>[info] Finished in xx ms
</span><span class='line'>[info] 1 example, 0 failure, 0 error
</span><span class='line'>[info] 
</span><span class='line'>[info] Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0
</span><span class='line'>[success] Total time: xx s, completed 3 f?vr. 2013 01:25:42</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>With custom seed (1s compiling with msgs each 200ms)</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// using custom seed</span>
</span><span class='line'><span class="n">sprout</span><span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="s">&quot;this is&quot;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="s">&quot;some code&quot;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="mi">123L</span>
</span><span class='line'>  <span class="n">s</span><span class="s">&quot;msg $a $b $c&quot;</span>
</span><span class='line'><span class="o">}(</span>
</span><span class='line'>  <span class="nc">VerySeriousCompiler</span><span class="o">.</span><span class="n">seed</span><span class="o">(</span>
</span><span class='line'>    <span class="mi">1000L</span><span class="o">,</span>     <span class="c1">// duration of compiling in ms</span>
</span><span class='line'>    <span class="mi">200L</span><span class="o">,</span>       <span class="c1">// speed between each message display in ms</span>
</span><span class='line'>    <span class="nc">Seq</span><span class="o">(</span>        <span class="c1">// the message to display randomly </span>
</span><span class='line'>      <span class="s">&quot;very interesting message&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;cool message&quot;</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span> <span class="s">&quot;msg this is some code 123&quot;</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compile:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/classes...
</span><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/test-classes...
</span><span class='line'>toto..........
</span><span class='line'>coucou..........
</span><span class='line'>toto..........
</span><span class='line'>coucou..........
</span><span class='line'>[info] PataMorphismSpec
</span><span class='line'>[info] 
</span><span class='line'>[info] VerySeriousCompiler should
</span><span class='line'>[info] + sprout with custom seed
</span><span class='line'>[info] Total for specification PataMorphismSpec
</span><span class='line'>[info] Finished in xx ms
</span><span class='line'>[info] 1 example, 0 failure, 0 error
</span><span class='line'>[info] 
</span><span class='line'>[info] Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0
</span><span class='line'>[success] Total time: xx s, completed 3 f?vr. 2013 01:25:42</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h2>Macro implementation details</h2>

<p>The code can be found on Github <a href="http://github.com/mandubian/maquereau">Maquereau</a>.</p>

<p>Here are the interesting points of the macro implementation.</p>

<h4>Modular macro building</h4>

<p>We use the method described on <a href="http://docs.scala-lang.org/overviews/macros/overview.html#writing_bigger_macros">scalamacros.org/writing bigger macros</a></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">VerySeriousCompilerHelper</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">c</span><span class="k">:</span> <span class="kt">Context</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">helper</span> <span class="k">=</span> <span class="k">new</span> <span class="o">{</span> <span class="k">val</span> <span class="n">c</span><span class="k">:</span> <span class="kt">c1.</span><span class="k">type</span> <span class="o">=</span> <span class="n">c1</span> <span class="o">}</span> <span class="k">with</span> <span class="nc">VerySeriousCompilerHelper</span>
</span><span class='line'>  <span class="n">helper</span><span class="o">.</span><span class="n">sprout</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">seed</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h4>input code evaluation in macro</h4>

<p>The Seed passed to the macro doesn&#8217;t belong to the realm of Scala Macro but to your code. In the macro, we don&#8217;t get the Seed type but the expression Expr[Seed]. So in order to use the seed value in the macro, we must evaluate the expression passed to the macro:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">speed</span> <span class="k">=</span> <span class="n">c</span><span class="o">.</span><span class="n">eval</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="nc">Expr</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="n">c</span><span class="o">.</span><span class="n">resetAllAttrs</span><span class="o">(</span><span class="n">speedTree</span><span class="o">.</span><span class="n">duplicate</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note that this code is a work-around because in Scala 2.10, you can&#8217;t evaluate any code as you want due to some compiler limitations when evaluating
an already typechecked tree in a macro. This is explained in this <a href="https://issues.scala-lang.org/browse/SI-5464">Scala issue</a></em></p>

<br/>


<h4>input code re-compiling before returning from macro</h4>

<p>We don&#8217;t return directly the input tree in the macro even if it would be valid with respect to patamorphism contract.
But to test Macro a bit further, I decided to &#8221;<em>re-compile</em>&#8221; the input code from within the macro. You can do that using following code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">reify</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="n">splice</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using macro paradise</h4>

<p>The <code>maquereau</code> project is based on <a href="http://docs.scala-lang.org/overviews/macros/paradise.html">Macro Paradise</a> which is the experimental branch of Scala Macros.
This implementation of patamorphism doesn&#8217;t use any experimental feature from Macro Paradise but future samples will certainly.</p>

<br/>


<br/>


<h1><a name="conclusion">Conclusion</a></h1>

<p>This article shows that applying the concepts of pataphysics to Scala Macro is possible and can help creating really useful tools.</p>

<p>The sample is still a bit basic but it shows that a patamorphism can be implemented relatively simply.</p>

<p>I&#8217;ll create other samples and hope you&#8217;ll like them!</p>

<p>Have patafun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Data-Centric approach to JSON Coast-to-Coast design with Play-2.1 & ReactiveMongo]]></title>
    <link href="http://www.mandubian.com/2013/01/13/JSON-Coast-to-Coast/"/>
    <updated>2013-01-13T12:12:00+01:00</updated>
    <id>http://www.mandubian.com/2013/01/13/JSON-Coast-to-Coast</id>
    <content type="html"><![CDATA[<p>Today, let&#8217;s talk a bit more about the <strong>JSON <em>coast-to-coast</em> design</strong> I had introduced as a buzz word in a previous article about <a href="http://mandubian.com/2012/09/08/unveiling-play-2-dot-1-json-api-part1-jspath-reads-combinators/">Play2.1 Json combinators</a>.</p>

<p><em>Sorry this is a very long article with tens of >140-chars strings: I wanted to put a few ideas on paper to present my approach before writing any line of code…</em></p>

<div class="well">
<h3>Direct access</h3>
<ul>
<li><a href="#philosophy">Philosophical Considerations</a></li>
<li><a href="#sample">Json Coast-to-Coast</a></li>
<li><a href="#code">Json Coast-to-Coast sample on Github</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</div>


<blockquote><h3>Original idea</h3>

<p><strong>1) Manipulate pure data structure (JSON) from client to DB without any <em>static model</em></strong><br/>
<strong>2) Focus on the idea of pure data manipulation and data-flow management</strong><br/>
<br/>
The underlying idea is more global than just questioning the fact that we generally serialize JSON data to static OO models. I really want to discuss how we manipulate data  between frontend/backend(s). I&#8217;d also like to reconsider the whole data flow from a pure functional point of view and not through the lens of technical constraints such as &#8220;OO languages implies static OO models&#8221;.</p></blockquote>

<p>In the <a href="#code">code sample</a>, we&#8217;ll use <a href="http://www.reactivemongo.org">ReactiveMongo</a> and <a href="http://www.playframework.org">Play2.1-RC2</a> and explain why those frameworks fit our demonstation.</p>

<br/>


<br/>


<h1><a name="philosophy">Philosophical Considerations</a></h1>

<h2><a name="data-centric">Data-centric approach</a></h2>

<p>Recent evolutions in backend architecture tend to push (again) UI to the frontend (the client side). As a consequence, <strong>backends concentrate more and more on data serving</strong>, manipulation, transformation, aggregation, distribution and naturally some business logic. I must admit that I&#8217;ve always considered <strong>backend are very good data provider and not so good UI provider</strong>. So I won&#8217;t say it&#8217;s a bad thing.</p>

<p>From this point of view, the backend focuses on:</p>

<ul>
<li>getting/serving data from/to clients</li>
<li>retrieving/distributing data from/to other backends</li>
<li>storing data in DB/cache/files/whatever locally/remotely</li>
<li>doing some business logic (outside data manipulation)… sometimes but not so often.</li>
</ul>


<p>I consider data management is the reason of being of backend and also the finality of it.</p>

<blockquote><p>The word <em>&#8220;data&#8221;</em> is everywhere and that&#8217;s why I use the term <strong>&#8220;data-centric approach&#8221;</strong> (even if I would prefer that we speak about <em>&#8220;information&#8221;</em> more than data but this is another discussion…)</p></blockquote>

<br/>


<br/>


<h2><a name="chain-link">Backend system is a chain-link in global data-flow</a></h2>

<p><strong>Data-centric doesn&#8217;t mean <em>centralized data</em></strong></p>

<ul>
<li>With Internet and global mobility, data tend to be gathered, re-distributed, scattered and re-shared logically and geographically</li>
<li>When you develop your server, you can receive data from many different sources and you can exchange data with many actors.</li>
</ul>


<p>In this context, <strong>backend is often just a chain link participating to a whole data flow</strong>. So you must consider the relations existing with other actors of this system.</p>

<p><img src="http://www.mandubian.com/images/mandubian/backend_flow.png" alt="Data flow" /></p>

<p>Besides the simple <em>&#8220;what does my backend receive, transmit or answer?&#8221;</em>, it has become <strong>more important to consider the relative role of the backend in the whole data flow</strong> and not only locally. Basically, knowing your exact role in the data flow really impacts your technical design:</p>

<ul>
<li>if your server must aggregate data from one backend which can respond immediately and another one which will respond tomorrow, do you use a runtime stateful framework without persistence for that?</li>
<li>if your server is just there to validate data before sending it to a DB for storage, do you need to build a full generic &amp; static model for that?</li>
<li>if your server is responsible for streaming data in realtime to hundreds of clients, do you want to use a blocking framework ?</li>
<li>if your server takes part to a high-speed realtime transactional system, is it reasonable to choose ultra heavyweight frameworks ?</li>
<li>&#8230;</li>
</ul>


<br/>


<br/>


<h2><a name="temporal-polymorphic-data-flow">Rise of temporal &amp; polymorphic data flows</a></h2>

<p>In the past, we often used to model our data to be used by a single backend or a restricted system. Data model weren&#8217;t evolving too much for a few years. So you could choose a very strict data model using normalization in RDBMS for ex.</p>

<p>But since a few years, nature of data and their usage has changed a lot:</p>

<ul>
<li>same data are shared with lots of different solutions,</li>
<li>same data are used in very different application domains,</li>
<li>unstructured data storage have increased</li>
<li>formats of data evolve much faster than before</li>
<li>global quantity of data has increased exponentially</li>
<li>…</li>
</ul>


<p>The temporal nature of data has changed drastically also with:</p>

<ul>
<li>realtime data streaming</li>
<li>on fhe fly distributed data updates</li>
<li>very long-time persistence</li>
<li>immutable data keeping all updates without losing anything</li>
<li>…</li>
</ul>


<br/>


<div class="well"><blockquote>
<p>Nothing tremendous until now, isn&#8217;t it?</p>  
<p>This is exactly what you already know or do every day…</p>
<p>I wanted to remind that a backend system is often only an element of a more global system and a chain link in a more global data flow.</p><br/>
<p>Now let&#8217;s try to consider the data flow through a backend system taking all those modern aspects into account!</p><br/>
<p><b>In the rest of this article, I&#8217;ll focus on a specific domain: the very classic case of backend-to-DB interaction</b>.</p><br/>
<p>For last 10 years, in all widespread enterprise platforms based on OO languages, we have all used those well-known ORM frameworks to manage our data from/to RDBMS. We have discovered their advantages and also their drawbacks. Let&#8217;s consider a bit how those ORM have changed our way of manipulating data.</p>
</blockquote></div>




<br/>


<br/>


<h2><a name="orm-prism-distortion">The ORM prism of distortion</a></h2>

<p>After coding with a few different backend platforms, I tend to think we have been kind-of <strong>mesmerized into thinking it&#8217;s non-sense to talk to a DB from an OO language without going through a static language structure</strong> such as a class. ORM frameworks are the best witnesses of this tendency.</p>

<p>ORM frameworks lead us to:</p>

<ul>
<li>Get some data (from client for ex) in a pure data format such as JSON <em>(this format will be used in all samples because it&#8217;s very representative)</em></li>
<li>Convert JSON to OO structure such as class instance</li>
<li>Transmit class instance to ORM framework that translates/transmits it to the DB mystery limbo.</li>
</ul>


<p><img src="http://www.mandubian.com/images/mandubian/all-model.png" alt="All-Model Approach" /></p>

<h3>Pros</h3>

<h4>Classes are OO natural structure</h4>

<p>Classes are the native structures in OO languages so it seems quite natural to use them</p>

<h4>Classes imply structural validations</h4>

<p>Conversion into classes also implies type constraint validations (and more specific constraints with annotations or config) in order to verify data do not corrupt the DB</p>

<h4>Boundaries isolation</h4>

<p>By performing the conversion in OO, the client format is completely decorrelated from DB format making them separated layers. Moreover, by manipulating OO structure in code, the DB can be abstracted almost completely and one can imagine changing DB later. This seems a good manner in theory.</p>

<h4>Business logic compliant</h4>

<p>Once converted, class instances can be manipulated in business logic without taking care about the DB.</p>

<br/>


<h3>Cons</h3>

<h4>Requirement for Business Logic is not the most frequent case</h4>

<p>In many cases (CRUD being the 1st of all), once you get class instance, business logic is simply non-existing. You just pass the class to the ORM, that&#8217;s all. So you simply serialize to a class instance to be able to speak to ORM which is a pity.</p>

<h4>ORM forces to speak OO because they can&#8217;t speak anything else</h4>

<p>In many cases, the only needed thing is data validation with precise (and potentially complex) constraints. A class is just a type validator but it doesn&#8217;t validate anything else. If the String should be an email, your class sees it as a String. So, frameworks have provided constraint validators based on annotations or external configurations.</p>

<h4>Classes are not made to manipulate/validate dynamic forms of data</h4>

<p>Classes are static structure which can&#8217;t evolve so easily because the whole code depends on those classes and modifying a model class can imply lots of code refactoring. If data format is not clear and can evolve, classes are not very good. If data are polymorphic and can be seen using different views, it generally ends into multiplying the number of classes making your code hard to maintain.</p>

<h4>Hiding DB more than abstracting it</h4>

<p>ORM approach is just a pure OO view of relational data. It states that outside OO, nothing exists and no data can be modelled with something else than an OO structure.<br/>
So ORMs haven&#8217;t tried bringing DB structures to OO language but <em>kind-of</em> pushing OO to the DB and abstracting the DB data structure almost completely. So you don&#8217;t manipulate DB data anymore but you manipulate OO &#8220;mimicing&#8221; more or less DB structures.</p>

<h4>Was OO really a so good choice against relational approach???</h4>

<p>It seemed a good idea to map DB data to OO structures. But we all know the problems brought by ORM to our solutions:</p>

<ul>
<li>How DB structures are mapped to OO?</li>
<li>How relations are managed by ORM?</li>
<li>How updates are managed in time? (the famous cache issues)</li>
<li>How transactions are delimited in a OO world?</li>
<li>How full compatibility between all RDBMS can be ensured?</li>
<li>etc&#8230;</li>
</ul>


<br/>


<blockquote><p>I think ORM just moved the problems:</p>

<p>Before ORM, you had problems of SQL<br/>
After ORM, you had problems of ORM</p></blockquote>

<p>Now the difference is that issues appear on the abstraction layer (ie the ORM) which you don&#8217;t control at all and not anymore at the lower-level DB layer. SQL is a bit painful sometimes but it is the DB native language so when you have an error, it&#8217;s generally far easier to find why and how to work around.</p>

<blockquote><p>My aim here is not to tell ORM are bad (and there aren&#8217;t so bad in a few cases).<br/>
<strong>I just want to point the OO deviation introduced by ORM in our way of modelling our data.</strong><br/>
I&#8217;ll let you discover the subject by yourself and make your own mind and you don&#8217;t have to agree with me. As a very beginning, you can go to wikipedia <a href="http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch#Data_type_differences">there</a>.</p></blockquote>

<br/>


<br/>


<h2><a name="all-model-world">The All-Model world</a></h2>

<p>What interests me more is the fact that ORM brought a very systematic way of manipulating the data flowing through backend systems. ORM dictates that whatever data you manipulate, you must convert it to a OO structure before doing anything else for more or less good reasons. OO are very useful when you absolutely want to manipulate static typed structures. But in other cases, isn&#8217;t it better to use a List or a Map or more versatile pure data structure such as Json tree?</p>

<blockquote><p>Let&#8217;s call it the <strong>All-Model Approach : no data can be manipulated without a static model and underlying abstraction/serialization mechanism</strong>.</p></blockquote>

<p>The first move into the <strong>All-Model</strong> direction was quite logical in reaction to the difficulty of SQL integration with OO languages. Hibernate idea, for ex, was to abstract completely the relational DB models with OO structures so that people don&#8217;t care anymore with SQL.</p>

<p>As we all know, in software industry, when an idea becomes a standard of fact, as became ORMs, balance is rarely reached between 2 positions. As a consequence, lots of people decided to completely trash SQL in favor of ORM. That&#8217;s why we have seen this litany of ORM frameworks around hibernate, JPA, Toplink and almost nobody could escape from this global move.</p>

<br/>


<br/>


<h2><a name="changing-world">Living in a changing world</a></h2>

<p>After a few years of suffering more or less with ORM, some people have begun to re-consider this position seeing the difficulty they had to use ORM. <strong>The real change of mind was linked to the evolution of the whole data ecosystem</strong> linked to internet, distribution of data and mobility of clients also.</p>

<h4><a name="nosql-emergence">NoSQL emergence</a></h4>

<p>First, the move concerned the underlying layer: the DB.<br/>
RDBMS are really good to model very consistent data and provide robust transactions but not so good for managing high scalability, data distribution, massive updates, data streaming and very huge amount of data. That&#8217;s why we have seen these NoSQL <em>new kids on the block</em> initiated by Internet companies mainly.</p>

<p>Once again, the balance was upsetted: after the <em>&#8220;SQL is evil&#8221;</em> movement, there have been a funny <em>&#8220;RDBMS is evil&#8221;</em> movement. Extremist positions are not worth globally, what&#8217;s interesting is the result of NoSQL initiative. It allowed to re-consider the way we modelled our data: 100% normalized schema with full ACID transactions were no more the only possibility. NoSQL broke the rules: why not model your data as key/values, documents, graphs using redundancy, without full consistency if it fits better your needs?</p>

<blockquote><p>I really think NoSQL breaking the holy RDBMS rule brought the important subject on the front stage: <strong>we care about the data, the way we manipulate them</strong>. We don&#8217;t need a single DB ruling them all but DB that answer to our requirements and not the other way… Data-Centric as I said before…</p></blockquote>

<h4><a name="why-orm-nosql">Why ORM again for NoQSL?</a></h4>

<p>NoSQL DBs bring their own native API in general providing data representation fitting their own DB model. For ex, MongoDB is document oriented and a record is stored as a binary treemap.</p>

<p>But once again, we have seen ORM-kind API appear on top of those low-level API, as if we couldn&#8217;t think anymore in terms of pure data and not in terms of OO structures.</p>

<p>But the holy rule had been broken and next change would necessarily target ORM. So people rediscovered SQL could be used from modern languages (even OO) using simple mapping mechanism, simpler data structure (tuples, list, map, trees) and query facilities. Microsoft LINQ was a really interesting initiative… Modern languages such as Scala also bring interesting API based on the functional power of the language (cf Slick, Squeryl, Anorm etc…).</p>

<p>I know some people will tell replacing Class models by HashMaps makes the code harder to maintain and the lack of contract imposed by static typed classes results in code mess. I could answer I&#8217;ve seen exactly the same in projects having tens of classes to model all data views and it was also a mess impossible to maintain.</p>

<blockquote><p><strong>The question is not to forget static models but to use them only when required</strong> and keep simple and dynamic structures as much as possible.<br/>
ORM are still used widely but we can at least openly question their usefulness. Dictatorship is over and diversity is always better!</p></blockquote>

<h4><a name="layer-genericity-talisman">Layered genericity as a talisman</a></h4>

<p>I want to question another fact in the way we model data:</p>

<ul>
<li>we write generic OO model to have very strong static model and be independent of the DB.</li>
<li>we interact with those models using DAO providing all sorts of access functions.</li>
<li>we encapsulate all of that in abstract DB service layers to completely isolate from the DB.</li>
</ul>


<p>Why?<br/>
<em>&#8220;Maybe I&#8217;ll change the DB and I&#8217;ll be able to do it…&#8221; <br/>
&#8220;Maybe I&#8217;ll need to re-use those DAO somewhere else…&#8221;<br/>
&#8220;Maybe Maybe Maybe…&#8221;</em></p>

<p>It works almost like superstition, as if making everything generic with strict isolated layers was the only way to protect us against failure and that it will make it work and be reused forever…</p>

<p><em>Do you change DB very often without re-considering the whole model to fit DB specific features?<br/>
Do you reuse code so often without re-considering the whole design?</em></p>

<blockquote><p>I don&#8217;t say layered design and boundaries isolation is bad once again. I just say it has a cost and consequences that we don&#8217;t really consider anymore.</p></blockquote>

<p><strong>By trying to hide the DB completely, we don&#8217;t use the real power that DB can provide</strong> to us and we forget their specific capacities. There are so many DB types (sql, nosql, key/value, transactional, graph, column etc…) on the market and choosing the right one according to your data requirements is really important…</p>

<blockquote><p><strong>DB diversity gives us more control on our data so why hiding them behind too generic layers?</strong></p></blockquote>

<br/>


<br/>


<h2><a name="no-model-approach">The Data-Centric or No-Model approach</a></h2>

<blockquote><p>Let&#8217;s go back to our data-centric approach and try to manipulate data flow going through our backend system to the DB without OO (de)serialization in the majority of cases.</p></blockquote>

<p>What I really need when I manipulate the data flow is:</p>

<ul>
<li>being able to manipulate data directly</li>
<li>validating the data structure and format according to different constraints</li>
<li>transforming/aggregating data coming from different sources</li>
</ul>


<blockquote><p>I call it the <strong>Data-centric or No-Model approach</strong>. It doesn&#8217;t mean my data aren&#8217;t structured but that I manipulate the data as directly as possible without going through an OO model when I don&#8217;t need it.</p></blockquote>

<p><img src="http://www.mandubian.com/images/mandubian/no-model.png" alt="No-Model Approach" /></p>

<br/>


<br/>


<h2><a name="trash-all-model">Should I trash the all-model approach?</a></h2>

<blockquote><p>Answer : NO… You must find the right balance.</p></blockquote>

<p>As explained before, using the same design for everything seems a good idea because homogeneity and standardization is a good principle in general.</p>

<p><strong>But &#8220;in general&#8221; is not &#8220;always&#8221; and we often confound homogeneity with uniformity in its bad meaning i.e. diversity loss.</strong></p>

<p>That&#8217;s why I prefer speaking about &#8220;Data-Centric approach&#8221; than &#8220;No-Model&#8221;: the important is to ponder your requirements with respect to your data flow and to choose the right tool:</p>

<ul>
<li>If you need to perform business logic with your data, it&#8217;s often better to work with static OO structures so using a model might be better</li>
<li>If you just need to validate and transform your data, then why going through a model which is completely artificial.</li>
<li>If you just need to manipulate a real-time data flow, then manipulate the flow directly and forget models.</li>
</ul>


<blockquote><p>Now stop philosophizing and go to practice with a very basic sample as a beginning : let&#8217;s manipulate a flow of JSON data in very simple case of CRUD.<br/>
Hey this is the famous &#8220;Json coast-to-coast&#8221; approach ;)</p></blockquote>

<br/>


<br/>


<h1><a name="sample">Json Coast-to-Coast sample</a></h1>

<p>To illustrate this data-centric approach manipulating a pure data flow without OO serialization, let&#8217;s focus on a pure CRUD sample based on JSON. I won&#8217;t speak about the client side to make it shorter but don&#8217;t forget the JSON data flow doesn&#8217;t begin or end at backend boundaries.</p>

<p>I also don&#8217;t focus on real-time flow here because this is worth another discussion. Play2.1 provides us with one of the best platform for real-time web applications. First get accustomed with data-centric design and then consider real-time data management…</p>

<p>The CRUD case is a very good one for our subject:</p>

<ul>
<li><p><strong>CRUD implies no backend business logic at all</strong><br/>
Backend receives data corresponding to entity, validates their format and directly transmit the data to the DB to be stored.</p></li>
<li><p><strong>CRUD targets pure data resources and JSON is good to represent pure data in Web world.</strong></p></li>
<li><p><strong>CRUD is compliant to REST approach</strong><br/>
REST is very interesting because it implies that every resource is reachable through a single URL and a HTTP verb from the Web. This is also another discussion about how we access or link data…</p></li>
</ul>


<br/>


<br/>


<h2><a name="data-flow-input-output">Thinking data flow in terms of Input/Output</a></h2>

<p>The CRUD sample is not really the right example to consider the impact of relative place in data flow on design. In CRUD, there are no temporal or dynamic requirements. But let&#8217;s stay simple for a beginning.</p>

<p>As there is no business logic in the CRUD caser, we can focus on backend boundaries:</p>

<ul>
<li>Backend/Client</li>
<li>Backend/DB</li>
</ul>


<p>We can just consider the data received at previous boundaries:</p>

<ul>
<li>What Input data is received from client or DB?</li>
<li>What Output data should be sent to DB or client?</li>
</ul>


<p>In a summary, we can really consider the data-flow just in terms of inputs/outputs:</p>

<ul>
<li>Backend/Client input/output</li>
<li>Backend/DB input/output</li>
</ul>


<p><img src="http://www.mandubian.com/images/mandubian/inputoutput.png" alt="No-Model Approach" /></p>

<br/>


<br/>


<h2><a name="reactivemongo">Why ReactiveMongo enables Json flow manipulation?</a></h2>

<p>MongoDB provides a very versatile document-oriented data storage platform. MongoDB is not meant to model relational data but data structured as trees. So when you retrieve a document from Mongo, you also get all related data at once. In Mongo, normalized model is not really the main target and redundancy is not necessarily bad as long as you know what you do.<br/>
Mongo document are stored using BSON <em>Binary JSON</em> format which is simply inspired by JSON and optimized for binary storage.</p>

<blockquote><p>Imagine you could get JSON (after validation) directly to or from Mongo without going through any superficial structure, wouldn&#8217;t it be really practical?<br/>
Please remark that serializing a JSON tree to a case-class and from a case class to a BSON document is just useless if you don&#8217;t have any business logic to fulfill with the case-class.</p></blockquote>

<p>Play2.1 provides a very good JSON transformation API from/to any data structure. Converting JSON to BSON is not really an issue.
But now remember that we also want to be able to manage realtime data flow, to stream data from or to the DB (using Mongo capped collections for ex). Play2.x has been designed to be fully asynchronous/non-blocking. but unfortunately, default Java Mongo driver and its Scala counterpart (<a href="https://github.com/mongodb/casbah">Casbah</a>), despite their qualities, provide synchronous and blocking API.</p>

<p>But we are lucky since <a href="http://www.twitter.com/sgodbillong">Stephane Godbillon</a> decided to develop <a href="http://www.reactivemongo.org">ReactiveMongo</a> a full async/non-blocking Scala driver based on Akka and Play Iteratees (but independent of Play framework) and we worked together to develop a Play2.1/ReactiveMongo module providing all the tooling we need for JSON/BSON conversions in the context of Play2.1/Scala.</p>

<p><strong>With Play/ReactiveMongo, you can simply send/receive JSON to/from Mongo and it&#8217;s transparently translated into BSON and vis versa.</strong></p>

<br/>


<br/>


<h2><a name="data-format">Sample Data format</A></h2>

<p>Let&#8217;s try to manipulate a flow of data containing the following representation of a Person in JSON (or BSON)…</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_id:</span> <span class="err">PERSON_ID,</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;Some Hashed Password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">created:</span> <span class="mi">123456789</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A person consists in:</p>

<ul>
<li>a unique technical ID</li>
<li>a name</li>
<li>a hashed password which shouldn&#8217;t be transmitted outside anyway</li>
<li>zero or more email addresses</li>
<li>zero or more group memberships</li>
<li>a creation date</li>
</ul>


<p>A group membership consists in:</p>

<ul>
<li>the group email</li>
<li>the group name</li>
<li>the group ID</li>
</ul>


<br/>


<br/>


<h2><a name="data-flow-desc">Data flow description</A></h2>

<p>We will consider the following 4 CRUD actions:</p>

<ul>
<li> Create</li>
<li> Get</li>
<li> Delete</li>
<li> Full/Restricted Update (Full document at once or a part of it)</li>
</ul>


<h3><a name="create">CREATE</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>PUT http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="create-input">Input</a></h4>

<p>Backend receives the whole Person minus <code>_id</code> and <code>created</code> which is not yet known till insertion in DB.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="create-output">output</a></h4>

<p>Backend sends the generated ID in a JSON object for ex.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_id:</span> <span class="nt">&quot;123456789123456789&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="get">GET</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>GET http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="get-input">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="get-output">Output</a></h4>

<p>The whole person plus ID is sent back in JSON but for the demo, let&#8217;s remove a few fields we don&#8217;t want to send back:</p>

<ul>
<li><code>_id</code> which is not needed as the client knows it</li>
<li><code>pw</code> because this is a password even if hashed and we want it to stay in the server</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">…],</span>
</span><span class='line'>  <span class="err">created:</span> <span class="mi">123456789</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="delete">DELETE</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>DELETE http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="delete-inptu">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="delete-output">Output</a></h4>

<p>Nothing very interesting. Use a &#8220;200 OK&#8221; to stay simple</p>

<br/>


<br/>


<h3><a name="update">Full UPDATE</a></h3>

<p>Macro update is meant to update a whole person document.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>POST http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-input">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/ID</span></code></pre></td></tr></table></div></figure>


<p>Updated person document is in the Post body:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;new_password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-output">Output</a></h4>

<p>Nothing very interesting. Use a &#8220;200 OK&#8221; to stay simple</p>

<br/>


<br/>


<h3><a name="update-restricted">Restricted UPDATE</a></h3>

<p>Restricted update is meant to update just a part of a person document.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>POST http://xxx/person/ID/spec</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-restricted-input">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/ID/spec</span></code></pre></td></tr></table></div></figure>


<p>Updated person document is in the Post body:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-restricted-output">Output</a></h4>

<p>Nothing very interesting. Use a &#8220;200 OK&#8221; to stay simple</p>

<br/>


<br/>


<h2><a name="client">Backend/Client boundary</A></h2>

<p>Now that we know input/output data on our boundaries, we can describe how to validate these data and transform them within our backend system.</p>

<h3><a name="client-input">Input data from client (CREATE/ UPDATE)</A></h3>

<h4><a name="client-input-person-full">Full person validation</A></h4>

<p>When receiving JSON from client for <code>Create</code> and <code>Update</code> actions, we must be able to validate the Person structure without ID which will be generated at insertion:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using Play2.1 JSON transformers (see my other article about it), you would validate this structure as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Full Person validator */</span>
</span><span class='line'><span class="k">val</span> <span class="n">validatePerson</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;name</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">addressesOrEmptyArray</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">membershipsOrEmptyArray</span><span class="o">)</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>addressesOrEmptyArray</code></h5>

<p>It&#8217;s a transformer validating an array of email strings and if not found it returns an empty array.<br/>
Here is how you can write this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Addresses validators */</span>
</span><span class='line'><span class="c1">// if array is not empty, it validates each element as an email string</span>
</span><span class='line'><span class="k">val</span> <span class="n">validateAddresses</span> <span class="k">=</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">verifyingIf</span><span class="o">(</span> <span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">JsArray</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">arr</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">)(</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">list</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="nc">Reads</span><span class="o">.</span><span class="n">email</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// extracts &quot;addresses&quot; field or returns an empty array and then validates all addresses</span>
</span><span class='line'><span class="k">val</span> <span class="n">addressesOrEmptyArray</span> <span class="k">=</span> <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">orElse</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">()))</span> <span class="n">andThen</span> <span class="n">validateAddresses</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>membershipsOrEmptyArray</code></h5>

<p>It is a transformer validating an array of memberships and if not found it returns an empty array.<br/>
First, let&#8217;s write a <code>Membership</code> validator searching for <code>address</code> which must be an email, <code>group_name</code> and a <code>group_id</code>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">membership</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;address</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span><span class="o">(</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">of</span><span class="o">[</span><span class="kt">JsString</span><span class="o">]</span> <span class="n">keepAnd</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">email</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;group_name</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;group</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span>  <span class="c1">// reduce merges all branches in a single JsObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, use it to validate the membership list.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// if array is not empty, it validates each element as a membership</span>
</span><span class='line'><span class="k">val</span> <span class="n">validateMemberships</span> <span class="k">=</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">verifyingIf</span><span class="o">(</span> <span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">JsArray</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">arr</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">)(</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">list</span><span class="o">(</span><span class="n">membership</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// extracts &quot;memberchips&quot; field or returns an empty array and then validates all memberships</span>
</span><span class='line'><span class="k">val</span> <span class="n">membershipsOrEmptyArray</span> <span class="k">=</span> <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">orElse</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">()))</span> <span class="n">andThen</span> <span class="n">validateMemberships</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="client-input-person-restricted">Restricted person validation</A></h4>

<p>For restricted update, the client sends just the part that should be updated in the document and not all the document.
Yet the validator must accept only authorized fields.</p>

<p>Here is how you can write it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Person validator for restricted update */</span>
</span><span class='line'><span class="c1">// creates an empty JsObject whatever Json is provided</span>
</span><span class='line'><span class="k">val</span> <span class="n">emptyObj</span> <span class="k">=</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for each field, if not found, it simply writes an empty JsObject</span>
</span><span class='line'><span class="k">val</span> <span class="n">validatePerson4RestrictedUpdate</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;name</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">addresses</span><span class="o">)</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">memberships</span><span class="o">)</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span> <span class="c1">// merges all results</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>addresses</code></h5>

<p>This is the same as <code>addressesOrEmptyArray</code> but it doesn&#8217;t return an empty array if <code>addresses</code> are not found.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">addresses</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">andThen</span> <span class="n">validateAddresses</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>memberships</code></h5>

<p>This is the same as <code>membershipsOrEmptyArray</code> but it doesn&#8217;t return an empty array if <code>memberships</code> are not found.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">memberships</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">andThen</span> <span class="n">validateMemberships</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name="client-output">Output data to Client (GET/DELETE)</A></h3>

<p>When a person document is retrieved from DB, this is the whole document and you may need to transform it before sending it to the output. In our case, let&#8217;s modify it as following:</p>

<ul>
<li>prune the password (even if hashed)</li>
<li>prune the _id (because client already knows it if it requested it)</li>
</ul>


<p>This can be done with the following JSON transformer:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** prunes _id </span>
</span><span class='line'><span class="cm">  * and then prunes pw</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">val</span> <span class="n">outputPerson</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span> <span class="n">andThen</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note we don&#8217;t write it as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">outputPerson</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why? Because <code>reduce</code> merges results of both Reads[JsObject] so:</p>

<ul>
<li><code>(__ \ '_id).json.prune</code> removes <code>_id</code> field but keeps <code>pw</code></li>
<li><code>(__ \ 'pw).json.prune</code> removes <code>pw</code> field but keeps <code>_id</code></li>
</ul>


<p>When <code>reduce</code> merges both results, it would return a Json with both <code>_id</code> and <code>pw</code> which is not exactly what we expect.</p>

<br/>


<br/>


<h2><a name="mongo">Backend/MongoDB boundary</a></h2>

<h3><a name="mong-output">Output to MongoDB</a></h3>

<p>Now we can validate a received JSON as a Person structure.<br/>
But we need to write it to Mongo and Mongo has a few specificities.</p>

<h4><a name="mongo-output-id">ID in Mongo is a <code>BsonObjectID</code></a></h4>

<p>Instead of waiting for Mongo to generate the ID, you can generate it using ReactiveMongo API <code>BSONObjectID.generate</code> before inserting it into Mongo.<br/>
So before sending JSON to Mongo, let&#8217;s add field <code>"_id" : "GENERATED_ID"</code> to validated JSON.<br/>
Here is the JSON transformer generating an ID:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">generateId</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="nc">BSONObjectID</span><span class="o">.</span><span class="n">generate</span><span class="o">.</span><span class="n">stringify</span> <span class="o">)</span> <span class="c1">// this generates a new ID and adds it to your JSON</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h4><a name="mongo-output-id-ext"><code>BsonObjectID</code> using JSON extended notation</a></h4>

<p>In JSON, <code>BsonObjectID</code> is represented as a String but to inform Mongo that it&#8217;s an ID and not a simple String, we use the following extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;123456789123456789&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">//</span> <span class="err">becomes</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;$oid&quot;</span> <span class="p">:</span> <span class="s2">&quot;123456789123456789&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the JSON transformer to generate an ID using extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">generateId</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span> <span class="o">\</span> <span class="-Symbol">&#39;$oid</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="nc">BSONObjectID</span><span class="o">.</span><span class="n">generate</span><span class="o">.</span><span class="n">stringify</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h4><a name="mongo-output-date"><code>Date</code> Extended JSON</A></h4>

<p><code>created</code> field is a <code>Date</code> represented as a <code>JsNumber</code> (a long) in JSON. When passing it to Mongo, we use the following extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;creation&quot;</span> <span class="p">:</span> <span class="mi">123456789123456789</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">//</span> <span class="err">becomes</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;creation&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nt">&quot;$date&quot;</span> <span class="p">:</span> <span class="mi">123456789123456789</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the final JSON transformer to generate a date using extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">generateCreated</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;created</span> <span class="o">\</span> <span class="-Symbol">&#39;$date</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Date</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3><a name="mongo-input">Input from Mongo</A></h3>

<p>As explained, using Play/ReactiveMongo, you don&#8217;t have to care about BSON because it deals with BSON/JSON conversion behind the curtain.<br/>
We could transform data received from Mongo in case we don&#8217;t really trust them.<br/>
But in my case, I trust Mongo as all inserted data are mine so no use to transform those input data from Mongo.</p>

<p>We just need to remove all JSON extended notation for <code>_id</code> or <code>created</code> when sending to the output.<br/>
The <code>_id</code> is pruned so no need to convert it.
So we just have to convert Json extended notation for <code>created</code> field. Here is the transformer:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// update duplicates full JSON and replaces &quot;created&quot; field by removing &quot;$date&quot; level</span>
</span><span class='line'><span class="k">val</span> <span class="n">fromCreated</span> <span class="k">=</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;created</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;created</span> <span class="o">\</span> <span class="-Symbol">&#39;$date</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span> <span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h2><a name="controller">Play2.1 controller as pipe plug</a></h2>

<p>Now, we can:</p>

<ul>
<li>validate input JSON received from client,</li>
<li>transform into Mongo format</li>
<li>transform from Mongo format to output</li>
</ul>


<p>Let&#8217;s plug the pipes all together:</p>

<ul>
<li>client inputs to Mongo outputs</li>
<li>Mongo inputs to client outputs</li>
</ul>


<p>Play controller is the place to do that and we can write one action per REST action.</p>

<blockquote><p>Please note that the whole code is in a single Controller in the sample to make it compact. But a good manner would be to put transformers outside the controller to be able to share them between controllers.</p></blockquote>

<p>In the following samples, please notice the way we compose all Json transformers described previously as if we were piping them.</p>

<h3><a name="action-insert">Insert Person</a></h3>

<p>When a Person document is created, there are 2 steps:</p>

<ul>
<li>validate the JSON using <code>validatePerson</code></li>
<li>transform JSON to fit Mongo format by:

<ul>
<li>adding a generated <code>BSONObjectID</code> field using <code>generateId</code></li>
<li>adding a generated <code>created</code> date field using <code>generateCreated</code></li>
</ul>
</li>
</ul>


<p>Here is the JSON transformer to transform into Mongo format:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Updates Json by adding both ID and date */</span>
</span><span class='line'><span class="k">val</span> <span class="n">addMongoIdAndDate</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">(</span> <span class="o">(</span><span class="n">generateId</span> <span class="n">and</span> <span class="n">generateCreated</span><span class="o">).</span><span class="n">reduce</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the insert action could be coded as:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">insertPerson</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">){</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">validatePerson</span> <span class="n">andThen</span> <span class="n">addMongoIdAndDate</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">jsobj</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>      <span class="n">persons</span><span class="o">.</span><span class="n">insert</span><span class="o">(</span><span class="n">jsobj</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">p</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">// removes extended JSON to ouput generated _id</span>
</span><span class='line'>        <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="n">jsobj</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">fromObjectId</span><span class="o">).</span><span class="n">get</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>      <span class="o">}.</span><span class="n">recover</span><span class="o">{</span> <span class="k">case</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;exception %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="n">getMessage</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">err</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">err</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>resOK</code> and <code>resKO</code> are just function building JSON result with response status. Have a look at code for more info.</p>

<br/>


<br/>


<h3><a name="action-get">Get Person</a></h3>

<p>The action receives the ID of the person as a String and we only need to generate the right Mongo JSON format to retrieve the document.
Here is the Json <code>Writes[String]</code> that creates the extended JSON notation from ID:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">toObjectId</span> <span class="k">=</span> <span class="nc">OWrites</span><span class="o">[</span><span class="kt">String</span><span class="o">]{</span> <span class="n">s</span> <span class="k">=&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$oid&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">))</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>getPerson</code> action code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">getPerson</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">{</span>
</span><span class='line'>  <span class="c1">// builds a query from ID</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">QueryBuilder</span><span class="o">().</span><span class="n">query</span><span class="o">(</span><span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">))</span>
</span><span class='line'>  <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">persons</span><span class="o">.</span><span class="n">find</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">q</span><span class="o">).</span><span class="n">headOption</span><span class="o">.</span><span class="n">map</span><span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">NotFound</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;res&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;KO&quot;</span><span class="o">,</span> <span class="s">&quot;error&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person with ID $id not found&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">outputPerson</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">jsonp</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;person&quot;</span> <span class="o">-&gt;</span> <span class="n">jsonp</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">e</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="action-delete">Delete Person</a></h3>

<p><code>Delete</code> is exactly the same as <code>Get</code> in terms of input and it doesn&#8217;t require any output except to inform about success or failure.<br/>
So let&#8217;s give directly the <code>deletePerson</code>code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">deletePerson</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">{</span>
</span><span class='line'>  <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">persons</span><span class="o">.</span><span class="n">remove</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">)).</span><span class="n">map</span><span class="o">{</span> <span class="n">lastError</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">ok</span><span class="o">)</span>
</span><span class='line'>        <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person $id deleted&quot;</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;error %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">stringify</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="action-update">Update Full Person</a></h3>

<p>When updating a full person:</p>

<ul>
<li>we receive the ID in the URL</li>
<li>we receive the new Json representing the person in the body</li>
<li>we need to update the corresponding document in DB.</li>
</ul>


<p>So we must do the following:</p>

<ul>
<li>validate input JSON using <code>validatePerson</code></li>
<li>transform the ID into MongoID JSON extended notation using <code>toObjectId</code> described previously</li>
<li>transform json into Update Json extended notation:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;$set&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">pw:</span> <span class="nt">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>    <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>      <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>    <span class="p">},</span> <span class="err">...]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the JSON transformer for update notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Converts JSON into Mongo update selector by just copying whole object in $set field */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">toMongoUpdate</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;$set</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally here is the corresponding <code>updatePerson</code> action code</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">updatePerson</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">){</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">validatePerson</span><span class="o">).</span><span class="n">flatMap</span><span class="o">{</span> <span class="n">jsobj</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">jsobj</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">toMongoUpdate</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">updateSelector</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>        <span class="n">persons</span><span class="o">.</span><span class="n">update</span><span class="o">(</span>
</span><span class='line'>          <span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">),</span>
</span><span class='line'>          <span class="n">updateSelector</span>
</span><span class='line'>        <span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">lastError</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">ok</span><span class="o">)</span>
</span><span class='line'>            <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person $id updated&quot;</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;error %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">stringify</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">e</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name="action-update-restricted">Update Restricted Person</a></h3>

<p>Restricted update is exactly the same as Full update except it validates the input JSON using <code>validatePerson4RestrictedUpdate</code> instead of <code>validatePerson</code></p>

<p>So here is the <code>updatePersonRestricted</code> action code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">updatePersonRestricted</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">){</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">validatePerson4RestrictedUpdate</span><span class="o">).</span><span class="n">flatMap</span><span class="o">{</span> <span class="n">jsobj</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">jsobj</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">toMongoUpdate</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">updateSelector</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>        <span class="n">persons</span><span class="o">.</span><span class="n">update</span><span class="o">(</span>
</span><span class='line'>          <span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">),</span>
</span><span class='line'>         <span class="n">updateSelector</span>
</span><span class='line'>        <span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">lastError</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">ok</span><span class="o">)</span>
</span><span class='line'>            <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person $id updated&quot;</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;error %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">stringify</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">e</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h1><a name="code">Full Code</a></h1>

<blockquote><p>The whole sample can be found on Github <a href="https://github.com/mandubian/play2-json-demo/tree/master/json-coast-to-coast">json-coast-to-coast sample</a>
To test it, use a Rest client such as Postman or whatever.</p></blockquote>

<br/>


<br/>


<h1><a name="conclusion">Conclusion</a></h1>

<p>Many things in this article… Maybe too many…<br/>
Anyway, the subject is huge and deserves it.</p>

<p>This sample demonstrates it&#8217;s possible to transmit a JSON data-flow from client to DB without going through any static model. That&#8217;s why I speak about <em>JSON coast-to-coast</em> and I find it&#8217;s a very good pattern in many cases in our <em>every-day-as-backend-designer</em> life.</p>

<p>Just remind 3 things maybe:</p>

<ul>
<li>data flow direct manipulation is possible, practical and useful.</li>
<li>pure data manipulation doesn&#8217;t lessen type-safety or data structuring as you control everything at the boundaries of your backend system.</li>
<li>static model is useful sometimes but not always so before writing generic classes, DAO everywhere, think about your real needs.</li>
</ul>


<p>In the code sample, I don&#8217;t take into account the temporal behavior of data and the dynamic requirements of interactions with other elements of the data flow. But don&#8217;t forget this aspect in your backend design.</p>

<blockquote><p>Finally, as you could see, <strong>ReactiveMongo</strong> mixed with <strong>Play2.1 JSON API</strong> provides us with a really good toolbox for data-centric approach. It also allows to deal with realtime data flow to design so-called reactive applications (which is also the reason of being of Play2 framework).</p></blockquote>

<p>Have flowfun!</p>
]]></content>
  </entry>
  
</feed>
