<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mandubian Blog]]></title>
  <link href="http://www.mandubian.com/atom.xml" rel="self"/>
  <link href="http://www.mandubian.com/"/>
  <updated>2013-05-23T19:03:01+02:00</updated>
  <id>http://www.mandubian.com/</id>
  <author>
    <name><![CDATA[Pascal Voitot]]></name>
    <email><![CDATA[pascal.voitot.dev@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play2 Json Path Pattern Matching]]></title>
    <link href="http://www.mandubian.com/2013/05/01/jspath-pattern-matching/"/>
    <updated>2013-05-01T17:17:00+02:00</updated>
    <id>http://www.mandubian.com/2013/05/01/jspath-pattern-matching</id>
    <content type="html"><![CDATA[<h4>EXPERIMENTAL / DRAFT</h4>

<br/>




<div class="well">
<p>While experimenting <b>Play21/Json Zipper</b> in my <a href="http://www.mandubian.com/2013/05/01/JsZipper/">previous article</a>, I needed to match patterns on <code>JsPath</code> and decided to explore a bit this topic.</p>
<p>This article just presents my experimentations on <code>JsPath</code> pattern matching so that people interested in the topic can tell me if they like it or not and what they would add or remove. So don&#8217;t hesitate to let comments about it.</p>
<p>If the result is satisfying, I&#8217;ll propose it to Play team ;)</p>
</div>


<p>Let&#8217;s go to samples as usual.</p>

<h2>Very simple pattern matching</h2>

<h3><code>match/scale</code>-style</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">__</span> <span class="o">\</span> <span class="n">key</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">toto</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>val</code>-style</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span> <span class="o">\</span> <span class="n">toto</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span><span class='line'><span class="n">toto</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I don&#8217;t write <code>val __ \ toto = __ \ "toto"</code> <em>(2x Underscore)</em> as you would expect.</p>

<p>Why? Let&#8217;s write it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nc">__</span> <span class="o">\</span> <span class="n">toto</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">20</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">recursive</span> <span class="kt">value</span> <span class="kt">x$1</span> <span class="kt">needs</span> <span class="k">type</span>
</span><span class='line'><span class="kt">val</span> <span class="k">__</span> <span class="kt">\</span> <span class="kt">toto</span> <span class="o">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, 1st <code>__</code> is considered as a variable to be affected by Scala compiler. Then the variable <code>__</code> appears on left and right side which is not good.</p>

<p>So I use <code>_</code> to ignore its value because I know it&#8217;s <code>__</code>. If I absolutely wanted to match with <code>__</code>, you would have written:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nc">JsPath</span> <span class="o">\</span> <span class="n">toto</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span>
</span><span class='line'><span class="n">toto</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Pattern matching with indexed path</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">toto</span><span class="o">)@@</span><span class="n">idx</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">toto</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">)@@</span><span class="n">idx</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">idx</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span>      <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the usage of <code>@@</code> operator that you can dislike. <em>I didn&#8217;t find anything better for now but if anyone has a better idea, please give it to me ;)</em></p>

<br/>


<h2>Pattern matching the last element of a JsPath</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span> <span class="o">\</span> <span class="n">last</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span>
</span><span class='line'><span class="n">last</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">gamma</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>_</code>, I ignore everything before <code>gamma</code> node.</p>

<br/>


<h2>Matching only the first element and the last one</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span> <span class="o">\</span> <span class="n">first</span> <span class="o">\?\</span> <span class="n">last</span> <span class="k">=</span> <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">first</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">last</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">first</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\?\</span> <span class="n">last</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">first</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">last</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>\?\</code> operator which is also a temporary choice: I didn&#8217;t want to choose <code>\\</code> ause <code>\?\</code> operator only works in the case where you match between the first and the last element of the path and not between anything and anything&#8230;</p>

<br/>


<h2>A few more complex cases</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">alpha</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\</span> <span class="n">beta</span> <span class="o">\</span> <span class="n">gamma</span> <span class="o">\</span> <span class="n">delta</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">alpha</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">beta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">beta</span>
</span><span class='line'><span class="n">gamma</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">gamma</span>
</span><span class='line'><span class="n">delta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="o">(</span><span class="k">_</span> <span class="o">\</span> <span class="n">alpha</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\</span> <span class="k">_</span> <span class="o">\</span> <span class="k">_</span> <span class="o">\</span> <span class="n">delta</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">alpha</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">delta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="k">_</span><span class="o">@@</span><span class="n">idx</span> <span class="o">\?\</span> <span class="n">gamma</span> <span class="o">\</span> <span class="n">delta</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span>
</span><span class='line'><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">gamma</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">gamma</span>
</span><span class='line'><span class="n">delta</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="s">&quot;delta&quot;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span><span class="o">@@</span><span class="mi">2</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span> <span class="o">\</span> <span class="s">&quot;gamma&quot;</span> <span class="o">\</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="kc">true</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res4</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>And finally using regex?</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">pattern</span> <span class="k">=</span> <span class="s">&quot;&quot;&quot;al(\d)*pha&quot;&quot;&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="n">pattern</span><span class="k">:</span> <span class="kt">scala.util.matching.Regex</span> <span class="o">=</span> <span class="n">al</span><span class="o">(\</span><span class="n">d</span><span class="o">)*</span><span class="n">pha</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;al1234pha&quot;</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">)@@</span><span class="n">idx</span> <span class="o">\</span> <span class="n">pattern</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span> <span class="k">=&gt;</span> <span class="kc">true</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, I think we can provide more features and now I&#8217;m going to use it with my <code>JsZipper</code> stuff in my next article ;)</p>

<p>If you like it, tell it!</p>

<p>Have fun!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JsZipper : Play2 Json advanced (& monadic) manipulations]]></title>
    <link href="http://www.mandubian.com/2013/05/01/JsZipper/"/>
    <updated>2013-05-01T17:17:00+02:00</updated>
    <id>http://www.mandubian.com/2013/05/01/JsZipper</id>
    <content type="html"><![CDATA[<h4>EXPERIMENTAL / DRAFT</h4>

<br/>


<p>The code is available on Github project <a href="https://github.com/mandubian/play-json-zipper">play-json-zipper</a></p>

<div class="well">
<p><b><code>JsZipper</code> is a new tool allowing much more complex & powerful manipulations of Json structures for Play2/Json Scala API (not a part of Play2 core for now)</b></p>
<p><code>JsZipper</code> is inspired by the <a href="http://en.wikipedia.org/wiki/Zipper_(data_structure)">Zipper</a> concept introduced by <a href="http://en.wikipedia.org/wiki/Gérard_Huet">Gérard Huet</a> in 1997.</p>

<p>The Zipper allows to update immutable traversable structures in an efficient way. Json is an immutable AST so it fits well. FYI, the Zipper behaves like a loupe that walks through each node of the AST (left/right/up/down) while keeping aware of the nodes on its left, its right and its upper. The interesting idea behind the loupe is that when it targets a node, it can modify and even delete the focused node. The analogy to the pants zipper is quite good too because when it goes down the tree, it behaves as if it was <i>opening</i> the tree to be able to drive the loupe through all nodes and when it goes up, it <i>closes</i> back the tree&#8230; I won&#8217;t tell more here, it would be too long.</p>

<p><code>JsZipper</code> is a specific interpretation of Zipper concept for Play/Json API based on :
<ul><li>Scala Streams to go through / update / construct Json AST nodes in a lazy way</li>
<li>Monadic aspects to provide <i>funnier</i> ways of manipulating the Json AST (plz see below)</li>
</ul>
</p>
<br/>
<p><i>Please note, <code>JsZipper</code> is not an end in itself but a tool useful to provide new API to manipulate Json.</i></p>
</div>


<p>Let&#8217;s go to samples because it explains everything.</p>

<p>We&#8217;ll use following Json Object.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;key11&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;TO_FIND&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;key12&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;key13&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsNull</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="mi">123</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key3&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key4&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">,</span> <span class="mf">345.6</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key411&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key4111&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;TO_FIND&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsObject</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Basic manipulations</h1>

<h2>Setting multiple paths/values</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">set</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key4&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mf">765.23</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="mf">765.23</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deleting multiple paths/values</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">delete</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key4&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key13&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Finding paths/values according to a filter</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">findAll</span><span class="o">(</span> <span class="k">_</span> <span class="o">==</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span> <span class="o">).</span><span class="n">toList</span>
</span><span class='line'><span class="n">res5</span><span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">play.api.libs.json.JsPath</span>, <span class="kt">play.api.libs.json.JsValue</span><span class="o">)]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">key1</span><span class="o">/</span><span class="n">key11</span><span class="o">,</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">key4</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(/</span><span class="n">key4</span><span class="o">(</span><span class="mi">3</span><span class="o">)/</span><span class="n">key411</span><span class="o">/</span><span class="n">key4111</span><span class="o">,</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating values according to a filter based on value</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">updateAll</span><span class="o">(</span> <span class="o">(</span><span class="k">_:</span><span class="kt">JsValue</span><span class="o">)</span> <span class="o">==</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span> <span class="o">){</span> <span class="n">js</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="k">=</span> <span class="n">js</span>
</span><span class='line'>  <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span> <span class="o">+</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating values according to a filter based on path+value</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">updateAll</span><span class="o">{</span> <span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">js</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="nc">JsPathExtension</span><span class="o">.</span><span class="n">hasKey</span><span class="o">(</span><span class="n">path</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;key4111&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}{</span> <span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">js</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="k">=</span> <span class="n">js</span>
</span><span class='line'>  <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span> <span class="o">+</span> <span class="n">path</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">last</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND/key4111</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating an object from scratch</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">build</span> <span class="k">=</span> <span class="nc">JsExtensions</span><span class="o">.</span><span class="n">buildJsObject</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mi">123L</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key2&quot;</span><span class="o">)(</span><span class="mi">0</span><span class="o">)</span>      <span class="o">-&gt;</span> <span class="nc">JsBoolean</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class='line'>  <span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span>           <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">build</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">},</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="err">[1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="err">]</span><span class="o">,</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">[</span><span class="kt">true</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h1>Let&#8217;s be funnier with Monads now</h1>

<blockquote><p>Let&#8217;s use <code>Future</code> as our Monad because it&#8217;s&#8230; coooool to do things in the future ;)</p></blockquote>

<p>Imagine you call several services returning <code>Future[JsValue]</code> and you want to build/update a <code>JsObject</code> from it.
Until now, if you wanted to do that with Play2/Json, it was quite tricky and required some code.</p>

<p>Here is what you can do now.</p>

<h2>Updating multiple <em>FUTURE</em> values at given paths</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeJs</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">setM</span><span class="o">[</span><span class="kt">Future</span><span class="o">](</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key4&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span>        <span class="o">-&gt;</span> <span class="n">future</span><span class="o">{</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mf">765.23</span><span class="o">)</span> <span class="o">},</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span> <span class="o">\</span> <span class="s">&quot;key12&quot;</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">future</span><span class="o">{</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">maybeJs</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">6</span><span class="n">beb722d</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">maybeJs</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">(</span><span class="s">&quot;2 seconds&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">res4</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="mf">765.23</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Update multiple <em>FUTURE</em> values according to a filter</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeJs</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">updateAllM</span><span class="o">[</span><span class="kt">Future</span><span class="o">](</span> <span class="o">(</span><span class="k">_:</span><span class="kt">JsValue</span><span class="o">)</span> <span class="o">==</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;TO_FIND&quot;</span><span class="o">)</span> <span class="o">){</span> <span class="n">js</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">future</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="k">=</span> <span class="n">js</span>
</span><span class='line'>    <span class="nc">JsString</span><span class="o">(</span><span class="n">str</span> <span class="o">+</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">maybeJs</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">35</span><span class="n">a4bb1a</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">maybeJs</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">(</span><span class="s">&quot;2 seconds&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key11</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">key12</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key13&quot;</span><span class="k">:</span><span class="kt">null</span><span class="o">},</span><span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">,</span><span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;key4&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">,</span><span class="mf">345.6</span><span class="o">,</span><span class="s">&quot;test&quot;</span><span class="o">,{</span><span class="s">&quot;key411&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">key4111</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">TO_FIND2</span><span class="err">&quot;</span><span class="o">}}</span><span class="err">]</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a <em>FUTURE</em> JsArray from scratch</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeArr</span> <span class="k">=</span> <span class="nc">JsExtensions</span><span class="o">.</span><span class="n">buildJsArrayM</span><span class="o">[</span><span class="kt">Future</span><span class="o">](</span>
</span><span class='line'>  <span class="n">future</span> <span class="o">{</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="mf">123.45</span><span class="o">)</span> <span class="o">},</span>
</span><span class='line'>  <span class="n">future</span> <span class="o">{</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">maybeArr</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">220</span><span class="n">d48e4</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">maybeArr</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">(</span><span class="s">&quot;2 seconds&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">[</span><span class="err">123</span><span class="kt">.</span><span class="err">45</span>,<span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s still draft so it can be improved but if you like it, don&#8217;t hesitate to comment and if people like it, it could become a part of Play Framework itself</p>

<p>Have fun!</p>

<br/>


<br/>


<br/>


<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Survey about most basic concept in Functional Programming]]></title>
    <link href="http://www.mandubian.com/2013/04/13/FP-survey/"/>
    <updated>2013-04-13T14:14:00+02:00</updated>
    <id>http://www.mandubian.com/2013/04/13/FP-survey</id>
    <content type="html"><![CDATA[<h4>The question</h4>

<div class="well">
<h3>What&#8217;s the first word coming in your mind when I say:</h3>
<h3><i>&#8220;Most basic concept of functional programming?&#8221;</i></h3>
</div>








<script src="http://d3js.org/d3.v3.js"></script>




<script>
var width = 800,
    height = 600;

var cluster = d3.layout.cluster()
    .size([height, width - 560]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var content = document.getElementsByClassName("entry-content")[0];

var svg = d3.select(content).append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(50,0)");

d3.json("/javascripts/survey1-results.json", function(error, json) {
  if (error) return console.warn(error);
  console.log(json);

  var nodes = cluster.nodes(json),
      links = cluster.links(nodes);

  var link = svg.selectAll(".link")
      .data(links)
      .enter().append("path")
      .attr("class", "link")
      .attr("d", diagonal);

  var node = svg.selectAll(".node")
      .data(nodes)
      .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })

  node.append("circle")
      .attr("r", 4.5);

  node.append("text")
      .attr("dx", function(d) { return d.children ? -8 : 8; })
      .attr("dy", 3)
      .style("text-anchor", function(d) { return d.children ? "end" : "start"; })
      .text(function(d) { return d.name; });
});

d3.select(self.frameElement).style("height", height + "px");

</script>


<blockquote><p>For info, this dendrograph was pre-computed using Play2.1 app sucking Tweets &amp; filtering/grouping the results in a very manual-o-matic way…</p></blockquote>

<p>Have Fun(ctional)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shapeless HList Schema-Type-Safe conversion to Datomisca/Datomic Entities]]></title>
    <link href="http://www.mandubian.com/2013/03/12/datomisca-shapeless-hlist/"/>
    <updated>2013-03-12T12:12:00+01:00</updated>
    <id>http://www.mandubian.com/2013/03/12/datomisca-shapeless-hlist</id>
    <content type="html"><![CDATA[<blockquote><p>The code is on github project <a href="https://github.com/mandubian/shapotomic">shapotomic</a></p></blockquote>

<h4>Datomisca is a Scala API for Datomic DB</h4>

<p>If you want to know more about Datomisca/Datomic schema go to my <a href="http://mandubian.com/2013/03/04/datomisca-schema/">recent article</a>. What&#8217;s interesting with Datomisca schema is that they are statically typed allowing some compiler validations and type inference.</p>

<h4><a href="https://github.com/milessabin/shapeless">Shapeless HList</a> are heterogenous polymorphic lists</h4>

<p>HList are able to contain different types of data and able to keep tracks of these types.</p>

<br/>


<div class="well">
<b><p>This project is an experience trying to :</p>

<ul>
  <li>convert HList to/from Datomic Entities</li>
  <li>check HList types against schema at compile-time</li>
</ul></b>
</div>


<p>This uses :</p>

<ul>
<li>Datomisca type-safe schema</li>
<li>Shapeless HList</li>
<li>Shapeless polymorphic functions</li>
</ul>


<p>Please note that we don&#8217;t provide any <code>Iso[From, To]</code> since there is no isomorphism here.
Actually, there are 2 monomorphisms (injective):</p>

<ul>
<li><code>HList   =&gt; AddEntity</code> to provision an entity</li>
<li><code>DEntity =&gt; HList</code> when retrieving entity</li>
</ul>


<p>We would need to implement <code>Mono[From, To]</code> certainly for our case&#8230;</p>

<h2>Code sample</h2>

<h3>Create schema based on <code>HList</code></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Koala Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Koala</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">koala</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;koala&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// schema attributes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span>        <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s name&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">age</span>         <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s age&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">trees</span>       <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;trees&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">many</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s trees&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the schema in HList form</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">schema</span> <span class="k">=</span> <span class="n">name</span> <span class="o">::</span> <span class="n">age</span> <span class="o">::</span> <span class="n">trees</span> <span class="o">::</span> <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the datomic facts corresponding to schema </span>
</span><span class='line'>  <span class="c1">// (need specifying upper type for shapeless conversion to list)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="n">schema</span><span class="o">.</span><span class="n">toList</span><span class="o">[</span><span class="kt">Operation</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Provision schema</span>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">txData</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Validate <code>HList</code> against Schema</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// creates a Temporary ID &amp; keeps it for resolving entity after insertion</span>
</span><span class='line'><span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'><span class="c1">// creates an HList entity </span>
</span><span class='line'><span class="k">val</span> <span class="n">hListEntity</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">::</span> <span class="s">&quot;kaylee&quot;</span> <span class="o">::</span> <span class="mi">3L</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">Set</span><span class="o">(</span> <span class="s">&quot;manna_gum&quot;</span><span class="o">,</span> <span class="s">&quot;tallowwood&quot;</span> <span class="o">)</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates and converts at compile-time this HList against schema</span>
</span><span class='line'><span class="n">hListEntity</span><span class="o">.</span><span class="n">toAddEntity</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">schema</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you remove a field from HList and try again, the compiler fails</span>
</span><span class='line'><span class="k">val</span> <span class="n">badHListEntity</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">::</span> <span class="s">&quot;kaylee&quot;</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">Set</span><span class="o">(</span> <span class="s">&quot;manna_gum&quot;</span><span class="o">,</span> <span class="s">&quot;tallowwood&quot;</span> <span class="o">)</span> <span class="o">::</span>
</span><span class='line'>  <span class="nc">HNil</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">badHListEntity</span><span class="o">.</span><span class="n">toAddEntity</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">schema</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">23</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">could</span> <span class="kt">not</span> <span class="kt">find</span> <span class="kt">implicit</span> <span class="kt">value</span> <span class="kt">for</span> <span class="kt">parameter</span> <span class="kt">pull:</span>
</span><span class='line'>  <span class="n">shapotomic</span><span class="o">.</span><span class="nc">SchemaCheckerFromHList</span><span class="o">.</span><span class="nc">Pullback2</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.TempId</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">scala.collection.immutable.Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>,
</span><span class='line'>  <span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.RawAttribute</span><span class="o">[</span><span class="kt">datomisca.DString</span>,<span class="kt">datomisca.CardinalityOne.</span><span class="k">type</span><span class="o">]</span>,
</span><span class='line'>  <span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.RawAttribute</span><span class="o">[</span><span class="kt">datomisca.DLong</span>,<span class="kt">datomisca.CardinalityOne.</span><span class="k">type</span><span class="o">]</span>,
</span><span class='line'>  <span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">datomisca.RawAttribute</span><span class="o">[</span><span class="kt">datomisca.DString</span>,<span class="kt">datomisca.CardinalityMany.</span><span class="k">type</span><span class="o">]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>,<span class="kt">datomisca.AddEntity</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The compiler error is a bit weird at first but if you take a few seconds to read it, you&#8217;ll see that there is nothing hard about it, it just says:</em></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">I</span> <span class="n">can</span><span class="-Symbol">&#39;t</span> <span class="n">convert</span>
</span><span class='line'><span class="o">(</span><span class="nc">TempId</span> <span class="o">::)</span> <span class="nc">String</span>             <span class="o">::</span> <span class="nc">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>      <span class="o">::</span> <span class="nc">HNil</span> <span class="k">=&gt;</span>
</span><span class='line'>            <span class="nc">Attr</span><span class="o">[</span><span class="kt">DString</span>, <span class="kt">one</span><span class="o">]</span> <span class="o">::</span> <span class="nc">Attr</span><span class="o">[</span><span class="kt">DLong</span>, <span class="kt">one</span><span class="o">]</span> <span class="o">::</span> <span class="nc">Attr</span><span class="o">[</span><span class="kt">DString</span>, <span class="kt">many</span><span class="o">]</span> <span class="o">::</span> <span class="nc">HNil</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Convert <code>DEntity</code> to static-typed <code>HList</code> based on schema</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">e</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">resolveEntity</span><span class="o">(</span><span class="n">tx</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// rebuilds HList entity from DEntity statically typed by schema</span>
</span><span class='line'><span class="k">val</span> <span class="n">postHListEntity</span> <span class="k">=</span> <span class="n">e</span><span class="o">.</span><span class="n">toHList</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">schema</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Explicitly typing the value to show that the compiler builds the right typed HList from schema</span>
</span><span class='line'><span class="k">val</span> <span class="n">validateHListEntityType</span><span class="k">:</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="k">=</span> <span class="n">postHListEntity</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Using <code>HList</code> with compile-time schema validation is quite interesting because it provides a very basic and versatile data structure to manipulate Datomic entities in a type-safe style.</p>

<p>Moreover, as Datomic pushes atomic data manipulation (simple facts instead of full entities), it&#8217;s really cool to use <code>HList</code> instead of rigid static structure such as case-class.</p>

<p>For ex:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">simplerOp</span> <span class="k">=</span> <span class="o">(</span><span class="n">id</span> <span class="o">::</span> <span class="s">&quot;kaylee&quot;</span> <span class="o">::</span> <span class="mi">5L</span><span class="o">).</span><span class="n">toAddEntity</span><span class="o">(</span><span class="nc">Koala</span><span class="o">.</span><span class="n">name</span> <span class="o">::</span> <span class="nc">Koala</span><span class="o">.</span><span class="n">age</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have TypedFun</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datomisca Delicatessen -  Emulsion of Scala type-safety in Datomic Schema]]></title>
    <link href="http://www.mandubian.com/2013/03/04/datomisca-schema/"/>
    <updated>2013-03-04T00:00:00+01:00</updated>
    <id>http://www.mandubian.com/2013/03/04/datomisca-schema</id>
    <content type="html"><![CDATA[<p>One more step in our progressive unveiling of <a href="http://pellucidanalytics.github.com/datomisca/index.html">Datomisca</a>, our opensource Scala API (sponsored by <a href="http://www.pellucidanalytics.com">Pellucid</a> &amp; <a href="http://www.zenexity.com">Zenexity</a>) trying to enhance <a href="http://www.datomic.com">Datomic</a> experience for Scala developers&#8230;</p>

<p>After evoking <a href="./2013-02-10-datomisca-query.html">queries compiled by Scala macros in previous article</a> and then <a href="./2013-02-18-datomisca-fact-operations.html">reactive transaction &amp; fact operation API</a>, let&#8217;s explain <strong>how <em>Datomisca</em> manages Datomic schema attributes</strong>.</p>

<br/>


<h1>Datomic Schema Reminders</h1>

<p>As explained in previous articles, Datomic stores lots of atomic facts called <code>datoms</code> which are constituted of <code>entity-id</code>, <code>attribute</code>, <code>value</code> and <code>transaction-id</code>.</p>

<p>An attribute is just a namespaced keyword <code>:&lt;namespace&gt;.&lt;nested-namespace&gt;/&lt;name&gt; such as</code>:person.address/street`:</p>

<ul>
<li><code>person.address</code> is just a hierarchical namespace <code>person</code> -> <code>address</code></li>
<li><code>street</code> is the name of the attribute</li>
</ul>


<p>It&#8217;s cool to provision all thoses atomic pieces of information but what if we provision non existing attribute with bad format, type, &#8230;? Is there a way to control the format of data in Datomic?</p>

<blockquote><p>In a less strict way than SQL, Datomic provides schema facility allowing to constrain the accepted attributes and their type values.</p></blockquote>

<h2>Schema attribute definition</h2>

<p>Datomic schema just defines the accepted attributes and some constraints on those attributes. Each schema attribute can be defined by following fields:</p>

<h3>value type</h3>

<ul>
<li><strong>basic types</strong> : <code>string</code>, <code>long</code>, <code>float</code>, <code>bigint</code>, <code>bigdec</code>, <code>boolean</code>, <code>instant</code>, <code>uuid</code>, <code>uri</code>, <code>bytes</code> (yes NO <code>int</code>).</li>
<li><strong>reference</strong> : in Datomic you can reference other entities (these are lazy relations not as strict as the ones in RDBMS)</li>
</ul>


<h3>cardinality</h3>

<ul>
<li><strong>one</strong> : one-to-one relation if you want an analogy with RDBMS</li>
<li><strong>many</strong> : one-to-many relation</li>
</ul>


<blockquote><p>Please note that in Datomic, all relations are bidirectional even for one-to-many.</p></blockquote>

<h3>optional constraints:</h3>

<ul>
<li>unicity</li>
<li>index creation</li>
<li>fulltext indexation</li>
<li>a few more exotic ones that you&#8217;ll find in <a href="http://docs.datomic.com/schema.html">Datomic doc about schema</a></li>
</ul>


<h2>Schema attributes are entities</h2>

<p>The schema validation is applied at fact insertion and allows to prevent from inserting unknown attributes or bad value types. But how are schema attributes defined?</p>

<p><strong>Actually, schema attributes are themselves entities. </strong></p>

<p>Remember, in previous article, I had introduced entities as being just loose aggregation of datoms just identified by the same entity ID (the first attribute of a datom).</p>

<p>So a schema attribute is just an entity stored in a special partition <code>:db.part/db</code> and defined by a few specific fields corresponding to the ones in previous paragraph. Here are the fields used to define a Datomic schema attribute technically speaking:</p>

<h3>mandatory fields</h3>

<ul>
<li><code>:db/ident</code> : specifies unique name of the attribute</li>
<li><code>:db/valueType</code> : specifies one the previous types - <em>Please note that even those types are not hard-coded in Datomic and in the future, adding new types could be a new feature.</em></li>
<li><code>:db/cardinality</code> : specifies the cardinality <code>one</code> or <code>many</code> of the attribute - a many attribute is just a set of values and type <code>Set</code> is important because Datomic only manages sets of unique values as it won&#8217;t return multiple times the same value when querying.</li>
</ul>


<h3>optional fields</h3>

<ul>
<li><code>:db/unique</code></li>
<li><code>:db/doc</code> (<em>useful to document your schema</em>)</li>
<li><code>:db/index</code></li>
<li><code>:db/fulltext</code></li>
<li><code>:db/isComponent</code></li>
<li><code>:db/noHistory</code></li>
</ul>


<p>Here is an example of schema attribute declaration written in Clojure:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:person/name</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A person&#39;s name&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>As you can see, creating schema attributes just means creating new entities in the right partition. So, to add new attributes to Datomic, you just have to add new facts.</p></blockquote>

<br/>


<h1>Schema sample</h1>

<p>Let&#8217;s create a schema defining a Koala living in an eucalyptus.</p>

<div class="well">
  <p>Yes I&#8217;m a super-Koala fan! Don&#8217;t ask me why, this is a long story not linked at all to Australia :D&#8230; But saving Koalas is important to me so I put this little banner for them&#8230;<span style="float: right"><a href="http://www.savethekoala.com"><img src="http://www.mandubian.com/images/mandubian/buttondonate.gif" /></a></span>
  </p>
</div>


<p>Let&#8217;s define a koala by following attributes:</p>

<ul>
<li>a name <code>String</code></li>
<li>an age <code>Long</code></li>
<li>a sex which can be <code>male</code> or `female</li>
<li><p>a few eucalyptus trees in which to feed defined by:</p>

<ul>
<li>a species being a <code>reference</code> to one of the possible species of eucalyptus trees</li>
<li>a row <code>Long</code> (<em>let&#8217;s imagine those trees are planted in rows/columns</em>)</li>
<li>a column <code>Long</code></li>
</ul>
</li>
</ul>


<p>Here is the Datomic schema for this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/name</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'> <span class="ss">:db/unique</span> <span class="ss">:db.unique/value</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s name&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/age</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/long</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s age&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/sex</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/ref</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s sex&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:koala/eucalyptus</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/ref</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/many</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A koala&#39;s eucalyptus trees&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus/species</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/ref</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A eucalyptus specie&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus/row</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/long</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A eucalyptus row&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/db</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus/col</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/long</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;A eucalyptus column&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; koala sexes as keywords</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:sex/male</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:sex/female</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; eucalyptus species</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/manna_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/tasmanian_blue_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/swamp_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/grey_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/river_red_gum</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:eucalyptus.species/tallowwood</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this sample, you can see that we have defined 4 namespaces:</p>

<ul>
<li><code>koala</code> used to logically regroup koala entity fields</li>
<li><code>eucalyptus</code> used to logically regroup eucalyptus entity fields</li>
<li><code>sex</code> used to identify koala sex male or female as unique keywords</li>
<li><code>eucalyptus.species</code> to identify eucalyptus species as unique keywords</li>
</ul>


<p>Remark also:</p>

<ul>
<li><code>:koala/name</code> field is uniquely valued meaning no koala can have the same name</li>
<li><code>:koala/eucalyptus</code> field is a <em>one-to-many</em> reference to eucalyptus entities</li>
</ul>


<br/>


<h1>Datomisca way of declaring schema</h1>

<h2>First of all, initialize your Datomic DB</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;datomic:mem://koala-db&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">createDatabase</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">connect</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The NOT-preferred way</h2>

<p>Now, you must know it but Datomisca intensively uses Scala 2.10 macros to provide compile-time parsing and validation of Datomic queries or operations written in Clojure.</p>

<p>Previous Schema attributes definition is just a set of classic operations so you can ask Datomisca to parse them at compile-time as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">ops</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">{:db/id #db/id[:db.part/db]</span>
</span><span class='line'><span class="s"> :db/ident :koala/name</span>
</span><span class='line'><span class="s"> :db/valueType :db.type/string</span>
</span><span class='line'><span class="s"> :db/unique :db.unique/value</span>
</span><span class='line'><span class="s"> :db/cardinality :db.cardinality/one</span>
</span><span class='line'><span class="s"> :db/doc &quot;A koala&#39;s name&quot;}</span>
</span><span class='line'><span class="s">...</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can provision the schema into Datomic using:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">ops</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The preferred way</h2>

<p>Ok the previous is cool as you can validate and provision a clojure schema using Datomisca.
But Datomisca provides a programmatic way of writing schema in Scala. This brings :</p>

<ul>
<li><strong>scala idiomatic</strong> way of manipulating schema</li>
<li><strong>Type-safety</strong> to Datomic schema attributes.</li>
</ul>


<p>Let&#8217;s see the code directly:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Sex Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">SexSchema</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// First create your namespace</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">sex</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;sex&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// enumerated values</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">FEMALE</span>  <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">sex</span> <span class="o">/</span> <span class="s">&quot;female&quot;</span><span class="o">)</span> <span class="c1">// :sex/female</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">MALE</span>    <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">sex</span> <span class="o">/</span> <span class="s">&quot;male&quot;</span><span class="o">)</span>   <span class="c1">// :sex/male</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// facts representing the schema to be provisioned</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="nc">FEMALE</span><span class="o">,</span> <span class="nc">MALE</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Eucalyptus Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">EucalyptusSchema</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">eucalyptus</span>  <span class="k">=</span> <span class="k">new</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;eucalyptus&quot;</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// new is just here to allow structural construction</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">species</span>   <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;species&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// different species</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">MANNA_GUM</span>           <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;manna_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">TASMANIAN_BLUE_GUM</span>  <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;tasmanian_blue_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">SWAMP_GUM</span>           <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;swamp_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">GRY_GUM</span>             <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;grey_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">RIVER_RED_GUM</span>       <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;river_red_gum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">TALLOWWOOD</span>          <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">.</span><span class="n">species</span> <span class="o">/</span> <span class="s">&quot;tallowwood&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// schema attributes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">species</span>  <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span> <span class="o">/</span> <span class="s">&quot;species&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Eucalyptus&#39;s species&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">row</span>      <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span> <span class="o">/</span> <span class="s">&quot;row&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Eucalyptus&#39;s row&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">col</span>      <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">eucalyptus</span> <span class="o">/</span> <span class="s">&quot;col&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Eucalyptus&#39;s column&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// facts representing the schema to be provisioned</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="n">species</span><span class="o">,</span> <span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">MANNA_GUM</span><span class="o">,</span> <span class="nc">TASMANIAN_BLUE_GUM</span><span class="o">,</span> <span class="nc">SWAMP_GUM</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">GRY_GUM</span><span class="o">,</span> <span class="nc">RIVER_RED_GUM</span><span class="o">,</span> <span class="nc">TALLOWWOOD</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Koala Schema</span>
</span><span class='line'><span class="k">object</span> <span class="nc">KoalaSchema</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">ns</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">koala</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;koala&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// schema attributes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span>         <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s name&quot;</span><span class="o">).</span><span class="n">withUnique</span><span class="o">(</span><span class="nc">Unique</span><span class="o">.</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">age</span>          <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">long</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s age&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sex</span>          <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;sex&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s sex&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">eucalyptus</span>   <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span><span class="o">.</span><span class="n">koala</span> <span class="o">/</span> <span class="s">&quot;eucalyptus&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">many</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s trees&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// facts representing the schema to be provisioned</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">txData</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="n">eucalyptus</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Provision Schema by just accumulating all txData</span>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">SexSchema</span><span class="o">.</span><span class="n">txData</span> <span class="o">++</span>
</span><span class='line'>  <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">txData</span> <span class="o">++</span>
</span><span class='line'>  <span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">txData</span>
</span><span class='line'><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing complicated, isn&#8217;t it?</p>

<p>Exactly the same as writing Clojure schema but in Scala&#8230;</p>

<br/>


<h1>Datomisca type-safe schema</h1>

<p>Datomisca takes advantage of Scala type-safety to enhance Datomic schema attribute and make them static-typed. Have a look at Datomisca <code>Attribute</code> definition:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Attribute</span><span class="o">[</span><span class="kt">DD</span> <span class="k">&lt;:</span> <span class="kt">DatomicData</span>, <span class="kt">Card</span> <span class="k">&lt;:</span> <span class="kt">Cardinality</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So an <code>Attribute</code> is typed by 2 parameters:</p>

<ul>
<li>a <code>DatomicData</code> type</li>
<li>a <code>Cardinality</code> type</li>
</ul>


<p>So when you define a schema attribute using <em>Datomisca</em> API, the compiler also infers those types.</p>

<p>Take this example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">name</span>  <span class="k">=</span> <span class="nc">Attribute</span><span class="o">(</span><span class="n">ns</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="nc">SchemaType</span><span class="o">.</span><span class="n">string</span><span class="o">,</span> <span class="nc">Cardinality</span><span class="o">.</span><span class="n">one</span><span class="o">).</span><span class="n">withDoc</span><span class="o">(</span><span class="s">&quot;Koala&#39;s name&quot;</span><span class="o">).</span><span class="n">withUnique</span><span class="o">(</span><span class="nc">Unique</span><span class="o">.</span><span class="n">value</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>SchemaType.string</code> implies this is a <code>Attribute[DString, _]</code></li>
<li><code>Cardinality.one</code> implies this is a `Attribute[_, Cardinality.one]</li>
</ul>


<p>So <code>name</code> is a <code>Attribute[DString, Cardinality.one]</code></p>

<p>In the same way:</p>

<ul>
<li><code>age</code> is <code>Attribute[DLong, Cardinality.one]</code></li>
<li><code>sex</code> is <code>Attribute[DRef, Cardinality.one]</code></li>
<li><code>eucalyptus</code> is <code>Attribute[DRef, Cardinality.many]</code></li>
</ul>


<blockquote><p>As you can imagine, using this type-safe schema attributes, Datomisca can ensure consistency between the Datomic schema and the types manipulated in Scala.</p></blockquote>

<br/>


<h2>Taking advantage of type-safe schema</h2>

<h3>Checking types when creating facts</h3>

<blockquote><p>Based on the typed attribute, the compiler can help us a lot to validate that we give the right type for the right attribute.</p></blockquote>

<p>Schema facilities are extensions of basic Datomisca so you must import following to use them:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">DatomicMapping._</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a code sample:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// correct tree with right types</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree58</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="mi">5L</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">8L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">tree58</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/species</span> <span class="kt">:species/swamp_gum</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/row</span> <span class="err">5</span>
</span><span class='line'>  <span class="kt">:eucalyptus/col</span> <span class="err">8</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000000</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// incorrect tree with a string instead of a long for row</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree58</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">8L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">18</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">could</span> <span class="kt">not</span> <span class="kt">find</span> <span class="kt">implicit</span> <span class="kt">value</span> <span class="kt">for</span> <span class="kt">parameter</span> <span class="kt">attrC:</span>
</span><span class='line'>  <span class="n">datomisca</span><span class="o">.</span><span class="nc">Attribute2PartialAddEntityWriter</span><span class="o">[</span><span class="kt">datomisca.DLong</span>,<span class="kt">datomisca.CardinalityOne.</span><span class="k">type</span>,<span class="kt">String</span><span class="o">]</span>
</span><span class='line'>         <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span></code></pre></td></tr></table></div></figure>


<p>In second case, compiling fails because <code>DLong =&gt; String</code> doesn&#8217;t exist.</p>

<p>In first case, it works because <code>DLong =&gt; Long</code> is valid.</p>

<br/>


<h3>Checking types when getting fields from Datomic entities</h3>

<p>First of all, let&#8217;s create our first little Koala named <em>Rose</em> which loves feeding from 2 eucalyptus trees.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree58</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">SWAMP_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="mi">5L</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">8L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">tree74</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/species</span> <span class="kt">:species/swamp_gum</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/row</span> <span class="err">5</span>
</span><span class='line'>  <span class="kt">:eucalyptus/col</span> <span class="err">8</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000002</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree74</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">species</span> <span class="o">-&gt;</span> <span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="nc">RIVER_RED_GUM</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">row</span>     <span class="o">-&gt;</span> <span class="mi">7L</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">EucalyptusSchema</span><span class="o">.</span><span class="n">col</span>     <span class="o">-&gt;</span> <span class="mi">4L</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">tree74</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/species</span> <span class="kt">:species/river_red_gum</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">eucalyptus/row</span> <span class="err">7</span>
</span><span class='line'>  <span class="kt">:eucalyptus/col</span> <span class="err">4</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000004</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">rose</span> <span class="k">=</span> <span class="nc">SchemaEntity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="nc">Props</span><span class="o">()</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">name</span>        <span class="o">-&gt;</span> <span class="s">&quot;rose&quot;</span> <span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">age</span>         <span class="o">-&gt;</span> <span class="mi">3L</span> <span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">sex</span>         <span class="o">-&gt;</span> <span class="nc">SexSchema</span><span class="o">.</span><span class="nc">FEMALE</span><span class="o">.</span><span class="n">ref</span> <span class="o">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">eucalyptus</span>  <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="nc">DRef</span><span class="o">(</span><span class="n">tree58</span><span class="o">.</span><span class="n">id</span><span class="o">),</span> <span class="nc">DRef</span><span class="o">(</span><span class="n">tree74</span><span class="o">.</span><span class="n">id</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">rose</span><span class="k">:</span> <span class="kt">datomisca.AddEntity</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/eucalyptus</span> <span class="o">[</span><span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000001</span><span class="o">]</span>, <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000002</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/name</span> <span class="err">&quot;</span><span class="kt">rose</span><span class="err">&quot;</span>
</span><span class='line'>  <span class="kt">:db/id</span> <span class="k">#</span><span class="kt">db/id</span><span class="o">[</span><span class="kt">:db.part/user</span> <span class="kt">-</span><span class="err">1000003</span><span class="o">]</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/sex</span> <span class="kt">:sex/female</span>
</span><span class='line'>  <span class="k">:</span><span class="kt">koala/age</span> <span class="err">3</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s provision those koala &amp; trees into Datomic and retrieve real entity corresponding to our little Rose kitty.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">tree58</span><span class="o">,</span> <span class="n">tree74</span><span class="o">,</span> <span class="n">rose</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">realRose</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">resolveEntity</span><span class="o">(</span><span class="n">tx</span><span class="o">,</span> <span class="n">rose</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally let&#8217;s take advantage of typed schema attribute to access safely to fiels of the entity:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">maybeRose</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">tree58</span><span class="o">,</span> <span class="n">tree74</span><span class="o">,</span> <span class="n">rose</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">realRose</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">resolveEntity</span><span class="o">(</span><span class="n">tx</span><span class="o">,</span> <span class="n">rose</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">age</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">age</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sex</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">sex</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">eucalyptus</span> <span class="k">=</span> <span class="n">realRose</span><span class="o">(</span><span class="nc">KoalaSchema</span><span class="o">.</span><span class="n">eucalyptus</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="n">eucalyptus</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">maybeRose</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">Long</span>, <span class="kt">Long</span>, <span class="kt">Set</span><span class="o">[</span><span class="kt">Long</span><span class="o">])]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">49</span><span class="n">f454d6</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s important here is that you get a <code>(String, Long, Long, Set[Long])</code> which means the compiler was able to infer the right types from the Schema Attribute&#8230;</p>

<p>Greattt!!!</p>

<p>Ok that&#8217;s all for today!</p>

<p>Next article about an extension Datomisca provides for convenience : mapping Datomic entities to Scala structures such as case-classes or tuples. We don&#8217;t believe this is really the philosophy of Datomic in which atomic operations are much more interesting. But sometimes it&#8217;s convenient when you want to have data abstraction layer&#8230;</p>

<p>Have KoalaFun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shapelaysson = Shapeless + Play-Json ]]></title>
    <link href="http://www.mandubian.com/2013/02/27/shapelaysson/"/>
    <updated>2013-02-27T00:00:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/27/shapelaysson</id>
    <content type="html"><![CDATA[<p>Do you like <a href="https://github.com/milessabin/shapeless">Shapeless</a>, this great API developed by Miles Sabin studying generic/polytypic programming in Scala?</p>

<p>Do you like <a href="https://github.com/mandubian/play-json-alone">Play-json</a>, the Play Json 2.1 Json API developed for Play 2.1 framework and now usable as stand-alone module providing functional &amp; typesafe Json validation and Scala conversion?</p>

<br/>


<h4>Here is <strong>Shapelaysson</strong> an API interleaving Play-Json with Shapeless to be able to <strong>manipulate Json from/to Shapeless HList</strong></h4>

<p><em>HList are heterogenous polymorphic lists able to contain different types of data and able to keep tracks of these types</em></p>

<br/>


<blockquote><p><a href="https://github.com/mandubian/shapelaysson/">Shapelaysson</a> is a Github project with test/samples</p></blockquote>

<br/>


<blockquote><p><code>Shapelaysson</code> takes part in my reflexions around manipulating pure data structures from/to JSON.</p></blockquote>

<h2>A few pure Json from/to HList samples</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">shapeless._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">HList._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Tuples._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">shapelaysson._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates + converts a JsArray into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">foo</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates + converts a JsObject into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span>
</span><span class='line'><span class="n">res3</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">toto</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates + converts imbricated JsObject into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;foofoo&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;barbar1&quot;</span> <span class="o">-&gt;</span> <span class="mf">123.45</span><span class="o">,</span> <span class="s">&quot;barbar2&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;tutu&quot;</span><span class="o">),</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;bar&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;barbar&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;blabla&quot;</span><span class="o">)</span>
</span><span class='line'>     <span class="o">|</span>   <span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="o">(</span><span class="kt">Float</span> <span class="kt">::</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">HNil</span><span class="o">)</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="o">(</span><span class="kt">Int</span> <span class="kt">::</span> <span class="kt">Boolean</span> <span class="kt">::</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">HNil</span><span class="o">)</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span>
</span><span class='line'><span class="n">res4</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Float</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.HNil</span><span class="o">]]</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Int</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Boolean</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">toto</span> <span class="o">::</span> <span class="mf">123.45</span> <span class="o">::</span> <span class="n">tutu</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="kc">true</span> <span class="o">::</span> <span class="n">blabla</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates with ERROR JsArray into HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span> <span class="nc">JsError</span><span class="o">(</span><span class="s">&quot;validate.error.expected.jsnumber&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">23</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">value</span> <span class="kt">must</span> <span class="kt">is</span> <span class="kt">not</span> <span class="kt">a</span> <span class="kt">member</span> <span class="kt">of</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span>
</span><span class='line'>                    <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">123L</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span> <span class="nc">JsError</span><span class="o">(</span><span class="s">&quot;validate.error.expected.jsnumber&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// converts HList to JsValue</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="mf">123.45F</span> <span class="o">::</span> <span class="s">&quot;tutu&quot;</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">)</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">[</span><span class="err">123</span><span class="kt">.</span><span class="err">44999694824219</span>,<span class="err">&quot;</span><span class="kt">tutu</span><span class="err">&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A few Json Reads/Writes[HList] samples</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.functional.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a Reads[ String :: Long :: (String :: Boolean :: HNil) :: HNil]</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nc">HListReads2</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;toto&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>      <span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>        <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;alpha&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>        <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;beta&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span>
</span><span class='line'>     <span class="o">|</span>      <span class="o">).</span><span class="n">tupled</span><span class="o">.</span><span class="n">hlisted</span>
</span><span class='line'>     <span class="o">|</span>    <span class="o">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">).</span><span class="n">tupled</span><span class="o">.</span><span class="n">hlisted</span>
</span><span class='line'><span class="nc">HListReads2</span><span class="k">:</span> <span class="kt">play.api.libs.json.Reads</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Boolean</span>,<span class="kt">shapeless.HNil</span><span class="o">]]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]]</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">Reads$$anon$8</span><span class="k">@</span><span class="mi">7</span><span class="n">e4a09ee</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// validates/converts JsObject to HList</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;foo&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;bar&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>   <span class="s">&quot;toto&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;alpha&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;chboing&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">|</span>      <span class="s">&quot;beta&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span>
</span><span class='line'>     <span class="o">|</span>   <span class="o">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">).</span><span class="n">validate</span><span class="o">(</span><span class="nc">HListReads2</span><span class="o">)</span>
</span><span class='line'><span class="n">res7</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Boolean</span>,<span class="kt">shapeless.HNil</span><span class="o">]]</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">JsSuccess</span><span class="o">(</span><span class="n">toto</span> <span class="o">::</span> <span class="mi">123</span> <span class="o">::</span> <span class="n">chboing</span> <span class="o">::</span> <span class="kc">true</span> <span class="o">::</span> <span class="nc">HNil</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create a Writes[String :: Long :: HNil]</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">implicit</span> <span class="k">val</span> <span class="nc">HListWrites</span><span class="k">:</span> <span class="kt">Writes</span><span class="o">[</span> <span class="kt">String</span> <span class="kt">::</span> <span class="kt">Long</span> <span class="kt">::</span> <span class="kt">HNil</span> <span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>     <span class="o">|</span>         <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;foo&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>     <span class="o">|</span>         <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;bar&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span><span class='line'>     <span class="o">|</span>       <span class="o">).</span><span class="n">tupled</span><span class="o">.</span><span class="n">hlisted</span>
</span><span class='line'><span class="nc">HListWrites</span><span class="k">:</span> <span class="kt">play.api.libs.json.Writes</span><span class="o">[</span><span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">shapeless.::</span><span class="o">[</span><span class="kt">Long</span>,<span class="kt">shapeless.HNil</span><span class="o">]]]</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">Writes$$anon$5</span><span class="k">@</span><span class="mi">7</span><span class="n">c9d07e2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// writes a HList to JsValue</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="s">&quot;toto&quot;</span> <span class="o">::</span> <span class="mi">123L</span> <span class="o">::</span> <span class="nc">HNil</span><span class="o">)</span>
</span><span class='line'><span class="n">res8</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;foo&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">toto</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;bar&quot;</span><span class="k">:</span><span class="err">123</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Adding shapelaysson in your dependencies</h2>

<p>In your <code>Build.scala</code>, add:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">sbt._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Keys._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ApplicationBuild</span> <span class="k">extends</span> <span class="nc">Build</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">mandubianRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/releases/&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">sonatypeRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;Sonatype OSS Releases&quot;</span> <span class="n">at</span> <span class="s">&quot;http://oss.sonatype.org/content/repositories/releases/&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Sonatype OSS Snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;http://oss.sonatype.org/content/repositories/snapshots/&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">playJsonAlone</span> <span class="k">=</span> <span class="nc">Project</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildName</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">settings</span> <span class="k">=</span> <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildSettings</span> <span class="o">++</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>      <span class="n">resolvers</span> <span class="o">++=</span> <span class="n">mandubianRepo</span> <span class="o">++</span> <span class="n">sonatypeRepo</span><span class="o">,</span>
</span><span class='line'>      <span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;org.mandubian&quot;</span>  <span class="o">%%</span> <span class="s">&quot;shapelaysson&quot;</span>  <span class="o">%</span> <span class="s">&quot;0.1-SNAPSHOT&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;org.specs2&quot;</span>     <span class="o">%%</span> <span class="s">&quot;specs2&quot;</span>        <span class="o">%</span> <span class="s">&quot;1.13&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;junit&quot;</span>           <span class="o">%</span> <span class="s">&quot;junit&quot;</span>         <span class="o">%</span> <span class="s">&quot;4.8&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More to come maybe in this draft project&#8230;
Suggestions are welcome too</p>

<p>Have Fun :: HNil!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being aware Scala 2.10.0 Futures conceal Fatal exceptions]]></title>
    <link href="http://www.mandubian.com/2013/02/22/scala-future-fatal-exception/"/>
    <updated>2013-02-22T14:14:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/22/scala-future-fatal-exception</id>
    <content type="html"><![CDATA[<p>A short article to talk about <strong>an interesting issue concerning Scala 2.10.0 Future that might interest you</strong>.</p>

<div class="well">
<h3>Summary</h3><br/>
<p>When a <code>Fatal</code> exception is thrown in your <code>Future</code> callback, it&#8217;s not caught by the <code>Future</code> and is thrown to the provided <code>ExecutionContext</code>.</p>
<p><i>But the current default Scala global <code>ExecutionContext</code> doesn&#8217;t register an <code>UncaughtExceptionHandler</code> for these fatal exceptions and your <code>Future</code> just hangs forever without notifying anything to anybody.</i></p>
</div>


<blockquote><p>This issue is well <a href="https://issues.scala-lang.org/browse/SI-7029">known</a> and a solution to the problem has already been <a href="https://github.com/scala/scala/pull/2044">merged</a> into branch 2.10.x. But this issue is present in Scala 2.10.0 so it&#8217;s interesting to keep this issue in mind IMHO. Let&#8217;s explain clearly about it.</p></blockquote>

<h2>Exceptions can be contained by Future</h2>

<p>Let&#8217;s write some stupid code with Futures.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.concurrent._</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Take default Scala global ExecutionContext which is a ForkJoin Thread Pool</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">global</span>
</span><span class='line'><span class="n">ec</span><span class="k">:</span> <span class="kt">scala.concurrent.ExecutionContextExecutor</span> <span class="o">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">ExecutionContextImpl</span><span class="k">@</span><span class="mi">15</span><span class="n">f445b7</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create an immediately redeemed Future with a simple RuntimeException</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="n">future</span><span class="o">(</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span> <span class="o">)(</span><span class="n">ec</span><span class="o">)</span>
</span><span class='line'><span class="n">f</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">27380357</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Access brutally the value to show that the Future contains my RuntimeException</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="n">res22</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">Failure</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">RuntimeException</span><span class="k">:</span> <span class="kt">foo</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use blocking await to get Future result</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="mi">2</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'><span class="n">warning</span><span class="k">:</span> <span class="kt">there</span> <span class="kt">were</span> <span class="err">1</span> <span class="kt">feature</span> <span class="kt">warnings</span><span class="o">;</span> <span class="n">re</span><span class="o">-</span><span class="n">run</span> <span class="k">with</span> <span class="o">-</span><span class="n">feature</span> <span class="k">for</span> <span class="n">details</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">RuntimeException</span><span class="k">:</span> <span class="kt">foo</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">14</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">14</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>You can see that a <code>Future</code> can contain an <code>Exception</code> (or more generally <code>Throwable</code>).</p></blockquote>

<br/>


<h2>Fatal Exceptions can&#8217;t be contained by Future</h2>

<p>If you look in <a href="https://github.com/scala/scala/blob/v2.10.0/src/library/scala/concurrent/Future.scala#L53">Scala 2.10.0 Future.scala</a>, in the scaladoc, you can find:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>* The following throwable objects are not contained in the future:
</span><span class='line'>* - `Error` - errors are not contained within futures
</span><span class='line'>* - `InterruptedException` - not contained within futures
</span><span class='line'>* - all `scala.util.control.ControlThrowable` except `NonLocalReturnControl` - not contained within futures</span></code></pre></td></tr></table></div></figure>


<p>and in the code, in several places, in <code>map</code> or <code>flatMap</code> for example, you can read:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">NonFatal</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">p</span> <span class="n">failure</span> <span class="n">t</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This means that every <code>Throwable</code> that is Fatal can&#8217;t be contained in the <code>Future.Failure</code>.</p></blockquote>

<br/>


<h2>What&#8217;s a <em>Fatal</em> Throwable?</h2>

<p>To define what&#8217;s fatal, let&#8217;s see what&#8217;s declared as non-fatal in <a href="http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/index.html#scala.util.control.NonFatal$">NonFatal ScalaDoc</a>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>* Extractor of non-fatal Throwables.  
</span><span class='line'>* Will not match fatal errors like VirtualMachineError  
</span><span class='line'>* (for example, OutOfMemoryError, a subclass of VirtualMachineError),  
</span><span class='line'>* ThreadDeath, LinkageError, InterruptedException, ControlThrowable, or NotImplementedError. 
</span><span class='line'>*
</span><span class='line'>* Note that [[scala.util.control.ControlThrowable]], an internal Throwable, is not matched by
</span><span class='line'>* `NonFatal` (and would therefore be thrown).</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Let&#8217;s consider Fatal exceptions are just critical errors that can&#8217;t be recovered in general.</p></blockquote>

<h2>So what&#8217;s the problem?</h2>

<p>It seems right not to catch fatal errors in the `Future, isn&#8217;t it?</p>

<p>But, look at following code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Let&#39;s throw a simple Fatal exception</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="n">future</span><span class="o">(</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">NotImplementedError</span><span class="o">()</span> <span class="o">)(</span><span class="n">ec</span><span class="o">)</span>
</span><span class='line'><span class="n">f</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">59747</span><span class="n">b17</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, the <code>Future</code> doesn&#8217;t contain the Fatal Exception as expected.</p>

<p><strong>But where is my Fatal Exception if it&#8217;s not caught??? No crash, notification or whatever?</strong></p>

<p>There should be an `UncaughtExceptionHandler at least notifying it!</p>

<br/>


<h2>The problem is in the default Scala <code>ExecutionContext</code>.</h2>

<p>As explained in this <a href="https://issues.scala-lang.org/browse/SI-7029">issue</a>, the exception is lost due to the implementation of the default global <code>ExecutionContext</code> provided in Scala.</p>

<p>This is a simple ForkJoin pool of threads but it has no <code>UncaughtExceptionHandler</code>. Have a look at code in <a href="https://github.com/scala/scala/blob/v2.10.0/src/library/scala/concurrent/impl/ExecutionContextImpl.scala#L72">Scala 2.10.0 ExecutionContextImpl.scala</a></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">ForkJoinPool</span><span class="o">(</span>
</span><span class='line'>        <span class="n">desiredParallelism</span><span class="o">,</span>
</span><span class='line'>        <span class="n">threadFactory</span><span class="o">,</span>
</span><span class='line'>        <span class="kc">null</span><span class="o">,</span> <span class="c1">//FIXME we should have an UncaughtExceptionHandler, see what Akka does</span>
</span><span class='line'>        <span class="kc">true</span><span class="o">)</span> <span class="c1">// Async all the way baby</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">NonFatal</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Here it&#8217;s quite clear: there is no registered `UncaughtExceptionHandler.</p>

<p>What&#8217;s the consequence?</p></blockquote>

<h2>Your Future hangs forever</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="mi">30</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'><span class="n">warning</span><span class="k">:</span> <span class="kt">there</span> <span class="kt">were</span> <span class="err">1</span> <span class="kt">feature</span> <span class="kt">warnings</span><span class="o">;</span> <span class="n">re</span><span class="o">-</span><span class="n">run</span> <span class="k">with</span> <span class="o">-</span><span class="n">feature</span> <span class="k">for</span> <span class="n">details</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">TimeoutException</span><span class="k">:</span> <span class="kt">Futures</span> <span class="kt">timed</span> <span class="kt">out</span> <span class="kt">after</span> <span class="o">[</span><span class="err">30</span> <span class="kt">seconds</span><span class="o">]</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="o">.</span><span class="n">ready</span><span class="o">(</span><span class="nc">Promise</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">96</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, you can wait as long as you want, the Future is never redeemed properly, it just hangs forever and you don&#8217;t even know that a Fatal Exception has been thrown.</p>

<p>As explained in the issue, please note, if you use a custom <code>ExecutionContext</code> based on <code>SingleThreadExecutor</code>, this issue doesn&#8217;t appear!</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">es</span> <span class="k">=</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Executors</span><span class="o">.</span><span class="n">newSingleThreadExecutor</span>
</span><span class='line'><span class="n">es</span><span class="k">:</span> <span class="kt">java.util.concurrent.ExecutorService</span> <span class="o">=</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Executors$FinalizableDelegatedExecutorService</span><span class="k">@</span><span class="mi">1</span><span class="n">e336f59</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">fromExecutorService</span><span class="o">(</span><span class="n">es</span><span class="o">)</span>
</span><span class='line'><span class="n">ec</span><span class="k">:</span> <span class="kt">scala.concurrent.ExecutionContextExecutorService</span> <span class="o">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">ExecutionContextImpl$$anon$1</span><span class="k">@</span><span class="mi">34</span><span class="n">f43dac</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">](</span><span class="k">throw</span> <span class="k">new</span> <span class="nc">NotImplementedError</span><span class="o">())(</span><span class="n">ec</span><span class="o">)</span>
</span><span class='line'><span class="nc">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;pool-1-thread-1&quot;</span> <span class="n">f</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">7</span><span class="n">d01f935</span>
</span><span class='line'><span class="n">scala</span><span class="o">.</span><span class="nc">NotImplementedError</span><span class="k">:</span> <span class="kt">an</span> <span class="kt">implementation</span> <span class="kt">is</span> <span class="kt">missing</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$line41</span><span class="o">.</span><span class="nc">$read$$iw$$iw$$iw$$iw$$iw$$iw$$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="nc">$line41</span><span class="o">.</span><span class="nc">$read$$iw$$iw$$iw$$iw$$iw$$iw$$anonfun$1</span><span class="o">.</span><span class="n">apply</span><span class="o">(&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">15</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p><strong>In Scala 2.10.0, if you have a Fatal Exception in a Future callback, your Future just trashes the Fatal Exception and hangs forever without notifying anything.</strong></p>

<p>Hopefully, due to this <a href="https://github.com/scala/scala/pull/2044">already merged PR</a>, in a future delivery of Scala 2.10.x, this problem should be corrected.</p>

<p>To finish, in the same old good <a href="https://issues.scala-lang.org/browse/SI-7029">issue</a>, Viktor Klang also raised the question of what should be considered as fatal or not:</p>

<blockquote><p>there&#8217;s a bigger topic at hand here, the one whether NotImplementedError, InterruptedException and ControlThrowable are to be considered fatal or not.</p></blockquote>

<p>Meanwhile, be aware and take care ;)</p>

<p>Have <code>Promise[NonFatal]</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Play2 SCALA JSON API Stand-alone]]></title>
    <link href="http://www.mandubian.com/2013/02/21/play-json-stand-alone/"/>
    <updated>2013-02-21T14:14:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/21/play-json-stand-alone</id>
    <content type="html"><![CDATA[<p>In a very recent <a href="https://github.com/playframework/Play20/pull/754">Pull Request</a>, `play-json has been made a stand-alone module in <a href="https://github.com/playframework/Play20">Play2.2-SNAPSHOT master</a> as play-iteratees.</p>

<p>It means:</p>

<ul>
<li>You can take Play2 Scala Json API as a stand-alone library and keep using Json philosophy promoted by <a href="http://www.playframework.org">Play Framework</a> anywhere.</li>
<li><code>play-json</code> module is stand-alone in terms of dependencies but is a part &amp; parcel of Play2.2 so it will evolve and follow Play2.x releases (and following versions) always ensuring full compatibility with play ecosystem.</li>
<li><code>play-json</code> module has 3 ultra lightweight dependencies:

<ul>
<li> <code>play-functional</code></li>
<li> <code>play-datacommons</code></li>
<li> <code>play-iteratees</code></li>
</ul>
</li>
</ul>


<p>These are pure Scala generic pieces of code from Play framework so no Netty or whatever dependencies in it.<br/>
You can then import <code>play-json</code> in your project without any fear of bringing unwanted deps.</p>

<p><code>play-json</code> will be released with future Play2.2 certainly so meanwhile, I provide:</p>

<ul>
<li>a build published in my <a href="https://github.com/mandubian/mandubian-mvn/">Maven Github repository</a></li>
<li>a sample project called <a href="https://github.com/mandubian/play-json-alone">play-json-alone</a></li>
</ul>


<br/>


<blockquote><p>Even if the version is <em>2.2-SNAPSHOT</em>, be aware that this is the same code as the one released in Play 2.1.0. This API has reached a good stability level. Enhancements and bug corrections will be brought to it but it&#8217;s production-ready right now.</p></blockquote>

<h2>Adding play-json 2.2-SNAPSHOT in your dependencies</h2>

<p>In your <code>Build.scala</code>, add:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">sbt._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Keys._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ApplicationBuild</span> <span class="k">extends</span> <span class="nc">Build</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">mandubianRepo</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Mandubian repository releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://github.com/mandubian/mandubian-mvn/raw/master/releases/&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">playJsonAlone</span> <span class="k">=</span> <span class="nc">Project</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildName</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">settings</span> <span class="k">=</span> <span class="nc">BuildSettings</span><span class="o">.</span><span class="n">buildSettings</span> <span class="o">++</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>      <span class="n">resolvers</span> <span class="o">++=</span> <span class="n">mandubianRepo</span><span class="o">,</span>
</span><span class='line'>      <span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;play&quot;</span>        <span class="o">%%</span> <span class="s">&quot;play-json&quot;</span> <span class="o">%</span> <span class="s">&quot;2.2-SNAPSHOT&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;org.specs2&quot;</span>  <span class="o">%%</span> <span class="s">&quot;specs2&quot;</span> <span class="o">%</span> <span class="s">&quot;1.13&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;junit&quot;</span>        <span class="o">%</span> <span class="s">&quot;junit&quot;</span> <span class="o">%</span> <span class="s">&quot;4.8&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using play-json 2.2-SNAPSHOT in your code:</h2>

<p>Just import the following and get everything from Play2.1 Json API:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.functional._</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">EucalyptusTree</span><span class="o">(</span><span class="n">col</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">row</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">EucalyptusTree</span><span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">fmt</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">format</span><span class="o">[</span><span class="kt">EucalyptusTree</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Koala</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">home</span><span class="k">:</span> <span class="kt">EucalyptusTree</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Koala</span><span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">fmt</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">format</span><span class="o">[</span><span class="kt">Koala</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">kaylee</span> <span class="k">=</span> <span class="nc">Koala</span><span class="o">(</span><span class="s">&quot;kaylee&quot;</span><span class="o">,</span> <span class="nc">EucalyptusTree</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">23</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">prettyPrint</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">kaylee</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Json</span><span class="o">.</span><span class="n">fromJson</span><span class="o">[</span><span class="kt">Koala</span><span class="o">](</span>
</span><span class='line'>  <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;kaylee&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;home&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;col&quot;</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;row&quot;</span> <span class="o">-&gt;</span> <span class="mi">23</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Using <code>play-json</code>, you can get some bits of <a href="http://www.playframework.org">Play Framework</a> pure Web philosophy.<br/>
Naturally, to unleash its full power, don&#8217;t hesitate to dive into <a href="http://www.playframework.org">Play Framework</a> and discover 100% full Web Reactive Stack ;)</p></blockquote>

<p>Thanks a lot to Play Framework team for promoting play-json as stand-alone module!<br/>
Lots of interesting features incoming soon ;)</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datomisca Delicatessen - The Scala Reactive Cherry on the Datomic Cake of Facts]]></title>
    <link href="http://www.mandubian.com/2013/02/18/datomisca-fact-operations/"/>
    <updated>2013-02-18T14:14:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/18/datomisca-fact-operations</id>
    <content type="html"><![CDATA[<p>Let&#8217;s go on unveiling <a href="http://pellucidanalytics.github.com/datomisca/index.html">Datomisca</a> a bit more.</p>

<p>Remember Datomisca is an opensource Scala API (sponsored by <a href="http://www.pellucidanalytics.com">Pellucid</a> and <a href="http://www.zenexity.com">Zenexity</a>) trying to enhance <a href="http://www.datomic.com">Datomic</a> experience for Scala developers.</p>

<p>After evoking <a href="./2013-02-10-datomisca-query.html">queries compiled by Scala macros in previous article</a>, I&#8217;m going to describe how <em>Datomisca</em> allows to create Datomic fact operations in a programmatic way and sending them to Datomic transactor using asynchronous/non-blocking API based on <em>Scala 2.10 Future/ExecutionContext</em>.</p>

<br/>


<h1><a name="datomic-facts">Facts about Datomic</a></h1>

<p>First, let&#8217;s remind a few facts about Datomic:</p>

<blockquote><p>Datomic is a <a href="http://docs.datomic.com/query.html">immutable fact-oriented distributed schema-constrained database</a></p></blockquote>

<p>It means:</p>

<h4>Datomic stores very small units of data called <em>facts</em></h4>

<p>Yes no tables, documents or even columns in Datomic. Everything stored in it is a very small fact.</p>

<br/>


<h4><em>Fact</em> is the atomic unit of data</h4>

<p>Facts are represented by the following tuple called <strong>Datom</strong></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">datom</span> <span class="nb">= </span><span class="p">[</span><span class="nv">entity</span> <span class="nv">attribute</span> <span class="nv">value</span> <span class="nv">tx</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>entity</em> is an ID and several facts can share the same ID making them facts of the same entity. <strong>Here you can see that an entity is very loose concept in Datomic.</strong></li>
<li><em>attribute</em> is just a namespaced keyword : <code>:person/name</code> which is generally constrained by a typed schema attribute. <strong>The namespace can be used to logically identify an entity like <em>&#8220;person&#8221;</em> by regrouping several attributes in the same namespace.</strong></li>
<li><em>value</em> is the value of this attribute for this entity at this instant</li>
<li><em>tx</em> uniquely identifies the <a href="http://docs.datomic.com/glossary.html#sec-35">transaction</a> in which this fact was inserted. Naturally a transaction is associated with a time.</li>
</ul>


<br/>


<h4><em>Facts</em> are immutable &amp; temporal</h4>

<p>It means that:</p>

<ul>
<li><strong>You can&#8217;t change the past</strong><br/>
Facts are immutable ie you can&#8217;t mutate a fact as other databases generally do: Datomic always creates a new version of the fact with a new value.</li>
<li><strong>Datomic always grows</strong><br/>
If you add more facts, nothing is deleted so the DB grows. Naturally you can truncate a DB, export it and rebuild a new smaller one.</li>
<li><strong>You can foresee a possible future</strong><br/>
From your present, you can temporarily add facts to Datomic without committing them on central storage thus simulating a possible future.</li>
</ul>


<br/>


<h4>Reads/writes are distributed across different components</h4>

<ul>
<li><strong>One Storage service</strong> storing physically the data (Dynamo DB/Infinispan/Postgres/Riak/&#8230;)</li>
<li><strong>Multiple Peers</strong> (generally local to your app instances) behaving like high-speed synchronized cache obfuscating all the local data storage and synchro mechanism and providing the <em>Datalog</em> queries.</li>
<li><strong>One (or several) transactor(s)</strong> centralizing the write mechanism allowing ACID transactions and notifying peers about those evolutions.</li>
</ul>


<p>For more info about architecture, go to <a href="http://docs.datomic.com/architecture.html">this page</a></p>

<br/>


<h4>Immutability means known DB state is always consistent</h4>

<p>You might not be up-to-date with central data storage as Datomic is distributed, you can even lose connection with it but the data you know are always consistent because nothing can be mutated.</p>

<blockquote><p>This immutability concept is one of the most important to understand in Datomic.</p></blockquote>

<br/>


<h4>Schema contrains entity attributes</h4>

<p>Datomic allows to define that a given attribute must :</p>

<ul>
<li>be of <strong>given type</strong> : <code>String</code> or <code>Long</code> or <code>Instant</code> etc…</li>
<li>have <strong>cardinality</strong> (<code>one</code> or <code>many</code>)</li>
<li>be <strong>unique</strong> or not</li>
<li>be <strong>fullsearchable</strong> or not</li>
<li>be <strong>documented</strong></li>
<li>…</li>
</ul>


<p>It means that if you try to insert a fact with an attribute and a value of the wrong type, Datomic will refuse it.</p>

<p>Datomic entity can also reference other entities in Datomic providing relations in Datomic (even if Datomic is not RDBMS). One interesting thing to know is that <strong>all relations in Datomic are bidirectional.</strong></p>

<blockquote><p>I hope you immediately see the link between these typed schema attributes and potential Scala type-safe features…</p></blockquote>

<br/>


<blockquote><p><strong>Author&#8217;s note : Datomic is more about <em>evolution</em> than mutation</strong><br/>
<em>I&#8217;ll let you meditate this sentence linked to theory of evolution ;)</em></p></blockquote>

<br/>


<h1><a name="datomic-ops">Datomic operations</a></h1>

<p>When you want to create a new fact in Datomic, you send a write operation request to the <code>Transactor</code>.</p>

<h2><a name="datomic-ops-basic">Basic operations</a></h2>

<p>There are 2 basic operations:</p>

<h4>Add a Fact</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="nv">entity-id</span> <span class="nv">attribute</span> <span class="nv">value</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding a fact for the same entity will <em>NOT update</em> existing fact but create a new fact with same <em>entity-id</em> and a new <em>tx</em>.</p>

<h4>Retract a Fact</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db/retract</span> <span class="nv">entity-id</span> <span class="nv">attribute</span> <span class="nv">value</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Retracting a fact doesn&#8217;t erase any fact but just tells: <em>&#8220;for this entity-id, from now, there is no more this attribute&#8221;</em></p>

<p>You might wonder why providing the value when you want to remove a fact? This is because an attribute can have a <em>MANY</em> cardinality in which case you want to remove just a value from the set of values.</p>

<h2><a name="datomic-ops-entity">Entity operations</a></h2>

<p>In Datomic, you often manipulate groups of facts identifying an entity. An entity has no physical existence in Datomic but is just a group of facts having the same <em>entity-id</em>. Generally, the attributes constituting an entity are logically grouped under the same namespace (<code>:person/name</code>, <code>:person/age</code>…) but this is not mandatory at all.</p>

<p>Datomic provides 2 operations to manipulate entities directly</p>

<h4>Add Entity</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span> <span class="mi">-1</span><span class="p">]</span>
</span><span class='line'>  <span class="ss">:person/name</span> <span class="s">&quot;Bob&quot;</span>
</span><span class='line'>  <span class="ss">:person/spouse</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span> <span class="mi">-2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually this is equivalent to 2 <em>Add-Fact</em> operations:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">id</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span> <span class="mi">-1</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="nv">id</span> <span class="ss">:person/name</span> <span class="s">&quot;Bob&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="nv">id</span> <span class="ss">:person/age</span> <span class="mi">30</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Retract Entity</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db.fn/retractEntity</span> <span class="nv">entity-id</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2><a name="datomic-ops-ident">Special case of identified values</a></h2>

<p>In Datomic, there are special entities built using the special attribute <code>:db/ident</code> of type <code>Keyword</code> which are said to be <em>identified by the given keyword</em>.</p>

<p>There are created as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:person.characters/clever</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="ss">:db/add</span> <span class="o">#</span><span class="nv">db/id</span><span class="p">[</span><span class="ss">:db.part/user</span><span class="p">]</span> <span class="ss">:db/ident</span> <span class="ss">:person.characters/dumb</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you use <code>:person.characters/clever</code> or <code>:person.characters/dumb</code>, it references directly one of those 2 entities without using their ID.</p>

<p>You can see those identified entities as enumerated values also.</p>

<p>Now that you know how it works in Datomic, let&#8217;s go to <em>Datomisca</em>!</p>

<br/>


<h1><a name="datomisca-ops">Datomisca programmatic operations</a></h1>

<p>Datomisca&#8217;s preferred way to build Fact/Entity operations is programmatic because it provides more flexibility to Scala developers.
Here are the translation of previous operations in Scala:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a Namespace</span>
</span><span class='line'><span class="k">val</span> <span class="n">person</span> <span class="k">=</span> <span class="nc">Namespace</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a add-fact operation </span>
</span><span class='line'><span class="c1">// It creates the datom (id keyword value _) from</span>
</span><span class='line'><span class="c1">//   - a temporary id (or a final long ID)</span>
</span><span class='line'><span class="c1">//   - the couple `(keyword, value)`</span>
</span><span class='line'><span class="k">val</span> <span class="n">addFact</span> <span class="k">=</span> <span class="nc">Fact</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Bob&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a retract-fact operation</span>
</span><span class='line'><span class="k">val</span> <span class="n">retractFact</span> <span class="k">=</span> <span class="nc">Fact</span><span class="o">.</span><span class="n">retract</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span><span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">123L</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates identified values</span>
</span><span class='line'><span class="k">val</span> <span class="n">violent</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">character</span> <span class="o">/</span> <span class="s">&quot;violent&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">dumb</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">character</span> <span class="o">/</span> <span class="s">&quot;dumb&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a add-entity operation</span>
</span><span class='line'><span class="k">val</span> <span class="n">addEntity</span> <span class="k">=</span> <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Bob&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">30L</span><span class="o">,</span>
</span><span class='line'>  <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;characters&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">violent</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">dumb</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a retract-entity operation from real Long ID of the entity</span>
</span><span class='line'><span class="k">val</span> <span class="n">retractEntity</span> <span class="k">=</span> <span class="nc">Entity</span><span class="o">.</span><span class="n">retract</span><span class="o">(</span><span class="mi">3L</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">addFact</span><span class="o">,</span> <span class="n">retractFact</span><span class="o">,</span> <span class="n">addEntity</span><span class="o">,</span> <span class="n">retractEntity</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that:</p>

<ul>
<li><code>person / "name"</code> creates the keyword <code>:person/name</code> from namespace <code>person</code></li>
<li><code>DId(Partition.USER)</code> generates a temporary Datomic Id in Partition <code>USER</code>. <em>Please note that you can create your own partition too</em>.</li>
<li><code>violent.ref</code> is used to access the keyword reference of the <em>identified entity</em>.</li>
<li><code>ops = Seq(…)</code> represents a collection of operations to be sent to <em>transactor</em>.</li>
</ul>


<br/>


<h1><a name="datomisca-macro-ops">Datomisca Macro operations</a></h1>

<p>Remember the way Datomisca dealt with query by parsing/validating Datalog/Clojure queries at compile-time using Scala macros?</p>

<p>You can do the same in Datomisca with operations:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">weak</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span> <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span><span class="o">,</span> <span class="s">&quot;weak&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">val</span> <span class="n">dumb</span> <span class="k">=</span> <span class="nc">AddIdent</span><span class="o">(</span> <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span><span class="o">,</span> <span class="s">&quot;dumb&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">ops</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">   [:db/add #db/id[:db.part/user] :db/ident :region/n]</span>
</span><span class='line'><span class="s">   [:db/add \${DId(Partition.USER)} :db/ident :region/n]</span>
</span><span class='line'><span class="s">   [:db/retract #db/id[:db.part/user] :db/ident :region/n]</span>
</span><span class='line'><span class="s">   [:db/retractEntity 1234]</span>
</span><span class='line'><span class="s">   {</span>
</span><span class='line'><span class="s">      :db/id \${id}</span>
</span><span class='line'><span class="s">      :person/name &quot;toto&quot;</span>
</span><span class='line'><span class="s">      :person/age 30</span>
</span><span class='line'><span class="s">      :person/characters [ \$weak \$dumb ]</span>
</span><span class='line'><span class="s">   }</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It compiles what&#8217;s between <code>"""…"""</code> at compile-time and tells you if there are errors and then it builds Scala corresponding operations.</p>

<p>Ok it&#8217;s cool but if you look better, you&#8217;ll see there is some sugar in this Clojure code:</p>

<ul>
<li><code>\${DId(Partition.USER)}</code></li>
<li><code>\$weak</code></li>
<li><code>\$dumb</code></li>
</ul>


<p><strong>You can use Scala variables and inject them into Clojure operations at compile-time as you do for Scala string interpolation</strong></p>

<blockquote><p>For Datomic queries, the compiled way is really natural but we tend to prefer programmatic way to build operations because it feels to be much more &#8220;scala-like&#8221; after experiencing both methods.</p></blockquote>

<h2><a name="datomisca-parse-ops">Datomisca runtime parsing</a></h2>

<p>There is a last way to create operations by parsing at runtime a String and throwing an exception if the syntax is not valid.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">parseOps</span><span class="o">(</span><span class="s">&quot;&quot;&quot; … &quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>It&#8217;s very useful if you have existing Datomic Clojure files (containing schema or bootstrap data) that you want to load into Datomic.</p></blockquote>

<br/>


<h1><a name="datomisca-transact">Datomisca reactive transactions</a></h1>

<p>Last but not the least, let&#8217;s send those operations to Datomic Transactor.</p>

<p>In its Java API, Datomic Connection provides a <code>transact</code> asynchronous API based on a <code>ListenableFuture</code>. This API can be enhanced in Scala because Scala provides much more evolved asynchronous/non-blocking facilities than Java based on Scala 2.10 <code>Future</code>/<code>ExecutionContext</code>.</p>

<p><code>Future</code> allows to implement your asynchronous call using continuation style based on Scala classic <code>map/flatMap</code> methods.
<code>ExecutionContext</code> is a great tool allowing to specify in which pool of threads your asynchronous call will be executed making it non-blocking with respect to your current execution context (or thread).</p>

<blockquote><p>This new feature is really important when you work with reactive API such as Datomisca or Play too so don&#8217;t hesitate to study it further.</p></blockquote>

<p>Let&#8217;s look at code directly to show how it works in <em>Datomisca</em>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// don&#39;t forget to bring an ExecutionContext in your scope… </span>
</span><span class='line'><span class="c1">// Here is default Scala ExecutionContext which is a simple pool of threads with one thread per core by default</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates an URI</span>
</span><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;datomic:mem://mydatomicdn&quot;</span>
</span><span class='line'><span class="c1">// creates implicit connection</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">connect</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a few operations</span>
</span><span class='line'><span class="k">val</span> <span class="n">ops</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">addFact</span><span class="o">,</span> <span class="n">retractFact</span><span class="o">,</span> <span class="n">addEntity</span><span class="o">,</span> <span class="n">retractEntity</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span><span class="n">ops</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">:</span> <span class="kt">TxReport</span> <span class="o">=&gt;</span>
</span><span class='line'>   <span class="c1">// do something</span>
</span><span class='line'>   <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// return a value of type R (anything you want)</span>
</span><span class='line'>   <span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">R</span> <span class="o">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">res</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Another example by building ops directly in the transact call and using flatMap</span>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">id</span><span class="o">)(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">30L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">weak</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">dumb</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;tutu&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">54L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">violent</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">clever</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">))(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;tata&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">23L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">weak</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">clever</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">flatMap</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span> <span class="k">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">res</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Please note the <code>tx: TxReport</code> which is a structure returned by Datomic transactor containing information about last transaction.</p></blockquote>

<h1><a name="datomisca-resolve">Datomisca resolving Real ID</a></h1>

<p>In all samples, we create operations based on temporary ID built by Datomic in a given partition.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But once you have inserted a fact or an entity into Datomic, you need to resolve the real final ID to use it further because the temporary ID is no more meaningful.</p>

<p>The final ID is resolved from the <code>TxReport</code> send back by Datomic transactor. This <code>TxReport</code> contains a map between temporary ID and final ID. Here is how you can use it in Datomisca:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">id1</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">id2</span> <span class="k">=</span> <span class="nc">DId</span><span class="o">(</span><span class="nc">Partition</span><span class="o">.</span><span class="nc">USER</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">transact</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">id1</span><span class="o">)(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;toto&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">30L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">weak</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">dumb</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="nc">Entity</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">id2</span><span class="o">)(</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;name&quot;</span>      <span class="o">-&gt;</span> <span class="s">&quot;tutu&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;age&quot;</span>       <span class="o">-&gt;</span> <span class="mi">54L</span><span class="o">,</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">/</span> <span class="s">&quot;character&quot;</span> <span class="o">-&gt;</span> <span class="nc">Set</span><span class="o">(</span><span class="n">violent</span><span class="o">.</span><span class="n">ref</span><span class="o">,</span> <span class="n">clever</span><span class="o">.</span><span class="n">ref</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">finalId1</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="n">resolve</span><span class="o">(</span><span class="n">id1</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">finalId2</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="n">resolve</span><span class="o">(</span><span class="n">id2</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// or</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">List</span><span class="o">(</span><span class="n">finalId1</span><span class="o">,</span> <span class="n">finalId2</span><span class="o">)</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">id1</span><span class="o">,</span> <span class="n">id2</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span> <span class="n">tx</span><span class="o">.</span><span class="n">resolve</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<div class="well">That&#8217;s all for now… Next articles about writing programmatic Datomic schema with Datomisca.</div>


<p>Have Promise[Fun]!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datomisca Delicatessen - Datomic queries coated in a thin layer of Scala]]></title>
    <link href="http://www.mandubian.com/2013/02/10/datomisca-query/"/>
    <updated>2013-02-10T13:13:00+01:00</updated>
    <id>http://www.mandubian.com/2013/02/10/datomisca-query</id>
    <content type="html"><![CDATA[<p>Last week, we have launched <a href="http://pellucidanalytics.github.com/datomisca/index.html">Datomisca</a>, our opensource Scala API trying to enhance <a href="http://www.datomic.com">Datomic</a> experience for Scala developers.</p>

<p>Datomic is great in Clojure because it is was made for it. Yet, we believe Scala can provide a very good platform for Datomic too because the functional concepts found in Clojure are also in Scala except that Scala is a compiled and statically typed language whereas Clojure is dynamic. Scala could also bring a few features on top of Clojure based on its features such as static typing, typeclasses, macros…</p>

<p>This article is the first of a serie of articles aiming at describing as shortly as possible specific features provided by Datomisca.
Today, let&#8217;s present how Datomisca enhances Datomic queries.</p>

<br/>


<h1><a name="datomic-query">Query in Datomic?</a></h1>

<p>Let&#8217;s take the same old example of a Person having :</p>

<ul>
<li>a name <code>String</code></li>
<li>a age <code>Long</code></li>
<li>a birth <code>Date</code></li>
</ul>


<p>So, how do you write a query in Datomic searching a person by its name?
Like that…</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="k">def</span> <span class="n">q</span> <span class="o">[</span> <span class="kt">:find</span> <span class="kt">?e</span>
</span><span class='line'>  <span class="kt">:in</span> <span class="kt">$</span> <span class="kt">?name</span>
</span><span class='line'>  <span class="kt">:where</span> <span class="o">[</span> <span class="kt">?e</span> <span class="kt">:person/name</span> <span class="kt">?name</span> <span class="o">]</span>
</span><span class='line'><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this is Clojure using Datalog rules.</p>

<p>In a summary, this query:</p>

<ul>
<li>accepts 2 inputs parameters:

<ul>
<li>a datasource <code>$</code></li>
<li>a name parameter <code>?name</code></li>
</ul>
</li>
<li>searches facts respecting datalog rule <code>[ ?e :person/name ?name ]</code>: a fact having attribute <code>:person/name</code> with value <code>?name</code></li>
<li>returns the ID of the found facts <code>?e</code></li>
</ul>


<br/>


<h2><a name="datomic-query-reminders">Reminders about Datomic queries</a></h2>

<h3>Query is a static data structure</h3>

<p>An important aspect of queries to understand in Datomic is that a query is purely a static data structure and not something functional. We could compare it to a prepared statement in SQL: build it once and reuse it as much as you need.</p>

<h3>Query has input/ouput parameters</h3>

<p>In previous example:</p>

<ul>
<li><code>:in</code> enumerates input parameters</li>
<li><code>:find</code> enumerates output parameters</li>
</ul>


<p>When executing this query, you must provide the right number of input parameters and you will retrieve the given number of output parameters.</p>

<br/>


<h1><a name="datomisca-query">Query in Datomisca?</a></h1>

<p>So now, how do you write the same query in Datomisca?</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">[ :find ?e</span>
</span><span class='line'><span class="s">  :in $ ?name</span>
</span><span class='line'><span class="s">  :where [ ?e :person/name ?name ] </span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I see you&#8217;re a bit disappointed: a query as a string whereas in Clojure, it&#8217;s a real data structure…</p>

<p>This is actually the way the Java API sends query for now. Moreover, using strings like implies potential bad practices such as building queries by concatenating strings which are often the origin of risks of code injection in SQL for example…</p>

<p>But in Scala we can do a bit better using new Scala 2.10 features : Scala macros.</p>

<p><strong>So, using Datomisca, when you write this code, in fact, the query string is parsed by a Scala macro:</strong></p>

<ul>
<li><strong>If there are any error, the compilation breaks showing where the error was detected.</strong></li>
<li><strong>If the query seems valid (with respect to our parser), the String is actually replaced by a AST representing this query as a data structure.</strong></li>
<li><strong>The input/output parameters are infered to determine their numbers.</strong></li>
</ul>


<blockquote><p>Please note that the compiled query is a simple immutable AST which could be manipulated as a Clojure query and re-used as many times as you want.</p></blockquote>

<h3>Example OK with single output</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">     [ :find ?e</span>
</span><span class='line'><span class="s">       :in $ ?name</span>
</span><span class='line'><span class="s">       :where [ ?e :person/name ?name ] </span>
</span><span class='line'><span class="s">     ]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">q</span><span class="k">:</span> <span class="kt">datomisca.TypedQueryAuto2</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span><span class="o">]</span> <span class="k">=</span> <span class="o">[</span> <span class="kt">:find</span> <span class="kt">?e</span> <span class="kt">:in</span> <span class="kt">$</span> <span class="kt">?name</span> <span class="kt">:where</span> <span class="o">[</span><span class="kt">?e</span> <span class="kt">:person/name</span> <span class="kt">?name</span><span class="o">]</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without going in deep details, here you can see that the compiled version of <code>q</code> isn&#8217;t a <code>Query[String]</code> but a <code>TypedQueryAuto2[DatomicData, DatomicData, DatomicData]</code> being an AST representing the query.</p>

<p><code>TypedQueryAuto2[DatomicData, DatomicData, DatomicData]</code> means you have:</p>

<ul>
<li>2 input parameters <code>$ ?name</code> of type <code>DatomicData</code> and <code>DatomicData</code></li>
<li>Last type parameter represents output parameter <code>?e</code> of type <code>DatomicData</code></li>
</ul>


<p><em>Note : <code>DatomicData</code> is explained in next paragraph.</em></p>

<br/>


<h3>Example OK with several outputs</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">     [ :find ?e ?age</span>
</span><span class='line'><span class="s">       :in $ ?name</span>
</span><span class='line'><span class="s">       :where [ ?e :person/name ?name ] </span>
</span><span class='line'><span class="s">              [ ?e :person/age ?age ]  </span>
</span><span class='line'><span class="s">     ]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">q</span><span class="k">:</span> <span class="kt">datomisca.TypedQueryAuto2</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span>,<span class="o">(</span><span class="kt">datomisca.DatomicData</span>, <span class="kt">datomisca.DatomicData</span><span class="o">)]</span> <span class="k">=</span> <span class="o">[</span> <span class="kt">:find</span> <span class="kt">?e</span> <span class="kt">?age</span> <span class="kt">:in</span> <span class="kt">$</span> <span class="kt">?name</span> <span class="kt">:where</span> <span class="o">[</span><span class="kt">?e</span> <span class="kt">:person/name</span> <span class="kt">?name</span><span class="o">]</span> <span class="o">[</span><span class="kt">?e</span> <span class="kt">:person/age</span> <span class="kt">?age</span><span class="o">]</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TypedQueryAuto2[DatomicData,DatomicData,(DatomicData, DatomicData)]</code> means you have:</p>

<ul>
<li>2 input parameters <code>$ ?name</code> of type <code>DatomicData</code></li>
<li>last tupled type parameter represents the 2 output parameters <code>?e ?age</code> of type <code>DatomicData</code></li>
</ul>


<br/>


<h3>Examples with syntax-error</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">q</span>  <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">     [ :find ?e</span>
</span><span class='line'><span class="s">       :in $ ?name</span>
</span><span class='line'><span class="s">       :where [ ?e :person/name ?name </span>
</span><span class='line'><span class="s">     ]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">14</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">`]&#39; expected but end of source found</span>
</span><span class='line'><span class="kt">     ]&quot;&quot;&quot;)</span>
</span><span class='line'><span class="kt">      ^</span>
</span><span class='line'>
</span><span class='line'><span class="kt">scala&gt; val q  = Query(&quot;&quot;&quot;</span>
</span><span class='line'><span class="kt">     [ :find ?e</span>
</span><span class='line'><span class="kt">       :in $ ?name</span>
</span><span class='line'><span class="kt">       :where [ ?e person/name ?name ]</span>
</span><span class='line'><span class="kt">     ]&quot;&quot;&quot;)</span>
</span><span class='line'><span class="kt">&lt;console&gt;:13: error: `</span><span class="err">]&#39;</span> <span class="kt">expected</span> <span class="kt">but</span> <span class="err">`</span><span class="kt">p</span><span class="err">&#39;</span> <span class="kt">found</span>
</span><span class='line'>       <span class="k">:</span><span class="kt">where</span> <span class="o">[</span> <span class="kt">?e</span> <span class="kt">person/name</span> <span class="kt">?name</span> <span class="o">]</span>
</span><span class='line'>                   <span class="o">^</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is see that the compiler will tell you where it detects syntax errors.</p>

<p><em>The query compiler is not yet complete so don&#8217;t hesitate to report us when you discover issues.</em></p>

<br/>


<h2><a name="datomicdata">What&#8217;s <code>DatomicData</code> ?</a></h2>

<p>Datomisca wraps completely Datomic API and types. So Datomisca doesn&#8217;t let any Datomic/Clojure types perspirating into its domain and wraps them all in the so-called <code>DatomicData</code> which is the abstract parent trait of all Datomic types seen from Datomisca. For each Datomic type, you have the corresponding specific <code>DatomicData</code>:</p>

<ul>
<li>DString for String</li>
<li>DLong for Long</li>
<li>DatomicFloat for Float</li>
<li>DSet for Set</li>
<li>DInstant for Instant</li>
<li>&#8230;</li>
</ul>


<h3>Why not using Pure Scala types directly?</h3>

<p>Firstly, because type correspondence is not exact between Datomic types and Scala. The best sample is <code>Instant</code>: is it a <code>java.util.Date</code> or a <code>jodatime.DateTime</code>?</p>

<p>Secondly, we wanted to keep the possibility of converting Datomic types into different Scala types depending on our needs so we have abstracted those types.</p>

<p>This abstraction also isolates us and we can decide exactly how we want to map Datomic types to Scala. The trade-off is naturally that, if new types appear in Datomic, we must wrap them.</p>

<br/>


<h3>Keep in mind that Datomisca queries accept and return <code>DatomicData</code></h3>

<p>All query data used as input and output paremeters shall be <code>DatomicData</code>. When getting results, you can convert those generic <code>DatomicData</code> into one of the previous specific types (<code>DString</code>, <code>DLong</code>, … ).</p>

<p>From <code>DatomicData</code>, you can also convert to Scala pure types based on implicit typeclasses:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">DatomicData</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="k">implicit</span> <span class="n">rd</span><span class="k">:</span> <span class="kt">DDReader</span><span class="o">[</span><span class="kt">DatomicData</span>, <span class="kt">T</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">toto</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">ClassCastException</span><span class="k">:</span> <span class="kt">datomisca.DString</span> <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">cast</span> <span class="kt">to</span> <span class="kt">datomisca.DLong</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note 1 : that current Scala query compiler is a bit restricted to the specific domain of Datomic queries and doesn&#8217;t support all Clojure syntax which might create a few limitations when calling Clojure functions in queries. Anyway, a full Clojure syntax Scala compiler is in the TODO list so these limitations will disappear once it&#8217;s implemented…</em></p>

<br/>


<p><em>Note 2 : Current macro just infers the number of input/output parameters but, using Schema typed attributes that we will present in a future article, we will provide some deeper features such as parameter type inference.</em></p>

<br/>


<h1><a name="execute">Execute the query</a></h1>

<p>You can create queries independently of any connection to Datomic.
But you need an implicit <code>DatomicConnection</code> in your scope to execute it.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">datomisca._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Datomic._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Creates an implicit connection</span>
</span><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;…&quot;</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">Datomic</span><span class="o">.</span><span class="n">connect</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Creates the query</span>
</span><span class='line'><span class="k">val</span> <span class="n">queryFindByName</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">[ :find ?e ?birth</span>
</span><span class='line'><span class="s">  :in $ ?name</span>
</span><span class='line'><span class="s">  :where [ ?e :person/name ?name ]</span>
</span><span class='line'><span class="s">         [ ?e :person/birth ?birth ]        </span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Executes the query     </span>
</span><span class='line'><span class="k">val</span> <span class="n">results</span><span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">DatomicData</span>, <span class="kt">DatomicData</span><span class="o">]</span> <span class="kt">=</span> <span class="kt">Datomic.q</span><span class="o">(</span><span class="kt">queryFindByName</span>, <span class="kt">database</span>, <span class="kt">DString</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">John</span><span class="err">&quot;</span><span class="o">))</span>
</span><span class='line'><span class="kt">//</span> <span class="kt">Results</span> <span class="k">type</span> <span class="kt">is</span> <span class="kt">precised</span> <span class="kt">for</span> <span class="kt">the</span> <span class="kt">example</span> <span class="kt">but</span> <span class="kt">not</span> <span class="kt">required</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note we made the <code>database</code> input parameter mandatory even if it&#8217;s implicit in when importing <code>Datomic._</code> because in Clojure, it&#8217;s also required and we wanted to stick to it.</em></p>

<h3>Compile-error if wrong number of inputs</h3>

<p>If you don&#8217;t provide 2 input parameters, you will get a compile error because the query expects 2 input parameters.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Following would not compile because query expects 2 input parameters</span>
</span><span class='line'><span class="k">val</span> <span class="n">results</span><span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">DatomicData</span>, <span class="kt">DatomicData</span><span class="o">]</span> <span class="kt">=</span> <span class="kt">Datomic.q</span><span class="o">(</span><span class="kt">queryFindByName</span>, <span class="kt">DString</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">John</span><span class="err">&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="kt">Compiling</span> <span class="err">1</span> <span class="kt">Scala</span> <span class="kt">source</span> <span class="kt">to</span> <span class="kt">/Users/pvo/zenexity/workspaces/workspace_pellucid/datomisca/samples/getting-started/target/scala-</span><span class="err">2</span><span class="kt">.</span><span class="err">10</span><span class="kt">/classes...</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span> <span class="kt">/Users/pvo/zenexity/workspaces/workspace_pellucid/datomisca/samples/getting-started/src/main/scala/GettingStarted.scala:</span><span class="err">87</span><span class="kt">:</span> <span class="kt">overloaded</span> <span class="kt">method</span> <span class="kt">value</span> <span class="kt">q</span> <span class="kt">with</span> <span class="kt">alternatives:</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">A</span>, <span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)](</span><span class="kt">query:</span> <span class="kt">datomisca.TypedQueryAuto1</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span>, <span class="kt">a:</span> <span class="kt">A</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span>, <span class="kt">implicit</span> <span class="kt">ddwa:</span> <span class="kt">datomisca.DD2Writer</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>, <span class="kt">implicit</span> <span class="kt">outConv:</span> <span class="kt">datomisca.DatomicDataToArgs</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)])</span><span class="kt">List</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span> <span class="kt">&lt;and&gt;</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)](</span><span class="kt">query:</span> <span class="kt">datomisca.TypedQueryAuto0</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span>, <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">outConv:</span> <span class="kt">datomisca.DatomicDataToArgs</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)])</span><span class="kt">List</span><span class="o">[</span><span class="kt">R</span><span class="o">(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)(</span><span class="kt">in</span> <span class="kt">method</span> <span class="kt">q</span><span class="o">)]</span> <span class="kt">&lt;and&gt;</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">OutArgs</span> <span class="k">&lt;:</span> <span class="kt">datomisca.Args</span>, <span class="kt">T</span><span class="o">](</span><span class="kt">q:</span> <span class="kt">datomisca.TypedQueryInOut</span><span class="o">[</span><span class="kt">datomisca.Args1</span>,<span class="kt">OutArgs</span><span class="o">]</span>, <span class="kt">d1:</span> <span class="kt">datomisca.DatomicData</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span>, <span class="kt">implicit</span> <span class="kt">outConv:</span> <span class="kt">datomisca.DatomicDataToArgs</span><span class="o">[</span><span class="kt">OutArgs</span><span class="o">]</span>, <span class="kt">implicit</span> <span class="kt">ott:</span> <span class="kt">datomisca.ArgsToTuple</span><span class="o">[</span><span class="kt">OutArgs</span>,<span class="kt">T</span><span class="o">])</span><span class="kt">List</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="kt">&lt;and&gt;</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>   <span class="o">[</span><span class="kt">InArgs</span> <span class="k">&lt;:</span> <span class="kt">datomisca.Args</span><span class="o">](</span><span class="kt">query:</span> <span class="kt">datomisca.PureQuery</span>, <span class="kt">in:</span> <span class="kt">InArgs</span><span class="o">)(</span><span class="kt">implicit</span> <span class="kt">db:</span> <span class="kt">datomisca.DDatabase</span><span class="o">)</span><span class="kt">List</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span><span class="o">]]</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>  <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">applied</span> <span class="kt">to</span> <span class="o">(</span><span class="kt">datomisca.TypedQueryAuto2</span><span class="o">[</span><span class="kt">datomisca.DatomicData</span>,<span class="kt">datomisca.DatomicData</span>,<span class="o">(</span><span class="kt">datomisca.DatomicData</span>, <span class="kt">datomisca.DatomicData</span><span class="o">)]</span>, <span class="kt">datomisca.DString</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>         <span class="kt">val</span> <span class="kt">results</span> <span class="kt">=</span> <span class="kt">Datomic.q</span><span class="o">(</span><span class="kt">queryFindByName</span>, <span class="kt">DString</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">John</span><span class="err">&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>                               <span class="kt">^</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span> <span class="kt">one</span> <span class="kt">error</span> <span class="kt">found</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span> <span class="o">(</span><span class="kt">compile:compile</span><span class="o">)</span> <span class="kt">Compilation</span> <span class="kt">failed</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compile error seems a bit long as the compiler tries a few different version of <code>Datomic.q</code> but just remind that when you see <code>cannot be applied to (datomisca.TypedQueryAuto2[…</code>, it means you provided the wrong number of input parameters.</p>

<br/>


<h3>Use query results</h3>

<p>Query results are <code>List[DatomicData…]</code> depending on the output parameters inferred by the Scala macros.</p>

<p>In our case, we have 2 output parameters so we expect a <code>List[(DatomicData, DatomicData)]</code>.
Using <code>List.map</code> (or <code>headOption</code> to get the first one only), you can then use pattern matching to specialize your <code>(DatomicData, DatomicData)</code> to <code>(DLong, DInstant)</code> as you expect.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">results</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">e</span><span class="k">:</span> <span class="kt">DLong</span><span class="o">,</span> <span class="n">birth</span><span class="k">:</span> <span class="kt">DInstant</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="c1">// converts into Scala types</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">eAsLong</span> <span class="k">=</span> <span class="n">e</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">birthAsDate</span> <span class="k">=</span> <span class="n">birth</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">java.util.Date</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note 1: that when you want to convert your <code>DatomicData</code>, you can use our converters based on implicit typeclasses as following</em></p>

<p><em>Note 2: The Scala macro has not way just based on query to infer the real types of output parameters but ther is a TODO in the roadmap: using typed schema attributes presented in a future article, we will be able to do better certainly… Be patient ;)</em></p>

<br/>


<h1><a name="complex">More complex queries</a></h1>

<p>As Datomisca parses the queries, you may wonder what is the level of completeness of the query parser for now?</p>

<p>Here are a few examples showing what can be executed already:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using variable number of inputs</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s"> :find ?e</span>
</span><span class='line'><span class="s"> :in $ [?names ...] </span>
</span><span class='line'><span class="s"> :where [?e :person/name ?names]</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">q</span><span class="o">(</span><span class="n">q</span><span class="o">,</span> <span class="n">database</span><span class="o">,</span> <span class="nc">DSet</span><span class="o">(</span><span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">),</span> <span class="nc">DString</span><span class="o">(</span><span class="s">&quot;tata&quot;</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using tuple inputs</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">  :find ?e ?name ?age</span>
</span><span class='line'><span class="s">  :in $ [[?name ?age]]</span>
</span><span class='line'><span class="s">  :where [?e :person/name ?name]</span>
</span><span class='line'><span class="s">         [?e :person/age ?age]</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Datomic</span><span class="o">.</span><span class="n">q</span><span class="o">(</span><span class="n">q</span><span class="o">,</span>
</span><span class='line'>  <span class="n">database</span><span class="o">,</span>
</span><span class='line'>  <span class="nc">DSet</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">DSet</span><span class="o">(</span><span class="nc">DString</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">),</span> <span class="nc">DLong</span><span class="o">(</span><span class="mi">30L</span><span class="o">)),</span>
</span><span class='line'>    <span class="nc">DSet</span><span class="o">(</span><span class="nc">DString</span><span class="o">(</span><span class="s">&quot;tutu&quot;</span><span class="o">),</span> <span class="nc">DLong</span><span class="o">(</span><span class="mi">54L</span><span class="o">))</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using function such as fulltext search</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s">  :find ?e ?n</span>
</span><span class='line'><span class="s">  :where [(fulltext $ :person/name &quot;toto&quot;) [[ ?e ?n ]]]</span>
</span><span class='line'><span class="s">]&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using rules</span>
</span><span class='line'><span class="k">val</span> <span class="n">totoRule</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">.</span><span class="n">rules</span><span class="o">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">[ [ [toto ?e]</span>
</span><span class='line'><span class="s">    [?e :person/name &quot;toto&quot;]</span>
</span><span class='line'><span class="s">] ]</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[</span>
</span><span class='line'><span class="s"> :find ?e ?age</span>
</span><span class='line'><span class="s"> :in $ %</span>
</span><span class='line'><span class="s"> :where [?e :person/age ?age]</span>
</span><span class='line'><span class="s">        (toto ?e)</span>
</span><span class='line'><span class="s">]</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// using query specifying just the field in fact to be searched</span>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">Query</span><span class="o">(</span><span class="s">&quot;&quot;&quot;[:find ?e :where [?e :person/name]]&quot;&quot;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note that currently Datomisca reserializes queries to string when executing because Java API requires it but once Datomic Java API accepts that we pass List[List[Object]] instead of strings for query, the interaction will be more direct…</em></p>

<div class="well">Next articles about Datomic operations to insert/retract facts or entities in Datomic using Datomisca.</div>


<p>Have datomiscafun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing the Fool with Scala Macros - Implementing PataMorphism]]></title>
    <link href="http://www.mandubian.com/2013/01/30/maquereau-patamorphism/"/>
    <updated>2013-01-30T13:13:00+01:00</updated>
    <id>http://www.mandubian.com/2013/01/30/maquereau-patamorphism</id>
    <content type="html"><![CDATA[<div class="well">
You can find the code on my Github code <a href="http://github.com/mandubian/maquereau">Maquereau</a> 
</div>


<h1><a name="maquereau">Maquereau <em>[Scomber Scombrus]</em></a></h1>

<div style="float: right"><img src="http://www.mandubian.com/images/mandubian/maquereau_white.jpg" /></div>


<blockquote><p><em>[/makʀo/] in french phonetics</em></p></blockquote>

<p>Since I discovered Scala Macros with Scala 2.10, I&#8217;ve been really impressed by their power. But great power means great responsibility as you know. Nevertheless, I don&#8217;t care about responsability as I&#8217;m just experimenting. As if mad scientists couldn&#8217;t experiment freely!</p>

<p>Besides being a very tasty pelagic fish from scombroid family, <a href="http://github.com/mandubian/maquereau">Maquereau</a> is my new sandbox project to experiment eccentric ideas with Scala Macros.</p>

<p>Here is my first experiment which aims at studying the concepts of pataphysics applied to Scala Macros.</p>

<br/>


<br/>


<h1><a name="pataphysics">Pataphysics applied to Macros</a></h1>

<h3>Programming is math</h3>

<blockquote><p>I&#8217;ve heard people saying that programming is not math.<br/>
This is really wrong, programming is math.</p></blockquote>

<p>And let&#8217;s be serious, how would you seek attention in urbane cocktails without
 those cute little words such as functors, monoids, contravariance, monads?</p>

<blockquote><p>She/He> What do you do?<br/>
You> I&#8217;m coding a list fold.<br/>
She/He> Ah ok, bye.<br/>
You> Hey wait…</p></blockquote>

<br/>


<blockquote><p>She/He> What do you do?<br/>
You> I&#8217;m deconstructing my list with a catamorphism based on a F-algebra as underlying functor.<br/>
She/He> Whahhh this is so exciting! Actually you&#8217;re really sexy!!!<br/>
You> Yes I known insignificant creature!</p></blockquote>

<br/>


<h3>Programming is also a bit of Physics</h3>

<p>Code is static meanwhile your program is launched in a runtime environment which is dynamic and you must take these dynamic aspects into account in your code too (memory, synchronization, blocking calls, resource consumption…). For the purpose of the demo, let&#8217;s accept programming also implies some concepts of physics when dealing with dynamic aspects of a program.</p>

<br/>


<h3>Compiling is Programming Metaphysics</h3>

<p>Between code and runtime, there is a weird realm, the compiler runtime which is in charge of converting static code to dynamic program:</p>

<ul>
<li>The compiler knows things you can&#8217;t imagine.</li>
<li>The compiler is aware of the fundamental nature of math &amp; physics of programming.</li>
<li>The compiler is beyond these rules of math &amp; physics, it&#8217;s metaphysics.</li>
</ul>


<br/>


<h3>Macro is Pataphysics</h3>

<div style="float: right"><img src="http://www.mandubian.com/images/mandubian/ubu.png"/></div>


<p>Now we have Scala Macros which are able:</p>

<ul>
<li>to intercept the compiling process for a given piece of code</li>
<li>to analyze the compiler AST code and do some computation on it</li>
<li>to generate another AST and inject it back into the compile-chain</li>
</ul>


<p>When you write a Macro in your own code, you write code which runs in the compiler runtime. Moreover a macro can go even further by asking for compilation from within the compiler: <code>c.universe.reify{ some code }</code>… Isn&#8217;t it great to imagine those recursive compilers?</p>

<p>So Scala macro knows the fundamental rules of the compiler. Given compiler is metaphysics, Scala macro lies beyond metaphysics and the science studying this topic is called pataphysics.</p>

<p>This science provides very interesting concepts and this article is about applying them to the domain of Scala Macros.</p>

<p>I&#8217;ll let you discover pataphysics by yourself on <a href="http://en.wikipedia.org/wiki/'Pataphysics">wikipedia</a></p>

<br/>


<blockquote><p>Let&#8217;s explore the realm of pataphysics applied to Scala macro development by implementing the great concept of patamorphism, well-known among pataphysicians.</p></blockquote>

<br/>


<br/>


<h1><a name="defining-patamorphism">Defining Patamorphism</a></h1>

<p>In 1976, the great pataphysician, Ernst Von Schmurtz defined patamorphism as following:</p>

<blockquote><p>A patamorphism is a patatoid in the category of endopatafunctors…</p></blockquote>

<p>Explaining the theory would be too long with lots of weird formulas. Let&#8217;s just  skip that and go directly to the conclusions.</p>

<h4>First of all, we can consider the realm of pataphysics is the context of Scala Macros.</h4>

<br/>


<p>Now, let&#8217;s take point by point and see if Scala Macro can implement a patamorphism.</p>

<h4>A patamorphism should be callable from outside the realm of pataphysics</h4>

<p>A Scala macro is called from your code which is out of the realm of Scala macro.</p>

<h4>A patamorphism can&#8217;t have effect outside the realm of pataphysics after execution</h4>

<p>This means we must implement a Scala Macro that :</p>

<ul>
<li>has effect only at compile-time</li>
<li>has NO effect at run-time</li>
</ul>


<p>From outside the compiler, a patamorphism is an identity morphism that could be translated in Scala as:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">pataMorph</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span>
</span></code></pre></td></tr></table></div></figure>


<h4>A patamorphism can change the nature of things while being computed</h4>

<p>Even if it has no effect once applied, meanwhile it is computed, it can :</p>

<ul>
<li>have side-effects on anything</li>
<li>be blocking</li>
<li>be mutable</li>
</ul>


<p>Concerning these points, nothing prevents a Scala Macro from respecting those points.</p>

<h4>A patamorphism is a patatoid</h4>

<p>You may know it but patatoid principles require that the morphism should be customisable by a custom abstract seed. In Scala samples, patatoid are generally described as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Patatoid</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Seed is specific to a Patatoid and is used to configure the sprout mechanism  </span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span>
</span><span class='line'>  <span class="c1">// sprout is the classic name</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sprout</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">Seed</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So a patamorphism could be implemented as :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">PataMorphism</span> <span class="k">extends</span> <span class="nc">Patatoid</span>
</span></code></pre></td></tr></table></div></figure>


<p>A custom patamorphism implemented as a Scala Macro would be written as :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">MyPataMorphism</span> <span class="k">extends</span> <span class="nc">PataMorphism</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span> <span class="o">=</span> <span class="nc">MyCustomSeed</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sprout</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">Seed</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=</span> <span class="n">macro</span> <span class="n">sproutImpl</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// here is the corresponding macro implementation</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sproutImpl</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in current Scala Macro API, this is not possible for a Scala Macro to override an abstract function so we can&#8217;t write it like that and we need to trick a bit. Here is how we can do simply :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Patatoid</span><span class="o">{</span>
</span><span class='line'>  <span class="c1">// Seed is specific to a Patatoid and is used to configure the sprout mechanism  </span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span>
</span><span class='line'>  <span class="c1">// we put the signature of the macro implementation in the abstract trait</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  * PataMorphism </span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">PataMorphism</span> <span class="k">extends</span> <span class="nc">Patatoid</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Custom patamorphism</span>
</span><span class='line'><span class="k">object</span> <span class="nc">MyPataMorphism</span> <span class="k">extends</span> <span class="nc">PataMorphism</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Seed</span> <span class="o">=</span> <span class="nc">MyCustomSeed</span>
</span><span class='line'>  <span class="c1">// the real sprout function expected for patatoid</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sprout</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">seed</span><span class="k">:</span> <span class="kt">Seed</span><span class="o">)</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=</span> <span class="n">macro</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the real implementation of the macro and of the patatoid abstract operation</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>    <span class="c1">// Your implementation here</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<div class="well">
<h3>Conclusion</h3>
<p>We have shown that we could implement a patamorphism using a Scala Macro.</p>
<p>But the most important is the implementation of the macro which shall:
<ul>
<li>have effect only at compile-time (with potential side-effect, sync, blocking)</li>
<li>have NO effect at runtime</li>
</ul>
<p>Please note that pataphysics is the science of exceptions so all previous rules are true as long as there are no exception to them.</p>
</div>


<p><strong>Let&#8217;s implement a 1st sample of patamorphism called <code>VerySeriousCompiler</code>.</strong></p>

<br/>


<br/>


<h1><a name="veryseriouscompiler">Sample #1: VerySeriousCompiler</a></h1>

<h2>What is it?</h2>

<p><code>VerySeriousCompiler</code> is a pure patamorphism which allows to change compiler behavior by :</p>

<ul>
<li>Choosing how long you want the compilation to last</li>
<li>Displaying great messages at a given speed while compiling</li>
<li>Returning the exact same code tree given in input</li>
</ul>


<p><strong><code>VerySeriousCompiler</code> is an identity morphism returning your exact code without leaving any trace in AST after macro execution.</strong></p>

<p><code>VerySeriousCompiler</code> is implemented exactly using previous patamorphic pattern and the compiling phase can be configured using custom Seed:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Seed builder </span>
</span><span class='line'><span class="cm">  * @param duration the duration of compiling in ms</span>
</span><span class='line'><span class="cm">  * @param speed the speed between each message display in ms</span>
</span><span class='line'><span class="cm">  * @param messages the messages to display</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">seed</span><span class="o">(</span><span class="n">duration</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">speed</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">messages</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>When to use it?</h2>

<p>VerySeriousCompiler is a useful tool when you want to have a coffee or discuss quietly at work with colleagues and fool your boss making him/her believe you&#8217;re waiting for the end of a very long compiling process.</p>

<p>To use it, you just have to modify your code using :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">VerySeriousCompiler</span><span class="o">.</span><span class="n">sprout</span><span class="o">{</span>
</span><span class='line'>  <span class="err">…</span><span class="n">some</span> <span class="n">code</span><span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//or even </span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">xxx</span> <span class="k">=</span> <span class="nc">VerySeriousCompiler</span><span class="o">.</span><span class="n">sprout</span><span class="o">{</span>
</span><span class='line'>  <span class="err">…</span><span class="n">some</span> <span class="n">code</span> <span class="n">returning</span> <span class="n">something</span><span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you launch compilation for the duration you want, displaying meaningful messages in case your boss looks at your screen. Then, you have an excuse if your boss is not happy about your long pause, tell him/her: &#8220;Look, it&#8217;s compiling&#8221;.</p>

<p>Remember that this PataMorphism doesn&#8217;t pollute your code at runtime at all, it has only effects at compile-time and doesn&#8217;t inject any other code in the AST.</p>

<br/>


<br/>


<h2>Usage</h2>

<h3>With default seed (5s compiling with msgs each 400ms)</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">VerySeriousCompiler._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create a class for ex</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Toto</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// using default seed</span>
</span><span class='line'><span class="n">sprout</span><span class="o">(</span><span class="nc">Toto</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">))</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span><span class="nc">Toto</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compile:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/classes...
</span><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/test-classes...
</span><span class='line'>Finding ring kernel that rules them all...................
</span><span class='line'>computing fast fourier transform code optimization....................
</span><span class='line'>asking why Obiwan Kenobi...................
</span><span class='line'>resolving implicit typeclass from scope....................
</span><span class='line'>constructing costate comonad....................
</span><span class='line'>Do you like gladiator movies?....................
</span><span class='line'>generating language systemic metafunction....................
</span><span class='line'>verifying isomorphic behavior....................
</span><span class='line'>inflating into applicative functor...................
</span><span class='line'>verifying isomorphic behavior...................
</span><span class='line'>invoking Nyarlathotep to prevent crawling chaos....................
</span><span class='line'>Hear me carefully, your eyelids are very heavy, you're a koalaaaaa....................
</span><span class='line'>resolving implicit typeclass from scope...................
</span><span class='line'>[info] PataMorphismSpec
</span><span class='line'>[info] 
</span><span class='line'>[info] VerySeriousCompiler should
</span><span class='line'>[info] + sprout with default seed
</span><span class='line'>[info] Total for specification PataMorphismSpec
</span><span class='line'>[info] Finished in xx ms
</span><span class='line'>[info] 1 example, 0 failure, 0 error
</span><span class='line'>[info] 
</span><span class='line'>[info] Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0
</span><span class='line'>[success] Total time: xx s, completed 3 f?vr. 2013 01:25:42</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>With custom seed (1s compiling with msgs each 200ms)</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// using custom seed</span>
</span><span class='line'><span class="n">sprout</span><span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="s">&quot;this is&quot;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="s">&quot;some code&quot;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="mi">123L</span>
</span><span class='line'>  <span class="n">s</span><span class="s">&quot;msg $a $b $c&quot;</span>
</span><span class='line'><span class="o">}(</span>
</span><span class='line'>  <span class="nc">VerySeriousCompiler</span><span class="o">.</span><span class="n">seed</span><span class="o">(</span>
</span><span class='line'>    <span class="mi">1000L</span><span class="o">,</span>     <span class="c1">// duration of compiling in ms</span>
</span><span class='line'>    <span class="mi">200L</span><span class="o">,</span>       <span class="c1">// speed between each message display in ms</span>
</span><span class='line'>    <span class="nc">Seq</span><span class="o">(</span>        <span class="c1">// the message to display randomly </span>
</span><span class='line'>      <span class="s">&quot;very interesting message&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;cool message&quot;</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">must</span> <span class="n">beEqualTo</span><span class="o">(</span> <span class="s">&quot;msg this is some code 123&quot;</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compile:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/classes...
</span><span class='line'>[info] Compiling 1 Scala source to /workspace_mandubian/maquereau/target/scala-2.11/test-classes...
</span><span class='line'>toto..........
</span><span class='line'>coucou..........
</span><span class='line'>toto..........
</span><span class='line'>coucou..........
</span><span class='line'>[info] PataMorphismSpec
</span><span class='line'>[info] 
</span><span class='line'>[info] VerySeriousCompiler should
</span><span class='line'>[info] + sprout with custom seed
</span><span class='line'>[info] Total for specification PataMorphismSpec
</span><span class='line'>[info] Finished in xx ms
</span><span class='line'>[info] 1 example, 0 failure, 0 error
</span><span class='line'>[info] 
</span><span class='line'>[info] Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0
</span><span class='line'>[success] Total time: xx s, completed 3 f?vr. 2013 01:25:42</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h2>Macro implementation details</h2>

<p>The code can be found on Github <a href="http://github.com/mandubian/maquereau">Maquereau</a>.</p>

<p>Here are the interesting points of the macro implementation.</p>

<h4>Modular macro building</h4>

<p>We use the method described on <a href="http://docs.scala-lang.org/overviews/macros/overview.html#writing_bigger_macros">scalamacros.org/writing bigger macros</a></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">VerySeriousCompilerHelper</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">c</span><span class="k">:</span> <span class="kt">Context</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sproutMacro</span><span class="o">[</span><span class="kt">T:</span> <span class="kt">c1.WeakTypeTag</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">seed</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">Seed</span><span class="o">])</span><span class="k">:</span> <span class="kt">c1.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">helper</span> <span class="k">=</span> <span class="k">new</span> <span class="o">{</span> <span class="k">val</span> <span class="n">c</span><span class="k">:</span> <span class="kt">c1.</span><span class="k">type</span> <span class="o">=</span> <span class="n">c1</span> <span class="o">}</span> <span class="k">with</span> <span class="nc">VerySeriousCompilerHelper</span>
</span><span class='line'>  <span class="n">helper</span><span class="o">.</span><span class="n">sprout</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">seed</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h4>input code evaluation in macro</h4>

<p>The Seed passed to the macro doesn&#8217;t belong to the realm of Scala Macro but to your code. In the macro, we don&#8217;t get the Seed type but the expression Expr[Seed]. So in order to use the seed value in the macro, we must evaluate the expression passed to the macro:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">speed</span> <span class="k">=</span> <span class="n">c</span><span class="o">.</span><span class="n">eval</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="nc">Expr</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="n">c</span><span class="o">.</span><span class="n">resetAllAttrs</span><span class="o">(</span><span class="n">speedTree</span><span class="o">.</span><span class="n">duplicate</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note that this code is a work-around because in Scala 2.10, you can&#8217;t evaluate any code as you want due to some compiler limitations when evaluating
an already typechecked tree in a macro. This is explained in this <a href="https://issues.scala-lang.org/browse/SI-5464">Scala issue</a></em></p>

<br/>


<h4>input code re-compiling before returning from macro</h4>

<p>We don&#8217;t return directly the input tree in the macro even if it would be valid with respect to patamorphism contract.
But to test Macro a bit further, I decided to &#8221;<em>re-compile</em>&#8221; the input code from within the macro. You can do that using following code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">reify</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="n">splice</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using macro paradise</h4>

<p>The <code>maquereau</code> project is based on <a href="http://docs.scala-lang.org/overviews/macros/paradise.html">Macro Paradise</a> which is the experimental branch of Scala Macros.
This implementation of patamorphism doesn&#8217;t use any experimental feature from Macro Paradise but future samples will certainly.</p>

<br/>


<br/>


<h1><a name="conclusion">Conclusion</a></h1>

<p>This article shows that applying the concepts of pataphysics to Scala Macro is possible and can help creating really useful tools.</p>

<p>The sample is still a bit basic but it shows that a patamorphism can be implemented relatively simply.</p>

<p>I&#8217;ll create other samples and hope you&#8217;ll like them!</p>

<p>Have patafun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Data-Centric approach to JSON Coast-to-Coast design with Play-2.1 & ReactiveMongo]]></title>
    <link href="http://www.mandubian.com/2013/01/13/JSON-Coast-to-Coast/"/>
    <updated>2013-01-13T12:12:00+01:00</updated>
    <id>http://www.mandubian.com/2013/01/13/JSON-Coast-to-Coast</id>
    <content type="html"><![CDATA[<p>Today, let&#8217;s talk a bit more about the <strong>JSON <em>coast-to-coast</em> design</strong> I had introduced as a buzz word in a previous article about <a href="http://mandubian.com/2012/09/08/unveiling-play-2-dot-1-json-api-part1-jspath-reads-combinators/">Play2.1 Json combinators</a>.</p>

<p><em>Sorry this is a very long article with tens of >140-chars strings: I wanted to put a few ideas on paper to present my approach before writing any line of code…</em></p>

<div class="well">
<h3>Direct access</h3>
<ul>
<li><a href="#philosophy">Philosophical Considerations</a></li>
<li><a href="#sample">Json Coast-to-Coast</a></li>
<li><a href="#code">Json Coast-to-Coast sample on Github</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</div>


<blockquote><h3>Original idea</h3>

<p><strong>1) Manipulate pure data structure (JSON) from client to DB without any <em>static model</em></strong><br/>
<strong>2) Focus on the idea of pure data manipulation and data-flow management</strong><br/>
<br/>
The underlying idea is more global than just questioning the fact that we generally serialize JSON data to static OO models. I really want to discuss how we manipulate data  between frontend/backend(s). I&#8217;d also like to reconsider the whole data flow from a pure functional point of view and not through the lens of technical constraints such as &#8220;OO languages implies static OO models&#8221;.</p></blockquote>

<p>In the <a href="#code">code sample</a>, we&#8217;ll use <a href="http://www.reactivemongo.org">ReactiveMongo</a> and <a href="http://www.playframework.org">Play2.1-RC2</a> and explain why those frameworks fit our demonstation.</p>

<br/>


<br/>


<h1><a name="philosophy">Philosophical Considerations</a></h1>

<h2><a name="data-centric">Data-centric approach</a></h2>

<p>Recent evolutions in backend architecture tend to push (again) UI to the frontend (the client side). As a consequence, <strong>backends concentrate more and more on data serving</strong>, manipulation, transformation, aggregation, distribution and naturally some business logic. I must admit that I&#8217;ve always considered <strong>backend are very good data provider and not so good UI provider</strong>. So I won&#8217;t say it&#8217;s a bad thing.</p>

<p>From this point of view, the backend focuses on:</p>

<ul>
<li>getting/serving data from/to clients</li>
<li>retrieving/distributing data from/to other backends</li>
<li>storing data in DB/cache/files/whatever locally/remotely</li>
<li>doing some business logic (outside data manipulation)… sometimes but not so often.</li>
</ul>


<p>I consider data management is the reason of being of backend and also the finality of it.</p>

<blockquote><p>The word <em>&#8220;data&#8221;</em> is everywhere and that&#8217;s why I use the term <strong>&#8220;data-centric approach&#8221;</strong> (even if I would prefer that we speak about <em>&#8220;information&#8221;</em> more than data but this is another discussion…)</p></blockquote>

<br/>


<br/>


<h2><a name="chain-link">Backend system is a chain-link in global data-flow</a></h2>

<p><strong>Data-centric doesn&#8217;t mean <em>centralized data</em></strong></p>

<ul>
<li>With Internet and global mobility, data tend to be gathered, re-distributed, scattered and re-shared logically and geographically</li>
<li>When you develop your server, you can receive data from many different sources and you can exchange data with many actors.</li>
</ul>


<p>In this context, <strong>backend is often just a chain link participating to a whole data flow</strong>. So you must consider the relations existing with other actors of this system.</p>

<p><img src="http://www.mandubian.com/images/mandubian/backend_flow.png" alt="Data flow" /></p>

<p>Besides the simple <em>&#8220;what does my backend receive, transmit or answer?&#8221;</em>, it has become <strong>more important to consider the relative role of the backend in the whole data flow</strong> and not only locally. Basically, knowing your exact role in the data flow really impacts your technical design:</p>

<ul>
<li>if your server must aggregate data from one backend which can respond immediately and another one which will respond tomorrow, do you use a runtime stateful framework without persistence for that?</li>
<li>if your server is just there to validate data before sending it to a DB for storage, do you need to build a full generic &amp; static model for that?</li>
<li>if your server is responsible for streaming data in realtime to hundreds of clients, do you want to use a blocking framework ?</li>
<li>if your server takes part to a high-speed realtime transactional system, is it reasonable to choose ultra heavyweight frameworks ?</li>
<li>&#8230;</li>
</ul>


<br/>


<br/>


<h2><a name="temporal-polymorphic-data-flow">Rise of temporal &amp; polymorphic data flows</a></h2>

<p>In the past, we often used to model our data to be used by a single backend or a restricted system. Data model weren&#8217;t evolving too much for a few years. So you could choose a very strict data model using normalization in RDBMS for ex.</p>

<p>But since a few years, nature of data and their usage has changed a lot:</p>

<ul>
<li>same data are shared with lots of different solutions,</li>
<li>same data are used in very different application domains,</li>
<li>unstructured data storage have increased</li>
<li>formats of data evolve much faster than before</li>
<li>global quantity of data has increased exponentially</li>
<li>…</li>
</ul>


<p>The temporal nature of data has changed drastically also with:</p>

<ul>
<li>realtime data streaming</li>
<li>on fhe fly distributed data updates</li>
<li>very long-time persistence</li>
<li>immutable data keeping all updates without losing anything</li>
<li>…</li>
</ul>


<br/>


<div class="well"><blockquote>
<p>Nothing tremendous until now, isn&#8217;t it?</p>  
<p>This is exactly what you already know or do every day…</p>
<p>I wanted to remind that a backend system is often only an element of a more global system and a chain link in a more global data flow.</p><br/>
<p>Now let&#8217;s try to consider the data flow through a backend system taking all those modern aspects into account!</p><br/>
<p><b>In the rest of this article, I&#8217;ll focus on a specific domain: the very classic case of backend-to-DB interaction</b>.</p><br/>
<p>For last 10 years, in all widespread enterprise platforms based on OO languages, we have all used those well-known ORM frameworks to manage our data from/to RDBMS. We have discovered their advantages and also their drawbacks. Let&#8217;s consider a bit how those ORM have changed our way of manipulating data.</p>
</blockquote></div>




<br/>


<br/>


<h2><a name="orm-prism-distortion">The ORM prism of distortion</a></h2>

<p>After coding with a few different backend platforms, I tend to think we have been kind-of <strong>mesmerized into thinking it&#8217;s non-sense to talk to a DB from an OO language without going through a static language structure</strong> such as a class. ORM frameworks are the best witnesses of this tendency.</p>

<p>ORM frameworks lead us to:</p>

<ul>
<li>Get some data (from client for ex) in a pure data format such as JSON <em>(this format will be used in all samples because it&#8217;s very representative)</em></li>
<li>Convert JSON to OO structure such as class instance</li>
<li>Transmit class instance to ORM framework that translates/transmits it to the DB mystery limbo.</li>
</ul>


<p><img src="http://www.mandubian.com/images/mandubian/all-model.png" alt="All-Model Approach" /></p>

<h3>Pros</h3>

<h4>Classes are OO natural structure</h4>

<p>Classes are the native structures in OO languages so it seems quite natural to use them</p>

<h4>Classes imply structural validations</h4>

<p>Conversion into classes also implies type constraint validations (and more specific constraints with annotations or config) in order to verify data do not corrupt the DB</p>

<h4>Boundaries isolation</h4>

<p>By performing the conversion in OO, the client format is completely decorrelated from DB format making them separated layers. Moreover, by manipulating OO structure in code, the DB can be abstracted almost completely and one can imagine changing DB later. This seems a good manner in theory.</p>

<h4>Business logic compliant</h4>

<p>Once converted, class instances can be manipulated in business logic without taking care about the DB.</p>

<br/>


<h3>Cons</h3>

<h4>Requirement for Business Logic is not the most frequent case</h4>

<p>In many cases (CRUD being the 1st of all), once you get class instance, business logic is simply non-existing. You just pass the class to the ORM, that&#8217;s all. So you simply serialize to a class instance to be able to speak to ORM which is a pity.</p>

<h4>ORM forces to speak OO because they can&#8217;t speak anything else</h4>

<p>In many cases, the only needed thing is data validation with precise (and potentially complex) constraints. A class is just a type validator but it doesn&#8217;t validate anything else. If the String should be an email, your class sees it as a String. So, frameworks have provided constraint validators based on annotations or external configurations.</p>

<h4>Classes are not made to manipulate/validate dynamic forms of data</h4>

<p>Classes are static structure which can&#8217;t evolve so easily because the whole code depends on those classes and modifying a model class can imply lots of code refactoring. If data format is not clear and can evolve, classes are not very good. If data are polymorphic and can be seen using different views, it generally ends into multiplying the number of classes making your code hard to maintain.</p>

<h4>Hiding DB more than abstracting it</h4>

<p>ORM approach is just a pure OO view of relational data. It states that outside OO, nothing exists and no data can be modelled with something else than an OO structure.<br/>
So ORMs haven&#8217;t tried bringing DB structures to OO language but <em>kind-of</em> pushing OO to the DB and abstracting the DB data structure almost completely. So you don&#8217;t manipulate DB data anymore but you manipulate OO &#8220;mimicing&#8221; more or less DB structures.</p>

<h4>Was OO really a so good choice against relational approach???</h4>

<p>It seemed a good idea to map DB data to OO structures. But we all know the problems brought by ORM to our solutions:</p>

<ul>
<li>How DB structures are mapped to OO?</li>
<li>How relations are managed by ORM?</li>
<li>How updates are managed in time? (the famous cache issues)</li>
<li>How transactions are delimited in a OO world?</li>
<li>How full compatibility between all RDBMS can be ensured?</li>
<li>etc&#8230;</li>
</ul>


<br/>


<blockquote><p>I think ORM just moved the problems:</p>

<p>Before ORM, you had problems of SQL<br/>
After ORM, you had problems of ORM</p></blockquote>

<p>Now the difference is that issues appear on the abstraction layer (ie the ORM) which you don&#8217;t control at all and not anymore at the lower-level DB layer. SQL is a bit painful sometimes but it is the DB native language so when you have an error, it&#8217;s generally far easier to find why and how to work around.</p>

<blockquote><p>My aim here is not to tell ORM are bad (and there aren&#8217;t so bad in a few cases).<br/>
<strong>I just want to point the OO deviation introduced by ORM in our way of modelling our data.</strong><br/>
I&#8217;ll let you discover the subject by yourself and make your own mind and you don&#8217;t have to agree with me. As a very beginning, you can go to wikipedia <a href="http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch#Data_type_differences">there</a>.</p></blockquote>

<br/>


<br/>


<h2><a name="all-model-world">The All-Model world</a></h2>

<p>What interests me more is the fact that ORM brought a very systematic way of manipulating the data flowing through backend systems. ORM dictates that whatever data you manipulate, you must convert it to a OO structure before doing anything else for more or less good reasons. OO are very useful when you absolutely want to manipulate static typed structures. But in other cases, isn&#8217;t it better to use a List or a Map or more versatile pure data structure such as Json tree?</p>

<blockquote><p>Let&#8217;s call it the <strong>All-Model Approach : no data can be manipulated without a static model and underlying abstraction/serialization mechanism</strong>.</p></blockquote>

<p>The first move into the <strong>All-Model</strong> direction was quite logical in reaction to the difficulty of SQL integration with OO languages. Hibernate idea, for ex, was to abstract completely the relational DB models with OO structures so that people don&#8217;t care anymore with SQL.</p>

<p>As we all know, in software industry, when an idea becomes a standard of fact, as became ORMs, balance is rarely reached between 2 positions. As a consequence, lots of people decided to completely trash SQL in favor of ORM. That&#8217;s why we have seen this litany of ORM frameworks around hibernate, JPA, Toplink and almost nobody could escape from this global move.</p>

<br/>


<br/>


<h2><a name="changing-world">Living in a changing world</a></h2>

<p>After a few years of suffering more or less with ORM, some people have begun to re-consider this position seeing the difficulty they had to use ORM. <strong>The real change of mind was linked to the evolution of the whole data ecosystem</strong> linked to internet, distribution of data and mobility of clients also.</p>

<h4><a name="nosql-emergence">NoSQL emergence</a></h4>

<p>First, the move concerned the underlying layer: the DB.<br/>
RDBMS are really good to model very consistent data and provide robust transactions but not so good for managing high scalability, data distribution, massive updates, data streaming and very huge amount of data. That&#8217;s why we have seen these NoSQL <em>new kids on the block</em> initiated by Internet companies mainly.</p>

<p>Once again, the balance was upsetted: after the <em>&#8220;SQL is evil&#8221;</em> movement, there have been a funny <em>&#8220;RDBMS is evil&#8221;</em> movement. Extremist positions are not worth globally, what&#8217;s interesting is the result of NoSQL initiative. It allowed to re-consider the way we modelled our data: 100% normalized schema with full ACID transactions were no more the only possibility. NoSQL broke the rules: why not model your data as key/values, documents, graphs using redundancy, without full consistency if it fits better your needs?</p>

<blockquote><p>I really think NoSQL breaking the holy RDBMS rule brought the important subject on the front stage: <strong>we care about the data, the way we manipulate them</strong>. We don&#8217;t need a single DB ruling them all but DB that answer to our requirements and not the other way… Data-Centric as I said before…</p></blockquote>

<h4><a name="why-orm-nosql">Why ORM again for NoQSL?</a></h4>

<p>NoSQL DBs bring their own native API in general providing data representation fitting their own DB model. For ex, MongoDB is document oriented and a record is stored as a binary treemap.</p>

<p>But once again, we have seen ORM-kind API appear on top of those low-level API, as if we couldn&#8217;t think anymore in terms of pure data and not in terms of OO structures.</p>

<p>But the holy rule had been broken and next change would necessarily target ORM. So people rediscovered SQL could be used from modern languages (even OO) using simple mapping mechanism, simpler data structure (tuples, list, map, trees) and query facilities. Microsoft LINQ was a really interesting initiative… Modern languages such as Scala also bring interesting API based on the functional power of the language (cf Slick, Squeryl, Anorm etc…).</p>

<p>I know some people will tell replacing Class models by HashMaps makes the code harder to maintain and the lack of contract imposed by static typed classes results in code mess. I could answer I&#8217;ve seen exactly the same in projects having tens of classes to model all data views and it was also a mess impossible to maintain.</p>

<blockquote><p><strong>The question is not to forget static models but to use them only when required</strong> and keep simple and dynamic structures as much as possible.<br/>
ORM are still used widely but we can at least openly question their usefulness. Dictatorship is over and diversity is always better!</p></blockquote>

<h4><a name="layer-genericity-talisman">Layered genericity as a talisman</a></h4>

<p>I want to question another fact in the way we model data:</p>

<ul>
<li>we write generic OO model to have very strong static model and be independent of the DB.</li>
<li>we interact with those models using DAO providing all sorts of access functions.</li>
<li>we encapsulate all of that in abstract DB service layers to completely isolate from the DB.</li>
</ul>


<p>Why?<br/>
<em>&#8220;Maybe I&#8217;ll change the DB and I&#8217;ll be able to do it…&#8221; <br/>
&#8220;Maybe I&#8217;ll need to re-use those DAO somewhere else…&#8221;<br/>
&#8220;Maybe Maybe Maybe…&#8221;</em></p>

<p>It works almost like superstition, as if making everything generic with strict isolated layers was the only way to protect us against failure and that it will make it work and be reused forever…</p>

<p><em>Do you change DB very often without re-considering the whole model to fit DB specific features?<br/>
Do you reuse code so often without re-considering the whole design?</em></p>

<blockquote><p>I don&#8217;t say layered design and boundaries isolation is bad once again. I just say it has a cost and consequences that we don&#8217;t really consider anymore.</p></blockquote>

<p><strong>By trying to hide the DB completely, we don&#8217;t use the real power that DB can provide</strong> to us and we forget their specific capacities. There are so many DB types (sql, nosql, key/value, transactional, graph, column etc…) on the market and choosing the right one according to your data requirements is really important…</p>

<blockquote><p><strong>DB diversity gives us more control on our data so why hiding them behind too generic layers?</strong></p></blockquote>

<br/>


<br/>


<h2><a name="no-model-approach">The Data-Centric or No-Model approach</a></h2>

<blockquote><p>Let&#8217;s go back to our data-centric approach and try to manipulate data flow going through our backend system to the DB without OO (de)serialization in the majority of cases.</p></blockquote>

<p>What I really need when I manipulate the data flow is:</p>

<ul>
<li>being able to manipulate data directly</li>
<li>validating the data structure and format according to different constraints</li>
<li>transforming/aggregating data coming from different sources</li>
</ul>


<blockquote><p>I call it the <strong>Data-centric or No-Model approach</strong>. It doesn&#8217;t mean my data aren&#8217;t structured but that I manipulate the data as directly as possible without going through an OO model when I don&#8217;t need it.</p></blockquote>

<p><img src="http://www.mandubian.com/images/mandubian/no-model.png" alt="No-Model Approach" /></p>

<br/>


<br/>


<h2><a name="trash-all-model">Should I trash the all-model approach?</a></h2>

<blockquote><p>Answer : NO… You must find the right balance.</p></blockquote>

<p>As explained before, using the same design for everything seems a good idea because homogeneity and standardization is a good principle in general.</p>

<p><strong>But &#8220;in general&#8221; is not &#8220;always&#8221; and we often confound homogeneity with uniformity in its bad meaning i.e. diversity loss.</strong></p>

<p>That&#8217;s why I prefer speaking about &#8220;Data-Centric approach&#8221; than &#8220;No-Model&#8221;: the important is to ponder your requirements with respect to your data flow and to choose the right tool:</p>

<ul>
<li>If you need to perform business logic with your data, it&#8217;s often better to work with static OO structures so using a model might be better</li>
<li>If you just need to validate and transform your data, then why going through a model which is completely artificial.</li>
<li>If you just need to manipulate a real-time data flow, then manipulate the flow directly and forget models.</li>
</ul>


<blockquote><p>Now stop philosophizing and go to practice with a very basic sample as a beginning : let&#8217;s manipulate a flow of JSON data in very simple case of CRUD.<br/>
Hey this is the famous &#8220;Json coast-to-coast&#8221; approach ;)</p></blockquote>

<br/>


<br/>


<h1><a name="sample">Json Coast-to-Coast sample</a></h1>

<p>To illustrate this data-centric approach manipulating a pure data flow without OO serialization, let&#8217;s focus on a pure CRUD sample based on JSON. I won&#8217;t speak about the client side to make it shorter but don&#8217;t forget the JSON data flow doesn&#8217;t begin or end at backend boundaries.</p>

<p>I also don&#8217;t focus on real-time flow here because this is worth another discussion. Play2.1 provides us with one of the best platform for real-time web applications. First get accustomed with data-centric design and then consider real-time data management…</p>

<p>The CRUD case is a very good one for our subject:</p>

<ul>
<li><p><strong>CRUD implies no backend business logic at all</strong><br/>
Backend receives data corresponding to entity, validates their format and directly transmit the data to the DB to be stored.</p></li>
<li><p><strong>CRUD targets pure data resources and JSON is good to represent pure data in Web world.</strong></p></li>
<li><p><strong>CRUD is compliant to REST approach</strong><br/>
REST is very interesting because it implies that every resource is reachable through a single URL and a HTTP verb from the Web. This is also another discussion about how we access or link data…</p></li>
</ul>


<br/>


<br/>


<h2><a name="data-flow-input-output">Thinking data flow in terms of Input/Output</a></h2>

<p>The CRUD sample is not really the right example to consider the impact of relative place in data flow on design. In CRUD, there are no temporal or dynamic requirements. But let&#8217;s stay simple for a beginning.</p>

<p>As there is no business logic in the CRUD caser, we can focus on backend boundaries:</p>

<ul>
<li>Backend/Client</li>
<li>Backend/DB</li>
</ul>


<p>We can just consider the data received at previous boundaries:</p>

<ul>
<li>What Input data is received from client or DB?</li>
<li>What Output data should be sent to DB or client?</li>
</ul>


<p>In a summary, we can really consider the data-flow just in terms of inputs/outputs:</p>

<ul>
<li>Backend/Client input/output</li>
<li>Backend/DB input/output</li>
</ul>


<p><img src="http://www.mandubian.com/images/mandubian/inputoutput.png" alt="No-Model Approach" /></p>

<br/>


<br/>


<h2><a name="reactivemongo">Why ReactiveMongo enables Json flow manipulation?</a></h2>

<p>MongoDB provides a very versatile document-oriented data storage platform. MongoDB is not meant to model relational data but data structured as trees. So when you retrieve a document from Mongo, you also get all related data at once. In Mongo, normalized model is not really the main target and redundancy is not necessarily bad as long as you know what you do.<br/>
Mongo document are stored using BSON <em>Binary JSON</em> format which is simply inspired by JSON and optimized for binary storage.</p>

<blockquote><p>Imagine you could get JSON (after validation) directly to or from Mongo without going through any superficial structure, wouldn&#8217;t it be really practical?<br/>
Please remark that serializing a JSON tree to a case-class and from a case class to a BSON document is just useless if you don&#8217;t have any business logic to fulfill with the case-class.</p></blockquote>

<p>Play2.1 provides a very good JSON transformation API from/to any data structure. Converting JSON to BSON is not really an issue.
But now remember that we also want to be able to manage realtime data flow, to stream data from or to the DB (using Mongo capped collections for ex). Play2.x has been designed to be fully asynchronous/non-blocking. but unfortunately, default Java Mongo driver and its Scala counterpart (<a href="https://github.com/mongodb/casbah">Casbah</a>), despite their qualities, provide synchronous and blocking API.</p>

<p>But we are lucky since <a href="http://www.twitter.com/sgodbillong">Stephane Godbillon</a> decided to develop <a href="http://www.reactivemongo.org">ReactiveMongo</a> a full async/non-blocking Scala driver based on Akka and Play Iteratees (but independent of Play framework) and we worked together to develop a Play2.1/ReactiveMongo module providing all the tooling we need for JSON/BSON conversions in the context of Play2.1/Scala.</p>

<p><strong>With Play/ReactiveMongo, you can simply send/receive JSON to/from Mongo and it&#8217;s transparently translated into BSON and vis versa.</strong></p>

<br/>


<br/>


<h2><a name="data-format">Sample Data format</A></h2>

<p>Let&#8217;s try to manipulate a flow of data containing the following representation of a Person in JSON (or BSON)…</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_id:</span> <span class="err">PERSON_ID,</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;Some Hashed Password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">created:</span> <span class="mi">123456789</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A person consists in:</p>

<ul>
<li>a unique technical ID</li>
<li>a name</li>
<li>a hashed password which shouldn&#8217;t be transmitted outside anyway</li>
<li>zero or more email addresses</li>
<li>zero or more group memberships</li>
<li>a creation date</li>
</ul>


<p>A group membership consists in:</p>

<ul>
<li>the group email</li>
<li>the group name</li>
<li>the group ID</li>
</ul>


<br/>


<br/>


<h2><a name="data-flow-desc">Data flow description</A></h2>

<p>We will consider the following 4 CRUD actions:</p>

<ul>
<li> Create</li>
<li> Get</li>
<li> Delete</li>
<li> Full/Restricted Update (Full document at once or a part of it)</li>
</ul>


<h3><a name="create">CREATE</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>PUT http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="create-input">Input</a></h4>

<p>Backend receives the whole Person minus <code>_id</code> and <code>created</code> which is not yet known till insertion in DB.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="create-output">output</a></h4>

<p>Backend sends the generated ID in a JSON object for ex.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_id:</span> <span class="nt">&quot;123456789123456789&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="get">GET</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>GET http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="get-input">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="get-output">Output</a></h4>

<p>The whole person plus ID is sent back in JSON but for the demo, let&#8217;s remove a few fields we don&#8217;t want to send back:</p>

<ul>
<li><code>_id</code> which is not needed as the client knows it</li>
<li><code>pw</code> because this is a password even if hashed and we want it to stay in the server</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">…],</span>
</span><span class='line'>  <span class="err">created:</span> <span class="mi">123456789</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="delete">DELETE</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>DELETE http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="delete-inptu">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="delete-output">Output</a></h4>

<p>Nothing very interesting. Use a &#8220;200 OK&#8221; to stay simple</p>

<br/>


<br/>


<h3><a name="update">Full UPDATE</a></h3>

<p>Macro update is meant to update a whole person document.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>POST http://xxx/person/ID</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-input">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/ID</span></code></pre></td></tr></table></div></figure>


<p>Updated person document is in the Post body:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;new_password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-output">Output</a></h4>

<p>Nothing very interesting. Use a &#8220;200 OK&#8221; to stay simple</p>

<br/>


<br/>


<h3><a name="update-restricted">Restricted UPDATE</a></h3>

<p>Restricted update is meant to update just a part of a person document.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>POST http://xxx/person/ID/spec</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-restricted-input">Input</a></h4>

<p>Backend just receives the ID in the URL:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://xxx/ID/spec</span></code></pre></td></tr></table></div></figure>


<p>Updated person document is in the Post body:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="update-restricted-output">Output</a></h4>

<p>Nothing very interesting. Use a &#8220;200 OK&#8221; to stay simple</p>

<br/>


<br/>


<h2><a name="client">Backend/Client boundary</A></h2>

<p>Now that we know input/output data on our boundaries, we can describe how to validate these data and transform them within our backend system.</p>

<h3><a name="client-input">Input data from client (CREATE/ UPDATE)</A></h3>

<h4><a name="client-input-person-full">Full person validation</A></h4>

<p>When receiving JSON from client for <code>Create</code> and <code>Update</code> actions, we must be able to validate the Person structure without ID which will be generated at insertion:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">pw:</span> <span class="nt">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>  <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>    <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span> <span class="err">...]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using Play2.1 JSON transformers (see my other article about it), you would validate this structure as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Full Person validator */</span>
</span><span class='line'><span class="k">val</span> <span class="n">validatePerson</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;name</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">addressesOrEmptyArray</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">membershipsOrEmptyArray</span><span class="o">)</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>addressesOrEmptyArray</code></h5>

<p>It&#8217;s a transformer validating an array of email strings and if not found it returns an empty array.<br/>
Here is how you can write this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Addresses validators */</span>
</span><span class='line'><span class="c1">// if array is not empty, it validates each element as an email string</span>
</span><span class='line'><span class="k">val</span> <span class="n">validateAddresses</span> <span class="k">=</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">verifyingIf</span><span class="o">(</span> <span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">JsArray</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">arr</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">)(</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">list</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="nc">Reads</span><span class="o">.</span><span class="n">email</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// extracts &quot;addresses&quot; field or returns an empty array and then validates all addresses</span>
</span><span class='line'><span class="k">val</span> <span class="n">addressesOrEmptyArray</span> <span class="k">=</span> <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">orElse</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">()))</span> <span class="n">andThen</span> <span class="n">validateAddresses</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>membershipsOrEmptyArray</code></h5>

<p>It is a transformer validating an array of memberships and if not found it returns an empty array.<br/>
First, let&#8217;s write a <code>Membership</code> validator searching for <code>address</code> which must be an email, <code>group_name</code> and a <code>group_id</code>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">membership</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;address</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span><span class="o">(</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">of</span><span class="o">[</span><span class="kt">JsString</span><span class="o">]</span> <span class="n">keepAnd</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">email</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;group_name</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;group</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span>  <span class="c1">// reduce merges all branches in a single JsObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, use it to validate the membership list.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// if array is not empty, it validates each element as a membership</span>
</span><span class='line'><span class="k">val</span> <span class="n">validateMemberships</span> <span class="k">=</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">verifyingIf</span><span class="o">(</span> <span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">JsArray</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">arr</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">)(</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">list</span><span class="o">(</span><span class="n">membership</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// extracts &quot;memberchips&quot; field or returns an empty array and then validates all memberships</span>
</span><span class='line'><span class="k">val</span> <span class="n">membershipsOrEmptyArray</span> <span class="k">=</span> <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">orElse</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">()))</span> <span class="n">andThen</span> <span class="n">validateMemberships</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="client-input-person-restricted">Restricted person validation</A></h4>

<p>For restricted update, the client sends just the part that should be updated in the document and not all the document.
Yet the validator must accept only authorized fields.</p>

<p>Here is how you can write it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Person validator for restricted update */</span>
</span><span class='line'><span class="c1">// creates an empty JsObject whatever Json is provided</span>
</span><span class='line'><span class="k">val</span> <span class="n">emptyObj</span> <span class="k">=</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for each field, if not found, it simply writes an empty JsObject</span>
</span><span class='line'><span class="k">val</span> <span class="n">validatePerson4RestrictedUpdate</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;name</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">addresses</span><span class="o">)</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span><span class="n">memberships</span><span class="o">)</span> <span class="n">or</span> <span class="n">emptyObj</span><span class="o">)</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span> <span class="c1">// merges all results</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>addresses</code></h5>

<p>This is the same as <code>addressesOrEmptyArray</code> but it doesn&#8217;t return an empty array if <code>addresses</code> are not found.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">addresses</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;addresses</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">andThen</span> <span class="n">validateAddresses</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>memberships</code></h5>

<p>This is the same as <code>membershipsOrEmptyArray</code> but it doesn&#8217;t return an empty array if <code>memberships</code> are not found.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">memberships</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;memberships</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span> <span class="n">andThen</span> <span class="n">validateMemberships</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name="client-output">Output data to Client (GET/DELETE)</A></h3>

<p>When a person document is retrieved from DB, this is the whole document and you may need to transform it before sending it to the output. In our case, let&#8217;s modify it as following:</p>

<ul>
<li>prune the password (even if hashed)</li>
<li>prune the _id (because client already knows it if it requested it)</li>
</ul>


<p>This can be done with the following JSON transformer:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** prunes _id </span>
</span><span class='line'><span class="cm">  * and then prunes pw</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">val</span> <span class="n">outputPerson</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span> <span class="n">andThen</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note we don&#8217;t write it as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">outputPerson</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;pw</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span>
</span><span class='line'><span class="o">).</span><span class="n">reduce</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why? Because <code>reduce</code> merges results of both Reads[JsObject] so:</p>

<ul>
<li><code>(__ \ '_id).json.prune</code> removes <code>_id</code> field but keeps <code>pw</code></li>
<li><code>(__ \ 'pw).json.prune</code> removes <code>pw</code> field but keeps <code>_id</code></li>
</ul>


<p>When <code>reduce</code> merges both results, it would return a Json with both <code>_id</code> and <code>pw</code> which is not exactly what we expect.</p>

<br/>


<br/>


<h2><a name="mongo">Backend/MongoDB boundary</a></h2>

<h3><a name="mong-output">Output to MongoDB</a></h3>

<p>Now we can validate a received JSON as a Person structure.<br/>
But we need to write it to Mongo and Mongo has a few specificities.</p>

<h4><a name="mongo-output-id">ID in Mongo is a <code>BsonObjectID</code></a></h4>

<p>Instead of waiting for Mongo to generate the ID, you can generate it using ReactiveMongo API <code>BSONObjectID.generate</code> before inserting it into Mongo.<br/>
So before sending JSON to Mongo, let&#8217;s add field <code>"_id" : "GENERATED_ID"</code> to validated JSON.<br/>
Here is the JSON transformer generating an ID:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">generateId</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="nc">BSONObjectID</span><span class="o">.</span><span class="n">generate</span><span class="o">.</span><span class="n">stringify</span> <span class="o">)</span> <span class="c1">// this generates a new ID and adds it to your JSON</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h4><a name="mongo-output-id-ext"><code>BsonObjectID</code> using JSON extended notation</a></h4>

<p>In JSON, <code>BsonObjectID</code> is represented as a String but to inform Mongo that it&#8217;s an ID and not a simple String, we use the following extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;123456789123456789&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">//</span> <span class="err">becomes</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;$oid&quot;</span> <span class="p">:</span> <span class="s2">&quot;123456789123456789&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the JSON transformer to generate an ID using extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">generateId</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;_id</span> <span class="o">\</span> <span class="-Symbol">&#39;$oid</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="nc">BSONObjectID</span><span class="o">.</span><span class="n">generate</span><span class="o">.</span><span class="n">stringify</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h4><a name="mongo-output-date"><code>Date</code> Extended JSON</A></h4>

<p><code>created</code> field is a <code>Date</code> represented as a <code>JsNumber</code> (a long) in JSON. When passing it to Mongo, we use the following extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;creation&quot;</span> <span class="p">:</span> <span class="mi">123456789123456789</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">//</span> <span class="err">becomes</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;creation&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nt">&quot;$date&quot;</span> <span class="p">:</span> <span class="mi">123456789123456789</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the final JSON transformer to generate a date using extended JSON notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">generateCreated</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;created</span> <span class="o">\</span> <span class="-Symbol">&#39;$date</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Date</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3><a name="mongo-input">Input from Mongo</A></h3>

<p>As explained, using Play/ReactiveMongo, you don&#8217;t have to care about BSON because it deals with BSON/JSON conversion behind the curtain.<br/>
We could transform data received from Mongo in case we don&#8217;t really trust them.<br/>
But in my case, I trust Mongo as all inserted data are mine so no use to transform those input data from Mongo.</p>

<p>We just need to remove all JSON extended notation for <code>_id</code> or <code>created</code> when sending to the output.<br/>
The <code>_id</code> is pruned so no need to convert it.
So we just have to convert Json extended notation for <code>created</code> field. Here is the transformer:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// update duplicates full JSON and replaces &quot;created&quot; field by removing &quot;$date&quot; level</span>
</span><span class='line'><span class="k">val</span> <span class="n">fromCreated</span> <span class="k">=</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">((</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;created</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;created</span> <span class="o">\</span> <span class="-Symbol">&#39;$date</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span> <span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h2><a name="controller">Play2.1 controller as pipe plug</a></h2>

<p>Now, we can:</p>

<ul>
<li>validate input JSON received from client,</li>
<li>transform into Mongo format</li>
<li>transform from Mongo format to output</li>
</ul>


<p>Let&#8217;s plug the pipes all together:</p>

<ul>
<li>client inputs to Mongo outputs</li>
<li>Mongo inputs to client outputs</li>
</ul>


<p>Play controller is the place to do that and we can write one action per REST action.</p>

<blockquote><p>Please note that the whole code is in a single Controller in the sample to make it compact. But a good manner would be to put transformers outside the controller to be able to share them between controllers.</p></blockquote>

<p>In the following samples, please notice the way we compose all Json transformers described previously as if we were piping them.</p>

<h3><a name="action-insert">Insert Person</a></h3>

<p>When a Person document is created, there are 2 steps:</p>

<ul>
<li>validate the JSON using <code>validatePerson</code></li>
<li>transform JSON to fit Mongo format by:

<ul>
<li>adding a generated <code>BSONObjectID</code> field using <code>generateId</code></li>
<li>adding a generated <code>created</code> date field using <code>generateCreated</code></li>
</ul>
</li>
</ul>


<p>Here is the JSON transformer to transform into Mongo format:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Updates Json by adding both ID and date */</span>
</span><span class='line'><span class="k">val</span> <span class="n">addMongoIdAndDate</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">(</span> <span class="o">(</span><span class="n">generateId</span> <span class="n">and</span> <span class="n">generateCreated</span><span class="o">).</span><span class="n">reduce</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the insert action could be coded as:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">insertPerson</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">){</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">validatePerson</span> <span class="n">andThen</span> <span class="n">addMongoIdAndDate</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">jsobj</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>      <span class="n">persons</span><span class="o">.</span><span class="n">insert</span><span class="o">(</span><span class="n">jsobj</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">p</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">// removes extended JSON to ouput generated _id</span>
</span><span class='line'>        <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="n">jsobj</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">fromObjectId</span><span class="o">).</span><span class="n">get</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>      <span class="o">}.</span><span class="n">recover</span><span class="o">{</span> <span class="k">case</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;exception %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="n">getMessage</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">err</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">err</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>resOK</code> and <code>resKO</code> are just function building JSON result with response status. Have a look at code for more info.</p>

<br/>


<br/>


<h3><a name="action-get">Get Person</a></h3>

<p>The action receives the ID of the person as a String and we only need to generate the right Mongo JSON format to retrieve the document.
Here is the Json <code>Writes[String]</code> that creates the extended JSON notation from ID:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">toObjectId</span> <span class="k">=</span> <span class="nc">OWrites</span><span class="o">[</span><span class="kt">String</span><span class="o">]{</span> <span class="n">s</span> <span class="k">=&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$oid&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">))</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>getPerson</code> action code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">getPerson</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">{</span>
</span><span class='line'>  <span class="c1">// builds a query from ID</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">q</span> <span class="k">=</span> <span class="nc">QueryBuilder</span><span class="o">().</span><span class="n">query</span><span class="o">(</span><span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">))</span>
</span><span class='line'>  <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">persons</span><span class="o">.</span><span class="n">find</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">q</span><span class="o">).</span><span class="n">headOption</span><span class="o">.</span><span class="n">map</span><span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">NotFound</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;res&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;KO&quot;</span><span class="o">,</span> <span class="s">&quot;error&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person with ID $id not found&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">outputPerson</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">jsonp</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;person&quot;</span> <span class="o">-&gt;</span> <span class="n">jsonp</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">e</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="action-delete">Delete Person</a></h3>

<p><code>Delete</code> is exactly the same as <code>Get</code> in terms of input and it doesn&#8217;t require any output except to inform about success or failure.<br/>
So let&#8217;s give directly the <code>deletePerson</code>code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">deletePerson</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">{</span>
</span><span class='line'>  <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">persons</span><span class="o">.</span><span class="n">remove</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">)).</span><span class="n">map</span><span class="o">{</span> <span class="n">lastError</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">ok</span><span class="o">)</span>
</span><span class='line'>        <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person $id deleted&quot;</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;error %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">stringify</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h3><a name="action-update">Update Full Person</a></h3>

<p>When updating a full person:</p>

<ul>
<li>we receive the ID in the URL</li>
<li>we receive the new Json representing the person in the body</li>
<li>we need to update the corresponding document in DB.</li>
</ul>


<p>So we must do the following:</p>

<ul>
<li>validate input JSON using <code>validatePerson</code></li>
<li>transform the ID into MongoID JSON extended notation using <code>toObjectId</code> described previously</li>
<li>transform json into Update Json extended notation:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;$set&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">name:</span> <span class="nt">&quot;Mike Dirolf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">pw:</span> <span class="nt">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">addresses:</span> <span class="err">[</span><span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span> <span class="nt">&quot;mike@dirolf.com&quot;</span><span class="p">,</span> <span class="err">...],</span>
</span><span class='line'>    <span class="err">memberships:</span> <span class="err">[{</span>
</span><span class='line'>      <span class="err">address:</span> <span class="nt">&quot;mike@corp.fiesta.cc&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">group_name:</span> <span class="nt">&quot;family&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">group:</span> <span class="err">GROUP_ID</span>
</span><span class='line'>    <span class="p">},</span> <span class="err">...]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the JSON transformer for update notation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Converts JSON into Mongo update selector by just copying whole object in $set field */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">toMongoUpdate</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;$set</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span> <span class="nc">__</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally here is the corresponding <code>updatePerson</code> action code</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">updatePerson</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">){</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">validatePerson</span><span class="o">).</span><span class="n">flatMap</span><span class="o">{</span> <span class="n">jsobj</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">jsobj</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">toMongoUpdate</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">updateSelector</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>        <span class="n">persons</span><span class="o">.</span><span class="n">update</span><span class="o">(</span>
</span><span class='line'>          <span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">),</span>
</span><span class='line'>          <span class="n">updateSelector</span>
</span><span class='line'>        <span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">lastError</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">ok</span><span class="o">)</span>
</span><span class='line'>            <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person $id updated&quot;</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;error %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">stringify</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">e</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name="action-update-restricted">Update Restricted Person</a></h3>

<p>Restricted update is exactly the same as Full update except it validates the input JSON using <code>validatePerson4RestrictedUpdate</code> instead of <code>validatePerson</code></p>

<p>So here is the <code>updatePersonRestricted</code> action code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">updatePersonRestricted</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">){</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">validatePerson4RestrictedUpdate</span><span class="o">).</span><span class="n">flatMap</span><span class="o">{</span> <span class="n">jsobj</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">jsobj</span><span class="o">.</span><span class="n">transform</span><span class="o">(</span><span class="n">toMongoUpdate</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">updateSelector</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Async</span><span class="o">{</span>
</span><span class='line'>        <span class="n">persons</span><span class="o">.</span><span class="n">update</span><span class="o">(</span>
</span><span class='line'>          <span class="n">toObjectId</span><span class="o">.</span><span class="n">writes</span><span class="o">(</span><span class="n">id</span><span class="o">),</span>
</span><span class='line'>         <span class="n">updateSelector</span>
</span><span class='line'>        <span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">lastError</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">ok</span><span class="o">)</span>
</span><span class='line'>            <span class="nc">Ok</span><span class="o">(</span> <span class="n">resOK</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;msg&quot;</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="s">&quot;person $id updated&quot;</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="nc">InternalServerError</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;error %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">lastError</span><span class="o">.</span><span class="n">stringify</span><span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">recoverTotal</span><span class="o">{</span> <span class="n">e</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">BadRequest</span><span class="o">(</span> <span class="n">resKO</span><span class="o">(</span><span class="nc">JsError</span><span class="o">.</span><span class="n">toFlatJson</span><span class="o">(</span><span class="n">e</span><span class="o">))</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h1><a name="code">Full Code</a></h1>

<blockquote><p>The whole sample can be found on Github <a href="https://github.com/mandubian/play2-json-demo/tree/master/json-coast-to-coast">json-coast-to-coast sample</a>
To test it, use a Rest client such as Postman or whatever.</p></blockquote>

<br/>


<br/>


<h1><a name="conclusion">Conclusion</a></h1>

<p>Many things in this article… Maybe too many…<br/>
Anyway, the subject is huge and deserves it.</p>

<p>This sample demonstrates it&#8217;s possible to transmit a JSON data-flow from client to DB without going through any static model. That&#8217;s why I speak about <em>JSON coast-to-coast</em> and I find it&#8217;s a very good pattern in many cases in our <em>every-day-as-backend-designer</em> life.</p>

<p>Just remind 3 things maybe:</p>

<ul>
<li>data flow direct manipulation is possible, practical and useful.</li>
<li>pure data manipulation doesn&#8217;t lessen type-safety or data structuring as you control everything at the boundaries of your backend system.</li>
<li>static model is useful sometimes but not always so before writing generic classes, DAO everywhere, think about your real needs.</li>
</ul>


<p>In the code sample, I don&#8217;t take into account the temporal behavior of data and the dynamic requirements of interactions with other elements of the data flow. But don&#8217;t forget this aspect in your backend design.</p>

<blockquote><p>Finally, as you could see, <strong>ReactiveMongo</strong> mixed with <strong>Play2.1 JSON API</strong> provides us with a really good toolbox for data-centric approach. It also allows to deal with realtime data flow to design so-called reactive applications (which is also the reason of being of Play2 framework).</p></blockquote>

<p>Have flowfun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unveiling Play 2.1 Json API - Bonus : JSON Inception (based on Scala 2.10 Macros)]]></title>
    <link href="http://www.mandubian.com/2012/11/11/JSON-inception/"/>
    <updated>2012-11-11T11:10:00+01:00</updated>
    <id>http://www.mandubian.com/2012/11/11/JSON-inception</id>
    <content type="html"><![CDATA[<blockquote><p>A relatively short article, this time, to present an experimental feature developed by Sadek Drobi (<a href="http://www.twitter.com/sadache">@sadache</a>) &amp; I (<a href="http://www.twitter.com/mandubian">@mandubian</a>) and that we&#8217;ve decided to integrate into Play-2.1 because we think it&#8217;s really interesting and useful.</p></blockquote>

<br/>


<br/>


<h1><a name="wtf-inception">WTF is JSON Inception???</a></h1>

<h2><a name="wtf-inception-boring">Writing a default case class Reads/Writes/Format is so boring!!!</a></h2>

<p>Remember how you write a <code>Reads[T]</code> for a case class.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">import</span> <span class="err">play.api.libs.json._</span>
</span><span class='line'><span class="err">import</span> <span class="err">play.api.libs.functional.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="err">case</span> <span class="err">class</span> <span class="err">Person(name:</span> <span class="err">String,</span> <span class="err">age:</span> <span class="err">Int,</span> <span class="err">lovesChocolate:</span> <span class="err">Boolean)</span>
</span><span class='line'>
</span><span class='line'><span class="err">implicit</span> <span class="err">val</span> <span class="err">personReads</span> <span class="err">=</span> <span class="err">(</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;name).reads</span><span class="p">[</span><span class="err">String</span><span class="p">]</span> <span class="err">and</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;age).reads</span><span class="p">[</span><span class="err">Int</span><span class="p">]</span> <span class="err">and</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;lovesChocolate).reads</span><span class="p">[</span><span class="err">Boolean</span><span class="p">]</span>
</span><span class='line'><span class="err">)(Person)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you write 4 lines for this case class.<br/>
You know what? We have had a few complaints from some people who think it&#8217;s not cool to write a <code>Reads[TheirClass]</code> because usually Java JSON frameworks like Jackson or Gson do it behind the curtain without writing anything.<br/>
We argued that Play2.1 JSON serializers/deserializers are:</p>

<ul>
<li>completely typesafe,</li>
<li>fully compiled,</li>
<li>nothing was performed using introspection/reflection at runtime.</li>
</ul>


<p>But for some, this didn’t justify the extra lines of code for case classes.</p>

<p>We believe this is a really good approach so we persisted and proposed:</p>

<ul>
<li>JSON simplified syntax</li>
<li>JSON combinators</li>
<li>JSON transformers</li>
</ul>


<p>Added power, but nothing changed for the additional 4 lines.</p>

<h2><a name="wtf-inception-minimalist">Let&#8217;s be minimalist</a></h2>

<p>As we are perfectionist, now we propose a new way of writing the same code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">import</span> <span class="err">play.api.libs.json._</span>
</span><span class='line'><span class="err">import</span> <span class="err">play.api.libs.functional.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="err">case</span> <span class="err">class</span> <span class="err">Person(name:</span> <span class="err">String,</span> <span class="err">age:</span> <span class="err">Int,</span> <span class="err">lovesChocolate:</span> <span class="err">Boolean)</span>
</span><span class='line'>
</span><span class='line'><span class="err">implicit</span> <span class="err">val</span> <span class="err">personReads</span> <span class="err">=</span> <span class="err">Json.reads</span><span class="p">[</span><span class="err">Person</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>1 line only.<br/>
Questions you may ask immediately:</p>

<blockquote><p>Does it use runtime bytecode enhancement? -> NO</p>

<p>Does it use runtime introspection? -> NO</p>

<p>Does it break type-safety? -> NO</p></blockquote>

<p><strong>So what???</strong></p>

<blockquote><p>As I&#8217;m currently in a mood of creating new expressions, after creating <strong>JSON coast-to-coast design</strong>, let&#8217;s call it <strong>JSON INCEPTION</strong> (cool word, quite puzzling isn&#8217;t it? ;)</p></blockquote>

<br/>


<br/>


<h1><a name="json-incept">JSON Inception</a></h1>

<h2><a name="json-incept-eq">Code Equivalence</a></h2>

<p>As explained just before:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">implicit</span> <span class="err">val</span> <span class="err">personReads</span> <span class="err">=</span> <span class="err">Json.reads</span><span class="p">[</span><span class="err">Person</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">//</span> <span class="err">IS</span> <span class="err">STRICTLY</span> <span class="err">EQUIVALENT</span> <span class="err">TO</span> <span class="err">writing</span>
</span><span class='line'>
</span><span class='line'><span class="err">implicit</span> <span class="err">val</span> <span class="err">personReads</span> <span class="err">=</span> <span class="err">(</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;name).reads</span><span class="p">[</span><span class="err">String</span><span class="p">]</span> <span class="err">and</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;age).reads</span><span class="p">[</span><span class="err">Int</span><span class="p">]</span> <span class="err">and</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;lovesChocolate).reads</span><span class="p">[</span><span class="err">Boolean</span><span class="p">]</span>
</span><span class='line'><span class="err">)(Person)</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a name="json-incept">Inception equation</a></h2>

<p>Here is the equation describing the windy <em>Inception</em> concept:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">(Case</span> <span class="err">Class</span> <span class="err">INSPECTION)</span> <span class="err">+</span> <span class="err">(Code</span> <span class="err">INJECTION)</span> <span class="err">+</span> <span class="err">(COMPILE</span> <span class="err">Time)</span> <span class="err">=</span> <span class="err">INCEPTION</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h4>Case Class Inspection</h4>

<p>As you may deduce by yourself, in order to ensure preceding code equivalence, we need :</p>

<ul>
<li>to inspect <code>Person</code> case class,</li>
<li>to extract the 3 fields <code>name</code>, <code>age</code>, <code>lovesChocolate</code> and their types,</li>
<li>to resolve typeclasses implicits,</li>
<li>to find <code>Person.apply</code>.</li>
</ul>


<br/>


<h4>INJECTION??? Injjjjjectiiiiion….??? injectionnnnnnnn????</h4>

<p>No I stop you immediately…</p>

<blockquote><p><strong>Code injection is not dependency injection…</strong><br/>
No Spring behind inception… No IOC, No DI… No No No ;)</p></blockquote>

<p>I used this term on purpose because I know that injection is now linked immediately to IOC and Spring. But I&#8217;d like to re-establish this word with its real meaning.<br/>
Here code injection just means that <strong>we inject code at compile-time into the compiled scala AST</strong> (Abstract Syntax Tree).</p>

<p>So <code>Json.reads[Person]</code> is compiled and replaced in the compile AST by:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">(</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;name).reads</span><span class="p">[</span><span class="err">String</span><span class="p">]</span> <span class="err">and</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;age).reads</span><span class="p">[</span><span class="err">Int</span><span class="p">]</span> <span class="err">and</span>
</span><span class='line'>  <span class="err">(__</span> <span class="err">\</span> <span class="err">&#39;lovesChocolate).reads</span><span class="p">[</span><span class="err">Boolean</span><span class="p">]</span>
</span><span class='line'><span class="err">)(Person)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing less, nothing more…</p>

<br/>


<h4>COMPILE-TIME</h4>

<p>Yes everything is performed at compile-time.<br/>
No runtime bytecode enhancement.<br/>
No runtime introspection.</p>

<blockquote><p>As everything is resolved at compile-time, you will have a compile error if you did not import the required implicits for all the types of the fields.</p></blockquote>

<br/>


<h1><a name="scala-macros">Json inception is Scala 2.10 Macros</a></h1>

<p>We needed a Scala feature enabling:</p>

<ul>
<li>compile-time code enhancement</li>
<li>compile-time class/implicits inspection</li>
<li>compile-time code injection</li>
</ul>


<p>This is enabled by a new experimental feature introduced in Scala 2.10: <a href="http://scalamacros.org/">Scala Macros</a></p>

<p>Scala macros is a new feature (still experimental) with a huge potential. You can :</p>

<ul>
<li>introspect code at compile-time based on Scala reflection API,</li>
<li>access all imports, implicits in the current compile context</li>
<li>create new code expressions, generate compiling errors and inject them into compile chain.</li>
</ul>


<p>Please note that:</p>

<ul>
<li><strong>We use Scala Macros because it corresponds exactly to our requirements.</strong></li>
<li><strong>We use Scala macros as an enabler, not as an end in itself.</strong></li>
<li><strong>The macro is a helper that generates the code you could write by yourself.</strong></li>
<li><strong>It doesn&#8217;t add, hide unexpected code behind the curtain.</strong></li>
<li><strong>We follow the <em>no-surprise</em> principle</strong></li>
</ul>


<p>As you may discover, writing a macro is not a trivial process since your macro code executes in the compiler runtime (or universe).</p>

<pre><code>So you write macro code 
  that is compiled and executed 
  in a runtime that manipulates your code 
     to be compiled and executed 
     in a future runtime…           
</code></pre>

<p><strong>That&#8217;s also certainly why I called it <em>Inception</em> ;)</strong></p>

<p>So it requires some mental exercises to follow exactly what you do. The API is also quite complex and not fully documented yet. Therefore, you must persevere when you begin using macros.</p>

<p>I&#8217;ll certainly write other articles about Scala macros because there are lots of things to say.<br/>
This article is also meant <strong>to begin the reflection about the right way to use Scala Macros</strong>.<br/>
Great power means greater responsability so it&#8217;s better to discuss all together and establish a few good manners…</p>

<br/>


<h1><a name="writes-format">Writes[T] &amp; Format[T]</a></h1>

<blockquote><p>Please remark that JSON inception just works for case class having <code>unapply/apply</code> functions.</p></blockquote>

<p>Naturally, you can also <em>incept</em> <code>Writes[T]</code>and <code>Format[T]</code>.</p>

<h2><a name="writes">Writes[T]</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">import</span> <span class="err">play.api.libs.json._</span>
</span><span class='line'><span class="err">import</span> <span class="err">play.api.libs.functional.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="err">implicit</span> <span class="err">val</span> <span class="err">personWrites</span> <span class="err">=</span> <span class="err">Json.writes</span><span class="p">[</span><span class="err">Person</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a name="format">Format[T]</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">import</span> <span class="err">play.api.libs.json._</span>
</span><span class='line'><span class="err">import</span> <span class="err">play.api.libs.functional.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="err">implicit</span> <span class="err">val</span> <span class="err">personWrites</span> <span class="err">=</span> <span class="err">Json.format</span><span class="p">[</span><span class="err">Person</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1><a name="conclusion">Conclusion</a></h1>

<blockquote><p>With the so-called <strong>JSON inception</strong>, we have added a <strong>helper</strong> providing a trivial way to define your <strong>default typesafe <code>Reads[T]/Writes[T]/Format[T]</code> for case classes</strong>.</p></blockquote>

<p>If anyone tells me there is still 1 line to write, I think I might become unpolite ;)</p>

<p>Have Macrofun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unveiling Play 2.1 Json API - Part 3 : JSON transformers]]></title>
    <link href="http://www.mandubian.com/2012/10/29/unveiling-play-2-dot-1-json-api-part3-json-transformers/"/>
    <updated>2012-10-29T11:10:00+01:00</updated>
    <id>http://www.mandubian.com/2012/10/29/unveiling-play-2-dot-1-json-api-part3-json-transformers</id>
    <content type="html"><![CDATA[<blockquote><p>In <a href="http://www.mandubian.com/2012/09/08/unveiling-play-2-dot-1-json-api-part1-jspath-reads-combinators/">Part 1</a> and <a href="2012-10-01-unveiling-play-2-dot-1-json-api-part2-writes-format-combinators">Part 2</a> , we have presented Json combinators for <code>Reads[T]</code>, <code>Writes[T]</code> and <code>Format[T]</code>. So now you should know how to validate JSON and convert into any structure you can write in Scala and back to JSON. But as soon as I&#8217;ve begun to use those combinators to write web applications, I almost immediately encountered a case : read JSON from network, validate it and convert it into… JSON.</p></blockquote>

<br/>


<br/>


<h1><a name="json-to-json">Introducing JSON <em>coast-to-coast</em> design</a></h1>

<h3><a name="doomed-to-OO">Are we doomed to convert JSON to OO?</a></h3>

<p>For a few years now, in almost all web frameworks (except recent JS serverside stuff maybe in which JSON is the default data structure), we have been used to get JSON from network and <strong>convert JSON (or even POST/GET data) into OO structures</strong> such as classes (or case classes in Scala). Why?</p>

<ul>
<li>for a good reason : <strong>OO structures are &#8220;language-native&#8221;</strong> and allows <strong>manipulating data with respect to your business logic</strong> in a seamless way while ensuring isolation of business logic from web layers.</li>
<li>for a more questionable reason : <strong>ORM frameworks talk to DB only with OO structures</strong> and we have (kind of) convinced ourselves that it was impossible to do else… with the well-known good &amp; bad features of ORMs… (not here to criticize those stuff)</li>
</ul>


<h3><a name="is-default-case">Is OO conversion really the default usecase?</a></h3>

<p><strong>In many cases, you don&#8217;t really need to perform any real business logic with data but validating/transforming before storing or after extracting.</strong></p>

<p>Let&#8217;s take the CRUD case:</p>

<ul>
<li>You just get the data from the network, validate them a bit and insert/update into DB.</li>
<li>In the other way, you just retrieve data from DB and send them outside.</li>
</ul>


<p>So, generally, for CRUD ops, you convert JSON into a OO structure just because the frameworks are only able to speak OO.</p>

<blockquote><p><strong>I don&#8217;t say or pretend you shouldn&#8217;t use JSON to OO conversion but maybe this is not the most common case and we should keep conversion to OO only when we have real business logic to fulfill.</strong></p></blockquote>

<h3><a name="new-players">New tech players change the way of manipulating JSON</a></h3>

<p>Besides this fact, we have some new DB types such as Mongo (or CouchDB) accepting document structured data looking almost like JSON trees (<em>isn&#8217;t BSON, Binary JSON?</em>).<br/>
With these DB types, we also have new great tools such as <a href="http://www.reactivemongo.org">ReactiveMongo</a> which provides reactive environment to stream data to and from Mongo in a very natural way.<br/>
I&#8217;ve been working with Stephane Godbillon to integrate ReactiveMongo with Play2.1 while writing the <a href="https://github.com/zenexity/Play-ReactiveMongo">Play2-ReactiveMongo module</a>. Besides Mongo facilities for Play2.1, this module provides <em>Json To/From BSON conversion typeclasses</em>.</p>

<blockquote><p><strong>So it means you can manipulate JSON flows to and from DB directly without even converting into OO.</strong></p></blockquote>

<h3><a name="new-players">JSON <em>coast-to-coast</em> design</a></h3>

<p>Taking this into account, we can easily imagine the following:</p>

<ul>
<li>receive JSON,</li>
<li>validate JSON,</li>
<li>transform JSON to fit expected DB document structure,</li>
<li>directly send JSON to DB (or somewhere else)</li>
</ul>


<p>This is exactly the same case when serving data from DB:</p>

<ul>
<li>extract some data from DB as JSON directly,</li>
<li>filter/transform this JSON to send only mandatory data in the format expected by the client (for ex, you don&#8217;t want some secure info to go out),</li>
<li>directly send JSON to the client</li>
</ul>


<p>In this context, we can easily imagine <strong>manipulating a flow of JSON data</strong> from client to DB and back without any (explicit) transformation in anything else than JSON.<br/>
Naturally, when you plug this transformation flow on <strong>reactive infrastructure provided by Play2.1</strong>, it suddenly opens new horizons.</p>

<blockquote><p>This is the so-called (by me) <strong>JSON coast-to-coast design</strong>:</p>

<ul>
<li>Don&#8217;t consider JSON data chunk by chunk but as a <strong>continuous flow of data from client to DB (or else) through server</strong>,</li>
<li>Treat the <strong>JSON flow like a pipe that you connect to others pipes</strong> while applying modifications, transformations alongside,</li>
<li>Treat the flow in a <strong>fully asynchronous/non-blocking</strong> way.</li>
</ul>


<p>This is also one of the reason of being of Play2.1 reactive architecture…<br/>
I believe <strong>considering your app through the prism of flows of data changes drastically the way you design</strong> your web apps in general. It may also open new functional scopes that fit today&#8217;s webapps requirements quite better than classic architecture. Anyway, this is not the subject here ;)</p></blockquote>

<p>So, as you have deduced by yourself, to be able to manipulate Json flows based on validation and transformation directly, we needed some new tools. JSON combinators were good candidates but they are a bit too generic.<br/>
That&#8217;s why we have created some specialized combinators and API called <strong>JSON transformers</strong> to do that.</p>

<br/>


<br/>


<h1><a name="json-transf-are-reads">JSON transformers are Reads[T &lt;: JsValue]</a></h1>

<p>You may tell JSON transformers are just <code>f:JSON =&gt; JSON</code>.<br/>
So a JSON transformer could be simply a <code>Writes[A &lt;: JsValue]</code>.<br/>
But, a JSON transformer is not only a function: as we said, we also want to validate JSON while transforming it.<br/>
As a consequence, a JSON transformer is a <code>Reads[A &lt;: Jsvalue]</code>.</p>

<blockquote><p><strong>Keep in mind that a Reads[A &lt;: JsValue] is able to transform and not only to read/validate</strong></p></blockquote>

<br/>


<br/>


<h1><a name="play2-syntax">Recent Play2 JSON syntax evolutions</a></h1>

<p>As you know, Json API for Play2.1 was still draft and has evolved since I began writing article part 1/2.<br/>
We have changed a few things since (nothing conceptual, just cosmetics).</p>

<h3><a name="new-play2-syntax">Syntax clarification</a></h3>

<h5><code>Reads[A] andThen Reads[B]</code> has been renamed <code>Reads[A] andKeep Reads[B]</code> (keep the right side result)</h5>

<br/>


<h5><code>Reads[A] provided Reads[B]</code> has been renamed <code>Reads[A] keepAnd Reads[B]</code> (keep the left side result and is symmetric with andKeep)</h5>

<br/>


<h3><a name="new-reads-feature">Remarkable new Reads[A] features</a></h3>

<h5><code>Reads[A &lt;: JsValue] andThen Reads[B]</code></h5>

<p><code>andThen</code> has the classic Scala semantic of function composition : it applies <code>Reads[A &lt;: JsValue]</code> on JSON retrieving a JsValue and then applies <code>Reads[B]</code> on this JsValue.</p>

<br/>


<h5><code>Reads[A &lt;: JsValue].map(f: A =&gt; B): Reads[B]</code></h5>

<p><code>map</code> is the classic and always very useful Scala map function.</p>

<br/>


<h5><code>Reads[A &lt;: JsValue].flatMap(f: A =&gt; Reads[B]): Reads[B]</code></h5>

<p><code>flatMap</code> is the classic Scala flatMap function.</p>

<br/>


<br/>


<h1><a name="step-by-step">JSON transformers case by case</a></h1>

<h2><a name="json-def">A few reminders</a></h2>

<h3><a name="json-def">JSON new syntax</a></h3>

<p>In code samples, we&#8217;ll use the following JSON.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;key1&quot;</span> <span class="p">:</span> <span class="s2">&quot;value1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;key2&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;key21&quot;</span> <span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;key22&quot;</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;key23&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;alpha&quot;</span><span class="p">,</span> <span class="s2">&quot;beta&quot;</span><span class="p">,</span> <span class="s2">&quot;gamma&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="s2">&quot;key24&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;key241&quot;</span> <span class="p">:</span> <span class="mi">234</span><span class="err">.</span><span class="mi">123</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;key242&quot;</span> <span class="p">:</span> <span class="s2">&quot;value242&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;key3&quot;</span> <span class="p">:</span> <span class="mi">234</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remind that, in Play2, you can write this JSON as following.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value1&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;key21&quot;</span> <span class="o">-&gt;</span> <span class="mi">123</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;key22&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;key23&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="s">&quot;beta&quot;</span><span class="o">,</span> <span class="s">&quot;gamma&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="s">&quot;key24&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;key241&quot;</span> <span class="o">-&gt;</span> <span class="mf">234.123</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;key242&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value242&quot;</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;key3&quot;</span> <span class="o">-&gt;</span> <span class="mi">234</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name="controller-def">Defining Play2 JSON action controller</a></h3>

<p>Here is how you would write a Play2.1 action controller to receive and manipulate/validate JSON.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">YourController</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// not implicit because I want to control which transformer I use</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">jsonTransformer</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">doit</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span> <span class="n">js</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="c1">// do something</span>
</span><span class='line'>          <span class="nc">Ok</span><span class="o">(...)</span>  
</span><span class='line'>      <span class="o">}.</span><span class="n">recover</span> <span class="o">{</span> <span class="n">error</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="nc">BadRequest</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Please note the <code>JsResult.map</code> and <code>JsResult.recover</code> functions allowing to compose result and deal with errors.</p></blockquote>

<p>Now let&#8217;s describe JSON transformers with samples</p>

<h2><a name="step-pick">Case 1: Pick JSON value in JsPath</a></h2>

<h3><a name="step-pick-1">Pick value as JsValue</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span> <span class="o">\</span> <span class="-Symbol">&#39;key23</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res9</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">[</span><span class="err">&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">beta</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">gamma</span><span class="err">&quot;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">/</span><span class="n">key2</span><span class="o">/</span><span class="n">key23</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key2 \ 'key23).json...</code></h5>

<ul>
<li>All JSON transformers are in <code>JsPath.json.</code></li>
</ul>


<h5><code>(__ \ 'key2 \ 'key23).json.pick</code></h5>

<ul>
<li><code>pick</code> is a <code>Reads[JsValue]</code> which picks the value <strong>IN</strong> the given JsPath. Here <code>["alpha","beta","gamma"]</code></li>
</ul>


<h5><code>JsSuccess(["alpha","beta","gamma"],/key2/key23)</code></h5>

<ul>
<li>This is a simply successful <code>JsResult</code></li>
<li>For info, <code>/key2/key23</code> represents the JsPath where data were read but don&#8217;t care about it, it&#8217;s mainly used by Play API to compose JsResult(s))</li>
<li><code>["alpha","beta","gamma"]</code> is just due to the fact that we have overriden <code>toString</code></li>
</ul>


<blockquote><p><strong>To Remember</strong> <code>jsPath.json.pick</code> gets ONLY the value inside the JsPath</p></blockquote>

<br/>


<h3><a name="step-pick-2">Pick value as Type</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span> <span class="o">\</span> <span class="-Symbol">&#39;key23</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res10</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsArray</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">[</span><span class="err">&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">beta</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">gamma</span><span class="err">&quot;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">/</span><span class="n">key2</span><span class="o">/</span><span class="n">key23</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key2 \ 'key23).json.pick[JsArray]</code></h5>

<ul>
<li><code>pick[T]</code> is a <code>Reads[T &lt;: JsValue]</code> which picks the value (as a <code>JsArray</code> in our case) <strong>IN</strong> the given JsPath</li>
</ul>


<blockquote><p><strong>To Remember: <code>jsPath.json.pick[T &lt;: JsValue]</code> extracts ONLY the typed value inside the JsPath</strong></p></blockquote>

<br/>


<h2><a name="step-pickbranch">Case 2: Pick branch following JsPath</a></h2>

<h3><a name="step-pickbranch-1">Pick branch as JsValue</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span> <span class="o">\</span> <span class="-Symbol">&#39;key24</span> <span class="o">\</span> <span class="-Symbol">&#39;key241</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res11</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;key2&quot;</span><span class="k">:</span> <span class="o">{</span>
</span><span class='line'>      <span class="err">&quot;</span><span class="kt">key24</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key241</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">234</span><span class="kt">.</span><span class="err">123</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span>
</span><span class='line'>  <span class="o">/</span><span class="n">key2</span><span class="o">/</span><span class="n">key24</span><span class="o">/</span><span class="n">key241</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key2 \ 'key23).json.pickBranch</code></h5>

<ul>
<li><code>pickBranch</code> is a <code>Reads[JsValue]</code> which picks the branch from root to given JsPath</li>
</ul>


<h5><code>{"key2":{"key24":{"key242":"value242"}}}</code></h5>

<ul>
<li>The result is the branch from root to given JsPath including the JsValue in JsPath</li>
</ul>


<blockquote><p><strong>To Remember: <code>jsPath.json.pickBranch</code> extracts the single branch down to JsPath + the value inside JsPath</strong></p></blockquote>

<br/>


<h2><a name="step-copyfrom">Case 3: Copy a value from input JsPath into a new JsPath</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key25</span> <span class="o">\</span> <span class="-Symbol">&#39;key251</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span> <span class="o">\</span> <span class="-Symbol">&#39;key21</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res12</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;key25&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key251</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">/</span><span class="n">key2</span><span class="o">/</span><span class="n">key21</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key25 \ 'key251).json.copyFrom( reads: Reads[A &lt;: JsValue] )</code></h5>

<ul>
<li><code>copyFrom</code> is a <code>Reads[JsValue]</code></li>
<li><code>copyFrom</code> reads the JsValue from input JSON using provided Reads[A]</li>
<li><code>copyFrom</code> copies this extracted JsValue as the leaf of a new branch corresponding to given JsPath</li>
</ul>


<h5><code>{"key25":{"key251":123}}</code></h5>

<ul>
<li><code>copyFrom</code> reads value <code>123</code></li>
<li><code>copyFrom</code> copies this value into new branch <code>(__ \ 'key25 \ 'key251)</code></li>
</ul>


<blockquote><p><strong>To Remember: <code>jsPath.json.copyFrom(Reads[A &lt;: JsValue])</code> reads value from input JSON and creates a new branch with result as leaf</strong></p></blockquote>

<br/>


<h2><a name="step-update">Case 4: Copy full input Json &amp; update a branch</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span> <span class="o">\</span> <span class="-Symbol">&#39;key24</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">__</span><span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">].</span><span class="n">map</span><span class="o">{</span> <span class="n">o</span> <span class="k">=&gt;</span> <span class="n">o</span> <span class="o">++</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span> <span class="s">&quot;field243&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;coucou&quot;</span> <span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res13</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">value1</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key21</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key22</span><span class="err">&quot;</span><span class="kt">:true</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;key23&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;beta&quot;</span><span class="o">,</span><span class="s">&quot;gamma&quot;</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;key24&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key241</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">234</span><span class="kt">.</span><span class="err">123</span><span class="o">,</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key242</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value242</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;field243&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">coucou</span><span class="err">&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">},</span>
</span><span class='line'>      <span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="err">234</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key2).json.update(reads: Reads[A &lt; JsValue])</code></h5>

<ul>
<li>is a <code>Reads[JsObject]</code></li>
</ul>


<h5><code>(__ \ 'key2 \ 'key24).json.update(reads)</code> does 3 things:</h5>

<ul>
<li>extracts value from input JSON at JsPath <code>(__ \ 'key2 \ 'key24)</code></li>
<li>applies <code>reads</code> on this relative value and re-creates a branch <code>(__ \ 'key2 \ 'key24)</code> adding result of <code>reads</code> as leaf</li>
<li>merges this branch with full input JSON replacing existing branch (so it works only with input JsObject and not other type of JsValue)</li>
</ul>


<h5><code>JsSuccess({…},)</code></h5>

<ul>
<li>Just for info, there is no JsPath as 2nd parameter there because the JSON manipulation was done from Root JsPath</li>
</ul>


<blockquote><p><strong>To Remember: <code>jsPath.json.update(Reads[A &lt;: JsValue])</code> only works for JsObject, copies full input <code>JsObject</code> and updates jsPath with provided <code>Reads[A &lt;: JsValue]</code></strong></p></blockquote>

<br/>


<h2><a name="step-put">Case 5: Put a given value in a new branch</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key24</span> <span class="o">\</span> <span class="-Symbol">&#39;key241</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="nc">JsNumber</span><span class="o">(</span><span class="mi">456</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res14</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;key24&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key241</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">456</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key24 \ 'key241).json.put( a: =&gt; JsValue )</code></h5>

<ul>
<li>is a Reads[JsObject]</li>
</ul>


<h5><code>(__ \ 'key24 \ 'key241).json.put( a: =&gt; JsValue )</code></h5>

<ul>
<li>creates a new branch <code>(__ \ 'key24 \ 'key241)</code></li>
<li>puts <code>a</code> as leaf of this branch.</li>
</ul>


<h5><code>jsPath.json.put( a: =&gt; JsValue )</code></h5>

<ul>
<li>takes a JsValue argument passed by name allowing to pass even a closure to it.</li>
</ul>


<h5><code>jsPath.json.put</code></h5>

<ul>
<li>doesn&#8217;t care at all about input JSON</li>
<li>simply replace input JSON by given value</li>
</ul>


<blockquote><p><strong>To Remember: <code>jsPath.json.put( a: =&gt; Jsvalue )</code> creates a new branch with a given value without taking into account input JSON</strong></p></blockquote>

<br/>


<h2><a name="step-prune">Case 6: Prune a branch from input JSON</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span> <span class="o">\</span> <span class="-Symbol">&#39;key22</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res15</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;key1&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">value1</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;key3&quot;</span><span class="k">:</span><span class="err">234</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key21</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key23</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[</span><span class="err">&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">beta</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">gamma</span><span class="err">&quot;</span><span class="o">],</span>
</span><span class='line'>        <span class="s">&quot;key24&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key241</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">234</span><span class="kt">.</span><span class="err">123</span><span class="o">,</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key242</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value242</span><span class="err">&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">/</span><span class="n">key2</span><span class="o">/</span><span class="n">key22</span><span class="o">/</span><span class="n">key22</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key2 \ 'key22).json.prune</code></h5>

<ul>
<li>is a <code>Reads[JsObject]</code> that works only with JsObject</li>
</ul>


<h5><code>(__ \ 'key2 \ 'key22).json.prune</code></h5>

<ul>
<li>removes given JsPath from input JSON (<code>key22</code> has disappeared under <code>key2</code>)</li>
</ul>


<p>Please note the resulting JsObject hasn&#8217;t same keys order as input JsObject. This is due to the implementation of JsObject and to the merge mechanism. But this is not important since we have overriden <code>JsObject.equals</code> method to take this into account.</p>

<blockquote><p><strong>To Remember: <code>jsPath.json.prune</code> only works with JsObject and removes given JsPath form input JSON)</strong>
Please note that:</p>

<ul>
<li><code>prune</code> doesn&#8217;t work for recursive JsPath for the time being</li>
<li>if <code>prune</code> doesn&#8217;t find any branch to delete, it doesn&#8217;t generate any error and returns unchanged JSON.</li>
</ul>
</blockquote>

<h1><a name="more-complicated">More complicated cases</a></h1>

<h2><a name="more-complicated-pick-update">Case 7: Pick a branch and update its content in 2 places</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Reads._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key21</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">(</span>
</span><span class='line'>    <span class="n">of</span><span class="o">[</span><span class="kt">JsNumber</span><span class="o">].</span><span class="n">map</span><span class="o">{</span> <span class="k">case</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="n">nb</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="n">nb</span> <span class="o">+</span> <span class="mi">10</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">andThen</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key23</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">(</span>
</span><span class='line'>    <span class="n">of</span><span class="o">[</span><span class="kt">JsArray</span><span class="o">].</span><span class="n">map</span><span class="o">{</span> <span class="k">case</span> <span class="nc">JsArray</span><span class="o">(</span><span class="n">arr</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">JsArray</span><span class="o">(</span><span class="n">arr</span> <span class="o">:+</span> <span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;delta&quot;</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res16</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key21</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">133</span><span class="o">,</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key22</span><span class="err">&quot;</span><span class="kt">:true</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;key23&quot;</span><span class="k">:</span><span class="err">[&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;beta&quot;</span><span class="o">,</span><span class="s">&quot;gamma&quot;</span><span class="o">,</span><span class="s">&quot;delta&quot;</span><span class="err">]</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;key24&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key241</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">234</span><span class="kt">.</span><span class="err">123</span><span class="o">,</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key242</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value242</span><span class="err">&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">/</span><span class="n">key2</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key2).json.pickBranch(reads: Reads[A &lt;: JsValue])</code></h5>

<ul>
<li>extracts branch <code>__ \ 'key2</code> from input JSON and applies <code>reads</code> to the relative leaf of this branch (only to the content)</li>
</ul>


<h5><code>(__ \ 'key21).json.update(reads: Reads[A &lt;: JsValue])</code></h5>

<ul>
<li>updates <code>(__ \ 'key21)</code> branch</li>
</ul>


<h5><code>of[JsNumber]</code></h5>

<ul>
<li>is just a <code>Reads[JsNumber]</code></li>
<li>extracts a JsNumber from <code>(__ \ 'key21)</code></li>
</ul>


<h5><code>of[JsNumber].map{ case JsNumber(nb) =&gt; JsNumber(nb + 10) }</code></h5>

<ul>
<li>reads a JsNumber (<em>value 123</em> in <code>__ \ 'key21</code>)</li>
<li>uses <code>Reads[A].map</code> to increase it by <em>10</em> (in immutable way naturally)</li>
</ul>


<h5><code>andThen</code></h5>

<ul>
<li>is just the composition of 2 <code>Reads[A]</code></li>
<li>first reads is applied and then result is piped to second reads</li>
</ul>


<h5><code>of[JsArray].map{ case JsArray(arr) =&gt; JsArray(arr :+ JsString("delta")</code></h5>

<ul>
<li>reads a JsArray (<em>value [alpha, beta, gamma] in <code>__ \ 'key23</code></em>)</li>
<li>uses <code>Reads[A].map</code> to append <code>JsString("delta")</code> to it</li>
</ul>


<blockquote><p>Please note the result is just the <code>__ \ 'key2</code> branch since we picked only this branch</p></blockquote>

<br/>


<h2><a name="more-complicated-pick-prune">Case 8: Pick a branch and prune a sub-branch</a></h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Reads._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">jsonTransformer</span> <span class="k">=</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key2</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span><span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;key23</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">prune</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransformer</span><span class="o">)</span>
</span><span class='line'><span class="n">res18</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;key2&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key21</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">123</span><span class="o">,</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">key22</span><span class="err">&quot;</span><span class="kt">:true</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;key24&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key241</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">234</span><span class="kt">.</span><span class="err">123</span><span class="o">,</span>
</span><span class='line'>          <span class="err">&quot;</span><span class="kt">key242</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">value242</span><span class="err">&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">/</span><span class="n">key2</span><span class="o">/</span><span class="n">key23</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5><code>(__ \ 'key2).json.pickBranch(reads: Reads[A &lt;: JsValue])</code></h5>

<ul>
<li>extracts branch <code>__ \ 'key2</code> from input JSON and applies <code>reads</code> to the relative leaf of this branch (only to the content)</li>
</ul>


<h5><code>(__ \ 'key23).json.prune</code></h5>

<ul>
<li>removes branch <code>__ \ 'key23</code> from relative JSON</li>
</ul>


<blockquote><p>Please remark the result is just the <code>__ \ 'key2</code> branch without <code>key23</code> field.</p></blockquote>

<h1><a name="combinators">What about combinators?</a></h1>

<p>I stop there before it becomes boring (if not yet)…</p>

<p>Just keep in mind that you have now a huge toolkit to create generic JSON transformers.<br/>
You can compose, map, flatmap transformers together into other transformers. So possibilities are almost infinite.</p>

<p>But there is a final point to treat: mixing those great new JSON transformers with previously presented Reads combinators.
This is quite trivial as JSON transformers are just <code>Reads[A &lt;: JsValue]</code></p>

<p>Let&#8217;s demonstrate by writing a <strong>Gizmo to Gremlin</strong> JSON transformer.</p>

<p>Here is Gizmo:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">gizmo</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gizmo&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;description&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;features&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span> <span class="s">&quot;hairy&quot;</span><span class="o">,</span> <span class="s">&quot;cute&quot;</span><span class="o">,</span> <span class="s">&quot;gentle&quot;</span><span class="o">),</span>
</span><span class='line'>      <span class="s">&quot;size&quot;</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sex&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;undefined&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;life_expectancy&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;very old&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;danger&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;wet&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;multiplies&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;feed after midnight&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;becomes gremlin&quot;</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;loves&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;all&quot;</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is Gremlin:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">gremlin</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlin&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;description&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;features&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;skinny&quot;</span><span class="o">,</span> <span class="s">&quot;ugly&quot;</span><span class="o">,</span> <span class="s">&quot;evil&quot;</span><span class="o">),</span>
</span><span class='line'>      <span class="s">&quot;size&quot;</span> <span class="o">-&gt;</span> <span class="mi">30</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sex&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;undefined&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;life_expectancy&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;very old&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;danger&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;always&quot;</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;hates&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;all&quot;</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok let&#8217;s write a JSON transformer to do this transformation</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Reads._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">gizmo2gremlin</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;name</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;gremlin&quot;</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;description</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;size</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">update</span><span class="o">(</span> <span class="n">of</span><span class="o">[</span><span class="kt">JsNumber</span><span class="o">].</span><span class="n">map</span><span class="o">{</span> <span class="k">case</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="n">size</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="mi">3</span><span class="o">)</span> <span class="o">}</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;features</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;skinny&quot;</span><span class="o">,</span> <span class="s">&quot;ugly&quot;</span><span class="o">,</span> <span class="s">&quot;evil&quot;</span><span class="o">)</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;danger</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="nc">JsString</span><span class="o">(</span><span class="s">&quot;always&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="n">reduce</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;hates</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">copyFrom</span><span class="o">(</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;loves</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span> <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">reduce</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">gizmo</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">gizmo2gremlin</span><span class="o">)</span>
</span><span class='line'><span class="n">res22</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">play.api.libs.json.JsObject</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">JsSuccess</span><span class="o">(</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">gremlin</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;description&quot;</span><span class="k">:</span><span class="o">{</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">features</span><span class="err">&quot;</span><span class="kt">:</span><span class="o">[</span><span class="err">&quot;</span><span class="kt">skinny</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">ugly</span><span class="err">&quot;</span>,<span class="err">&quot;</span><span class="kt">evil</span><span class="err">&quot;</span><span class="o">],</span>
</span><span class='line'>        <span class="s">&quot;size&quot;</span><span class="k">:</span><span class="err">30</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;sex&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">undefined</span><span class="err">&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;life_expectancy&quot;</span><span class="k">:</span>
</span><span class='line'>        <span class="err">&quot;</span><span class="kt">very</span> <span class="kt">old</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;danger&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">always</span><span class="err">&quot;</span>
</span><span class='line'>      <span class="o">},</span>
</span><span class='line'>      <span class="s">&quot;hates&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">all</span><span class="err">&quot;</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are ;)<br/>
I&#8217;m not going to explain all of this because you should be able to understand now.<br/>
Just remark:</p>

<h5><code>(__ \ 'features).json.put(…)</code> is after <code>(__ \ 'size).json.update</code> so that it overwrites original <code>(__ \ 'features)</code></h5>

<br/>


<h5><code>(Reads[JsObject] and Reads[JsObject]) reduce</code></h5>

<ul>
<li>It merges results of both <code>Reads[JsObject]</code> (JsObject ++ JsObject)</li>
<li>It also applies the same JSON to both <code>Reads[JsObject]</code> unlike <code>andThen</code> which injects the result of the first reads into second one.</li>
</ul>


<br/>


<br/>


<h1><a name="conclusion">Conclusion</a></h1>

<p>After 3 long articles, I think we have done a full 360° around new features brought by Play2.1 JSON API.<br/>
I hope you glimpse the whole new world of possiblities it can bring to us.<br/>
Personnally, I&#8217;ve begun using it in projects and I don&#8217;t yet see the limits of it and how I&#8217;ll end using it.</p>

<p><strong>The only thing I can say is that it has changed my way of manipulating JSON data flows in general.</strong></p>

<blockquote><p>Next article coming soon: an applied example of a webapp following <em>Json coast-to-coast design</em> with <a href="http://www.reactivemongo.org">ReactiveMongo</a></p></blockquote>

<p>Have fun ;););)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unveiling Play 2.1 Json API - Part 2 : Writes/Format combinators]]></title>
    <link href="http://www.mandubian.com/2012/10/01/unveiling-play-2-dot-1-json-api-part2-writes-format-combinators/"/>
    <updated>2012-10-01T11:10:00+02:00</updated>
    <id>http://www.mandubian.com/2012/10/01/unveiling-play-2-dot-1-json-api-part2-writes-format-combinators</id>
    <content type="html"><![CDATA[<blockquote><p>In <a href="http://www.mandubian.com/2012/09/08/unveiling-play-2-dot-1-json-api-part1-jspath-reads-combinators/">Part 1 article</a>, we gave a quick overview of new Play2.1 JSON API features around JsPath and Reads combinators. It&#8217;s funny to be able to read JSON to Scala structures but it&#8217;s better to be able to <strong>write Scala structures to JSON (<code>Writes[T]</code>)</strong> and it&#8217;s even better to <strong>mix Reads and Writes (<code>Format[T]</code>)</strong> sometimes.</p></blockquote>

<p><strong>Now let&#8217;s focus on Writes and Format in the details ;)</strong></p>

<br/>


<br/>


<h1><a name="writes">Writes[T] hasn&#8217;t changed (except combinators)</a></h1>

<h2><a name="writes-2_0">Writes in Play2.0.x</a></h2>

<p>Do you remember how you had to write a Json <code>Writes[T]</code> in <code>Play2.0.x</code> ?<br/>
You had to override the <code>writes</code> function.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Writes</span><span class="o">[</span><span class="kt">-A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Convert the object into a JsValue</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">o</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">JsValue</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take the same simple case class we used in Part 1:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Creature</span><span class="o">(</span>
</span><span class='line'>  <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>  <span class="n">isDead</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span>
</span><span class='line'>  <span class="n">weight</span><span class="k">:</span> <span class="kt">Float</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <code>Play2.0.x</code>, you would write your <code>Writes[Creature]</code> as following (using new Json syntax to re-show it even if it didn&#8217;t exist in Play2.0.x ;) ):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureWrites</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Writes</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">Creature</span><span class="o">)</span><span class="k">:</span> <span class="kt">JsValue</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">name</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">isDead</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">weight</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">gizmo</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">)</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">gizmojs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">gizmo</span><span class="o">)</span>
</span><span class='line'><span class="n">gizmojs</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">gremlins</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;isDead&quot;</span><span class="k">:</span><span class="kt">false</span><span class="o">,</span><span class="s">&quot;weight&quot;</span><span class="k">:</span><span class="err">1</span><span class="kt">.</span><span class="err">0</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a name="writes-2_1">Writes in Play2.1.x</a></h2>

<p>No suspense to be kept: <strong>in Play2.1, you write Writes exactly in the same way</strong> :D</p>

<p>So what&#8217;s the difference?<br/>
As presented in Part 1, <code>Reads</code> could be combined using simple logical operators.<br/>
Using functional Scala power, we were able to <strong>provide combinators for <code>Writes[T]</code></strong>.</p>

<blockquote><p>If you want more theoretical aspects about the way it was implemented based on generic functional structures adapted to our needs, you can read this post <a href="http://sadache.tumblr.com/post/30955704987/applicatives-are-too-restrictive-breaking-applicativesfrom">&#8220;Applicatives are too restrictive, breaking Applicatives and introducing Functional Builders&#8221;</a> written by <a href="http://www.github.com/sadache">@sadache</a></p></blockquote>

<h2><a name="writes-combined">Writes main change: <em>combinators</em></a></h2>

<p>Once again, code first: re-writing previous <code>Writes[T]</code> using combinators.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// IMPORTANT import this to have the required tools in your scope</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="c1">// imports required functional generic structures</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'><span class="c1">// imports implicit structure for Writes only (always try to import only what you need)</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Writes._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureWrites</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="n">unlift</span><span class="o">(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">unapply</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or using the operators inspired by Scala parser combinators for those who know them</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureWrites</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">~</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">~</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="n">unlift</span><span class="o">(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">unapply</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">)</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'><span class="n">js</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">gremlins</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;isDead&quot;</span><span class="k">:</span><span class="kt">false</span><span class="o">,</span><span class="s">&quot;weight&quot;</span><span class="k">:</span><span class="err">1</span><span class="kt">.</span><span class="err">0</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks exactly like <code>Reads[T]</code> except a few things, isn&#8217;t it?<br/>
Let&#8217;s explain a bit (by copying Reads article changing just a few things… I&#8217;m lazy ;)):</p>

<h5><code>import play.api.libs.json.Writes._</code></h5>

<p>It imports only the required stuff for <code>Writes[T]</code> without interfering with other imports.</p>

<br/>


<h5><code>(__ \ "name").write[String]</code></h5>

<p>You apply <code>write[String]</code> on this JsPath (exactly the same as <code>Reads</code>)</p>

<br/>


<h5><code>and</code> is just an operator meaning <code>Writes[A] and Writes[B] =&gt; Builder[Writes[A ~ B]]</code></h5>

<ul>
<li><code>A ~ B</code> just means <code>Combine A and B</code> but it doesn&#8217;t suppose the way it is combined (can be a tuple, an object, whatever…)</li>
<li><code>Builder</code> is not a real type but I introduce it just to tell that the operator <code>and</code> doesn&#8217;t create directly a <code>Writes[A ~ B]</code> but an intermediate structure that is able to build a <code>Writes[A ~ B]</code> or to combine with another <code>Writes[C]</code></li>
</ul>


<br/>   


<h5><code>(…)(unlift(Creature.unapply))</code> builds a <code>Writes[Creature]</code></h5>

<ul>
<li><code>(__ \ "name").write[String] and (__ \ "isDead").write[Boolean] and (__ \ "weight").write[Float]</code> builds a <code>Builder[Writes[String ~ Boolean ~ Float])]</code> but you want a <code>Writes[Creature]</code>.</li>
<li>So you apply the <code>Builder[Writes[String ~ Boolean ~ String])]</code> to a function <code>Creature =&gt; (String, Boolean, Float)</code> to finally obtain a <code>Writes[Creature]</code>. Please note that it may seem a bit strange to provide <code>Creature =&gt; (String, Boolean, Float)</code> to obtain a <code>Writes[Creature]</code> from a <code>Builder[Writes[String ~ Boolean ~ String])]</code> but it&#8217;s due to the contravariant nature of <code>Writes[-T]</code>.</li>
<li>We have <code>Creature.unapply</code> but its signature is <code>Creature =&gt; Option[(String, Boolean, Float)]</code> so we <code>unlift</code> it to obtain <code>Creature =&gt; (String, Boolean, Float)</code>.</li>
</ul>


<br/>


<blockquote><p>The only thing you have to keep in mind is this <code>unlift</code> call which might not be natural at first sight!</p></blockquote>

<p>As you can deduce by yourself, the <code>Writes[T]</code> is far easier than the <code>Reads[T]</code> case because when writing, it doesn&#8217;t try to validate so there is no error management at all.</p>

<p>Moreover, due to this, you have to keep in mind that operators provided for <code>Writes[T]</code> are not as rich as for <code>Reads[T]</code>. Do you remind <code>keepAnd</code> and <code>andKeep</code> operators?  They don&#8217;t have any meaning for <code>Writes[T]</code>. When writing <code>A~B</code>, you write <code>A and B</code> but not <code>only A or only B</code>. So <code>and</code> is the only operators provided for <code>Writes[T]</code>.</p>

<h3>Complexifying the case</h3>

<p>Let&#8217;s go back to our more complex sample used in end of Part1.
Remember that we had imagined that our creature was modelled as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Creature</span><span class="o">(</span>
</span><span class='line'>  <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>  <span class="n">isDead</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span>
</span><span class='line'>  <span class="n">weight</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span>
</span><span class='line'>  <span class="n">email</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="c1">// email format and minLength(5)</span>
</span><span class='line'>  <span class="n">favorites</span><span class="k">:</span> <span class="o">(</span><span class="kt">String</span><span class="o">,</span> <span class="kt">Int</span><span class="o">),</span> <span class="c1">// the stupid favorites</span>
</span><span class='line'>  <span class="n">friends</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Nil</span><span class="o">,</span> <span class="c1">// yes by default it has no friend</span>
</span><span class='line'>  <span class="n">social</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span> <span class="c1">// by default, it&#39;s not social</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s write corresponding <code>Writes[Creature]</code></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// IMPORTANT import this to have the required tools in your scope</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="c1">// imports required functional generic structures</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'><span class="c1">// imports implicit structure for Writes only (always try to import only what you need)</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Writes._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureWrites</span><span class="k">:</span> <span class="kt">Writes</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;email&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;favorites&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;string&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;number&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>      <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;friends&quot;</span><span class="o">).</span><span class="n">lazyWrite</span><span class="o">(</span><span class="nc">Writes</span><span class="o">.</span><span class="n">traversableWrites</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="n">creatureWrites</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;social&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span>
</span><span class='line'><span class="o">)(</span><span class="n">unlift</span><span class="o">(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">unapply</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">gizmo</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">,</span> <span class="s">&quot;gizmo@midnight.com&quot;</span><span class="o">,</span> <span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mi">85</span><span class="o">),</span> <span class="nc">List</span><span class="o">(),</span> <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;@gizmo&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">val</span> <span class="n">gizmojs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">gizmo</span><span class="o">)</span>
</span><span class='line'><span class="n">gizmojs</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">gremlins</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;isDead&quot;</span><span class="k">:</span><span class="kt">false</span><span class="o">,</span><span class="s">&quot;weight&quot;</span><span class="k">:</span><span class="err">1</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span><span class="s">&quot;email&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">gizmo@midnight.com</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;favorites&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">string</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">number</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">85</span><span class="o">},</span><span class="s">&quot;friends&quot;</span><span class="k">:</span><span class="err">[]</span><span class="o">,</span><span class="s">&quot;social&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">@gizmo</span><span class="err">&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">zombie</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;zombie&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="mf">100.0F</span><span class="o">,</span> <span class="s">&quot;shaun@dead.com&quot;</span><span class="o">,</span> <span class="o">(</span><span class="s">&quot;ain&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">List</span><span class="o">(</span><span class="n">gizmo</span><span class="o">),</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">zombiejs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">zombie</span><span class="o">)</span>
</span><span class='line'><span class="n">zombiejs</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsValue</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;name&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">zombie</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;isDead&quot;</span><span class="k">:</span><span class="kt">true</span><span class="o">,</span><span class="s">&quot;weight&quot;</span><span class="k">:</span><span class="err">100</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span><span class="s">&quot;email&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">shaun@dead.com</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;favorites&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">string</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">ain</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">number</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">2</span><span class="o">},</span><span class="s">&quot;friends&quot;</span><span class="k">:</span><span class="err">[</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">name</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">gremlins</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">isDead</span><span class="err">&quot;</span><span class="kt">:false</span><span class="o">,</span><span class="s">&quot;weight&quot;</span><span class="k">:</span><span class="err">1</span><span class="kt">.</span><span class="err">0</span><span class="o">,</span><span class="s">&quot;email&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">gizmo@midnight.com</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;favorites&quot;</span><span class="k">:</span><span class="o">{</span><span class="err">&quot;</span><span class="kt">string</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span><span class="o">,</span><span class="err">&quot;</span><span class="kt">number</span><span class="err">&quot;</span><span class="kt">:</span><span class="err">85</span><span class="o">},</span><span class="s">&quot;friends&quot;</span><span class="k">:</span><span class="err">[]</span><span class="o">,</span><span class="s">&quot;social&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">@gizmo</span><span class="err">&quot;</span><span class="o">}</span><span class="err">]</span><span class="o">,</span><span class="s">&quot;social&quot;</span><span class="k">:</span><span class="kt">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that it&#8217;s quite straightforward. it&#8217;s far easier than <code>Reads[T]</code> as there are no special operator.
Here are the few things to explain:</p>

<h5><code>(__ \ "favorites").write(…)</code></h5>

<pre><code>(__ \ "string").write[String] and
(__ \ "number").write[Int]
tupled
</code></pre>

<ul>
<li>Remember that <code>(__ \ "string").write[String](…) and (__ \ "number").write[Int](…) =&gt; Builder[Writes[String ~ Int]]</code></li>
<li>What means <code>tupled</code> ? as for <code>Reads[T]</code>, it <em>&#8220;tuplizes&#8221;</em> your Builder: <code>Builder[Writes[A ~ B]].tupled =&gt; Writes[(A, B)]</code></li>
</ul>


<br/>


<h5><code>(__ \ "friend").lazyWrite(Writes.traversableWrites[Creature](creatureWrites))</code></h5>

<p>It&#8217;s the symmetric code for <code>lazyRead</code> to treat recursive field on <code>Creature</code> class itself:</p>

<ul>
<li><code>Writes.traversableWrites[Creature](creatureWrites)</code> creates a <code>Writes[Traversable[Creature]]</code> passing the <code>Writes[Creature]</code> itself for recursion (please note that a <code>list[Creature]</code>should appear very soon ;))</li>
<li><code>(__ \ "friends").lazyWrite[A](r: =&gt; Writes[A]))</code> : <code>lazyWrite</code> expects a <code>Writes[A]</code> value <em>passed by name</em> to allow the type recursive construction. This is the only refinement that you must keep in mind in this very special recursive case.</li>
</ul>


<blockquote><p>FYI, you may wonder why <code>Writes.traversableWrites[Creature]: Writes[Traversable[Creature]]</code> can replace <code>Writes[List[Creature]]</code>?<br/>
This is because <code>Writes[-T]</code> is contravariant meaning: if you can write a <code>Traversable[Creature]</code>, you can write a <code>List[Creature]</code> as <code>List</code> inherits <code>Traversable</code> (relation of inheritance is reverted by contravariance).</p></blockquote>

<h2><a name="format">What about combinators for Format?</a></h2>

<p>Remember in Play2.1, there was a feature called <code>Format[T] extends Reads[T] with Writes[T]</code>.<br/>
It mixed <code>Reads[T]</code> and <code>Writes[T]</code> together to provide serialization/deserialization at the same place.</p>

<p>Play2.1 provide combinators for <code>Reads[T]</code> and <code>Writes[T]</code>. What about combinators for <code>Format[T]</code> ?</p>

<p>Let&#8217;s go back to our very simple sample:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Creature</span><span class="o">(</span>
</span><span class='line'>  <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>  <span class="n">isDead</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span>
</span><span class='line'>  <span class="n">weight</span><span class="k">:</span> <span class="kt">Float</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is how you write the <code>Reads[Creature]</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Reads._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">creatureReads</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Please remark that I didn&#8217;t use <code>implicit</code> so that there is no implicit <code>Reads[Creature]</code> in the context when I&#8217;ll define <code>Format[T]</code></p></blockquote>

<p>Here is how you write the <code>Writes[Creature]</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Writes._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">creatureWrites</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="n">unlift</span><span class="o">(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">unapply</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How to gather both Reads/Writes to create a <code>Format[Creature]</code>?</h3>

<h4><a name="format-1">1st way = create from existing reads/writes</a></h4>

<p>You can reuse existing <code>Reads[T]</code> and <code>Writes[T]</code> to create a <code>Format[T]</code> as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureFormat</span> <span class="k">=</span> <span class="nc">Format</span><span class="o">(</span><span class="n">creatureReads</span><span class="o">,</span> <span class="n">creatureWrites</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">gizmojs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">gizmo</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">fromJson</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="n">gizmojs</span><span class="o">).</span><span class="n">get</span> <span class="o">==</span> <span class="n">gizmo</span><span class="o">)</span>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">gizmo</span><span class="o">)</span> <span class="o">==</span> <span class="n">gizmojs</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a name="format-2">2nd way = create using combinators</a></h4>

<p>We have Reads and Writes combinators, isn&#8217;t it?<br/>
Play2.1 also provides <strong>Format Combinators</strong> due to the magic of functional programming (actually it&#8217;s not magic, it&#8217;s just pure functional programming;) )</p>

<p>As usual, code 1st:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Format._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureFormat</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">format</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">format</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">format</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">apply</span><span class="o">,</span> <span class="n">unlift</span><span class="o">(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">unapply</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">gizmojs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">gizmo</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">fromJson</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="n">gizmojs</span><span class="o">).</span><span class="n">get</span> <span class="o">==</span> <span class="n">gizmo</span><span class="o">)</span>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">gizmo</span><span class="o">)</span> <span class="o">==</span> <span class="n">gizmojs</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing too strange…</p>

<h5><code>(__ \ "name").format[String]</code></h5>

<p>It creates a format[String] reading/writing at the given <code>JsPath</code></p>

<br/>


<h5><code>( )(Creature.apply, unlift(Creature.unapply))</code></h5>

<p>To map to a Scala structure:</p>

<ul>
<li><code>Reads[Creature]</code> requires a function <code>(String, Boolean, Float) =&gt; Creature</code></li>
<li><code>Writes[Creature]</code> requires a function <code>Creature =&gt; (String, Boolean, Float)</code></li>
</ul>


<p>So as <code>Format[Creature] extends Reads[Creature] with Writes[Creature]</code> we provide <code>Creature.apply</code> and <code>unlift(Creature.unapply)</code> and that&#8217;s all folks&#8230;</p>

<h2><a name="format">More complex case</a></h2>

<p>The previous sample is a bit dumb because the structure is really simple and because reading/writing is symmetric. We have:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Json</span><span class="o">.</span><span class="n">fromJson</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">creature</span><span class="o">))</span> <span class="o">==</span> <span class="n">creature</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, you read what you write and vis versa. So you can use the very simple <code>JsPath.format[T]</code> functions which build both <code>Reads[T]</code> and <code>Writes[T]</code> together.</p>

<p>But if we take our usual more complicated case class, how to write the <code>Format[T]</code>?</p>

<p>Remind the code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The case class</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Creature</span><span class="o">(</span>
</span><span class='line'>  <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>  <span class="n">isDead</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span>
</span><span class='line'>  <span class="n">weight</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span>
</span><span class='line'>  <span class="n">email</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="c1">// email format and minLength(5)</span>
</span><span class='line'>  <span class="n">favorites</span><span class="k">:</span> <span class="o">(</span><span class="kt">String</span><span class="o">,</span> <span class="kt">Int</span><span class="o">),</span> <span class="c1">// the stupid favorites</span>
</span><span class='line'>  <span class="n">friends</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Nil</span><span class="o">,</span> <span class="c1">// yes by default it has no friend</span>
</span><span class='line'>  <span class="n">social</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span> <span class="c1">// by default, it&#39;s not social</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.data.validation.ValidationError</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Reads._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// defines a custom reads to be reused</span>
</span><span class='line'><span class="c1">// a reads that verifies your value is not equal to a give value</span>
</span><span class='line'><span class="k">def</span> <span class="n">notEqualReads</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">v</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">r</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">filterNot</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="s">&quot;validate.error.unexpected.value&quot;</span><span class="o">,</span> <span class="n">v</span><span class="o">))(</span> <span class="k">_</span> <span class="o">==</span> <span class="n">v</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">skipReads</span><span class="o">(</span><span class="k">implicit</span> <span class="n">r</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">r</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="k">_</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">creatureReads</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;email&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span><span class="n">email</span> <span class="n">keepAnd</span> <span class="n">minLength</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="mi">5</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;favorites&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;string&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span> <span class="n">notEqualReads</span><span class="o">(</span><span class="s">&quot;ni&quot;</span><span class="o">)</span> <span class="n">andKeep</span> <span class="n">skipReads</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;number&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span> <span class="n">max</span><span class="o">(</span><span class="mi">86</span><span class="o">)</span> <span class="n">or</span> <span class="n">min</span><span class="o">(</span><span class="mi">875</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>      <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;friends&quot;</span><span class="o">).</span><span class="n">lazyRead</span><span class="o">(</span> <span class="n">list</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="n">creatureReads</span><span class="o">)</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;social&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span><span class="n">optional</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Writes._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">creatureWrites</span><span class="k">:</span> <span class="kt">Writes</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;email&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;favorites&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;string&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;number&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>      <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;friends&quot;</span><span class="o">).</span><span class="n">lazyWrite</span><span class="o">(</span><span class="nc">Writes</span><span class="o">.</span><span class="n">traversableWrites</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="n">creatureWrites</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;social&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span>
</span><span class='line'><span class="o">)(</span><span class="n">unlift</span><span class="o">(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">unapply</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>creatureReads</code> and <code>creatureWrites</code> are not exactly symmetric and couldn&#8217;t be merged in one single <code>Format[Creature]</code> as done previously.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Json</span><span class="o">.</span><span class="n">fromJson</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">creature</span><span class="o">))</span> <span class="o">!=</span> <span class="n">creature</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully, as done previously, we can build a <code>Format[T]</code> from a <code>Reads[T]</code> and a <code>Writes[T]</code>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureFormat</span><span class="k">:</span> <span class="kt">Format</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Format</span><span class="o">(</span><span class="n">creatureReads</span><span class="o">,</span> <span class="n">creatureWrites</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Testing Serialization of Creature to Json</span>
</span><span class='line'><span class="k">val</span> <span class="n">gizmo</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">,</span> <span class="s">&quot;gizmo@midnight.com&quot;</span><span class="o">,</span> <span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mi">85</span><span class="o">),</span> <span class="nc">List</span><span class="o">(),</span> <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;@gizmo&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">val</span> <span class="n">zombie</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;zombie&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="mf">100.0F</span><span class="o">,</span> <span class="s">&quot;shaun@dead.com&quot;</span><span class="o">,</span> <span class="o">(</span><span class="s">&quot;ain&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">List</span><span class="o">(</span><span class="n">gizmo</span><span class="o">),</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">zombiejs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;zombie&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">100.0</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;email&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;shaun@dead.com&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;favorites&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;string&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;ain&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;number&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;friends&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span>
</span><span class='line'>      <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;email&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gizmo@midnight.com&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;favorites&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>              <span class="s">&quot;string&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span>
</span><span class='line'>              <span class="s">&quot;number&quot;</span> <span class="o">-&gt;</span> <span class="mi">85</span>
</span><span class='line'>          <span class="o">),</span>
</span><span class='line'>          <span class="s">&quot;friends&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(),</span>
</span><span class='line'>          <span class="s">&quot;social&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;@gizmo&quot;</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>  <span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;social&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsNull</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">zombie</span><span class="o">)</span> <span class="o">==</span> <span class="n">zombiejs</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Testing Deserialization of JSON to Creature (note the dissymetric reading)</span>
</span><span class='line'><span class="k">val</span> <span class="n">gizmo2</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">,</span> <span class="s">&quot;gizmo@midnight.com&quot;</span><span class="o">,</span> <span class="o">(</span><span class="s">&quot;pha&quot;</span><span class="o">,</span> <span class="mi">85</span><span class="o">),</span> <span class="nc">List</span><span class="o">(),</span> <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;@gizmo&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">val</span> <span class="n">zombie2</span> <span class="k">=</span> <span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;zombie&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="mf">100.0F</span><span class="o">,</span> <span class="s">&quot;shaun@dead.com&quot;</span><span class="o">,</span> <span class="o">(</span><span class="s">&quot;n&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">List</span><span class="o">(</span><span class="n">gizmo2</span><span class="o">),</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">fromJson</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="n">zombiejs</span><span class="o">).</span><span class="n">get</span> <span class="o">==</span> <span class="n">zombie2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h2><a name="conclusion">Conclusion &amp; much more…</a></h2>

<p>So here is the end of this 2nd part.</p>

<blockquote><p>Json combinator is cool!<br/>
Now what about transforming Json into Json???<br/>
Why would you need this?<br/>
Hmmm: why not receive JSON, validate/transform it, send it to a managing Json (Mongo for ex or others), read it again from the DB, modify it a bit and send it out…<br/>
Json &#8220;coast to coast&#8221; without any model class…</p></blockquote>

<p>Let&#8217;s tease a bit:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">jsonTransform</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key2&quot;</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pickBranch</span><span class="o">(</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key22&quot;</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key22&quot;</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="n">js</span> <span class="k">=&gt;</span> <span class="n">js</span> <span class="o">\</span> <span class="s">&quot;key221&quot;</span> <span class="o">)</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key23&quot;</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">put</span><span class="o">(</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key23&quot;</span><span class="o">).</span><span class="n">json</span><span class="o">.</span><span class="n">pick</span><span class="o">.</span><span class="n">map</span><span class="o">{</span> <span class="k">case</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&quot;123&quot;</span><span class="o">)</span> <span class="o">}</span> <span class="o">)</span>
</span><span class='line'>    <span class="n">reduce</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span> <span class="n">reduce</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key22&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key221&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;beta&quot;</span><span class="o">),</span> <span class="s">&quot;key23&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gamma&quot;</span><span class="o">),</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="n">js</span><span class="o">.</span><span class="n">validate</span><span class="o">(</span><span class="n">jsonTransform</span><span class="o">),</span> <span class="nc">JsSuccess</span><span class="o">(</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span> <span class="s">&quot;key22&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;beta&quot;</span><span class="o">,</span> <span class="s">&quot;key23&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gamma123&quot;</span> <span class="o">)</span> <span class="o">)</span> <span class="o">)</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Next parts about Json generators/transformers ;)</p></blockquote>

<p>Have fun&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unveiling Play 2.1 Json API - Part 1 : JsPath & Reads combinators]]></title>
    <link href="http://www.mandubian.com/2012/09/08/unveiling-play-2-dot-1-json-api-part1-jspath-reads-combinators/"/>
    <updated>2012-09-08T11:10:00+02:00</updated>
    <id>http://www.mandubian.com/2012/09/08/unveiling-play-2-dot-1-json-api-part1-jspath-reads-combinators</id>
    <content type="html"><![CDATA[<blockquote><p><strong>Addendum: recent API refactoring (modified in the articled)</strong></p>

<ul>
<li><code>Reads[A] provided Reads[B]</code> has been renamed to <code>Reads[A] keepAnd Reads[B]</code></li>
<li><code>Reads[A] andThen Reads[B]</code> has been renamed to <code>Reads[A] andKeep Reads[B]</code></li>
</ul>
</blockquote>

<p>In incoming <code>Play2.1</code> version, a huge <strong>re-thinking</strong> has been done about <strong><code>JSON API</code> provided by <code>Play2.0.x</code></strong> which provides some great features but is clearly just the tip of the iceberg…<br/>
Here is a first presentation of those evolutions aimed at <strong>unleashing your JSON usage in Play2</strong> and <strong>revealing new forms of manipulation of web dataflows from/to external data systems</strong>. <br/>
A usecase of this is manipulating DB structures directly using Json without any class models for document oriented structures such as <a href="http://www.mongodb.org">MongoDB</a></p>

<blockquote><p>BTW Don&#8217;t forget the recent release of new MongoDB async/non-blocking driver <a href="http://reactivemongo.org">ReactiveMongo</a> ;-)</p></blockquote>

<div class="well">
<h3><a name="summary">Summary of main new features added in <code>Play2.1</code></a></h3>
<ul>
    <li><b>Simplified Json Objects/Arrays syntax</b> 
<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;key&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="mi">123</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key3&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mf">143.55</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
</li>
    <li><b><code>JsPath</code> for manipulating JSON in <code>XmlPath</code>-style</b> 
<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key&quot;</span> <span class="o">\</span> <span class="s">&quot;key2&quot;</span> <span class="o">\\</span> <span class="s">&quot;key3&quot;</span><span class="o">)(</span><span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
</li>
    <li><b><code>Reads[T]</code> / <code>Writes[T]</code> / <code>Format[T]</code> combinators</b> based on JsPath and simple logic operators</b>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">customReads</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">Float</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])]</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="n">email</span> <span class="n">keepAnd</span> <span class="n">minLength</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">JsPath</span><span class="err"> </span><span class="o">\</span> <span class="s">&quot;key2&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">](</span><span class="n">min</span><span class="o">(</span><span class="mi">45</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">JsPath</span><span class="err"> </span><span class="o">\</span> <span class="s">&quot;key3&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">tupled</span>
</span></code></pre></td></tr></table></div></figure>

    </li>
    <li><b><code>Reads[T]</code> API now validates JSON</b> by returning a monadic <code>JsResult[T]</code> being a <code>JsSuccess[T]</code> or a <code>JsError</code> aggregating all validation errors 
<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="mf">123.345F</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key3&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="s">&quot;beta&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">customReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">js</span><span class="o">)</span>
</span><span class='line'><span class="n">res5</span><span class="k">:</span> <span class="kt">JsSuccess</span><span class="o">((</span><span class="err">&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span><span class="o">,</span> <span class="err">123</span><span class="kt">.</span><span class="err">345</span><span class="kt">F</span><span class="o">,</span> <span class="kt">List</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">alpha</span><span class="err">&quot;</span><span class="o">,</span> <span class="err">&quot;</span><span class="kt">beta</span><span class="err">&quot;</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="n">customReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">js</span><span class="o">).</span><span class="n">fold</span><span class="o">(</span>
</span><span class='line'>  <span class="n">valid</span> <span class="k">=</span> <span class="o">{</span> <span class="n">res</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">l</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">String</span><span class="o">,</span> <span class="kt">Float</span><span class="o">,</span> <span class="nc">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="n">res</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">},</span>
</span><span class='line'>  <span class="n">invalid</span> <span class="k">=</span> <span class="o">{</span> <span class="n">errors</span> <span class="k">=&gt;</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
    
    </li>
</ul>
</div>


<p><strong>Now let&#8217;s go in the details ;)</strong></p>

<br/>


<br/>


<h1><a name="quick-json-syntax">Very Quick Json syntax</a></h1>

<p>Concerning the new Json syntax, I won&#8217;t spend time on this, it&#8217;s quite explicit and you can try it very easily by yourself.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value1&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key2&quot;</span> <span class="o">-&gt;</span> <span class="mi">234</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;key3&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>    <span class="s">&quot;key31&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;key32&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="s">&quot;beta&quot;</span><span class="o">,</span> <span class="mf">234.13</span><span class="o">),</span>
</span><span class='line'>    <span class="s">&quot;key33&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;key1&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value2&quot;</span><span class="o">,</span> <span class="s">&quot;key34&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;value34&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h1><a name="quick-jspath">Quick JsPath</a></h1>

<p>You certainly know <code>XMLPath</code> in which you can access a node of an XML AST using a simple syntax based on path.<br/>
JSON is already an AST and we can apply the same kind of syntax to it and logically we called it <code>JsPath</code>.</p>

<p>All following examples use JSON defined in previous paragraph.</p>

<h3>Building JsPath</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Simple path</span>
</span><span class='line'><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2-levels path</span>
</span><span class='line'><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span> <span class="o">\</span> <span class="s">&quot;key33&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// indexed path</span>
</span><span class='line'><span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span> <span class="o">\</span> <span class="s">&quot;key32&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="c1">// 2nd element in a JsArray</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// multiple paths</span>
</span><span class='line'><span class="nc">JsPath</span> <span class="o">\\</span> <span class="s">&quot;key1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Alternative syntax</h3>

<p><code>JsPath</code> is quite cool but we found this syntax could be made even clearer to highlight <code>Reads[T]</code> combinators in the code.<br/>
That&#8217;s why we provide an alias for <code>JsPath</code>: <code>__</code> (2 underscores).<br/>
<em>You can use it or not. This is just a visual facility because with it, you immediately find your JsPath in the code…</em></p>

<p>You can write:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Simple path</span>
</span><span class='line'><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2-levels path</span>
</span><span class='line'><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span> <span class="o">\</span> <span class="s">&quot;key33&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// indexed path</span>
</span><span class='line'><span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span> <span class="o">\</span> <span class="s">&quot;key32&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)</span> <span class="c1">// 2nd element in a JsArray</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// multiple paths</span>
</span><span class='line'><span class="nc">__</span> <span class="o">\\</span> <span class="s">&quot;key1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a sample on Reads[T] combinators to show the difference with both syntax</span>
</span><span class='line'><span class="c1">// DON&#39;T TRY TO UNDERSTAND THIS CODE RIGHT NOW… It&#39;s explained in next paragraphs</span>
</span><span class='line'><span class="k">val</span> <span class="n">customReads</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>    <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">JsPath</span><span class="err"> </span><span class="o">\</span> <span class="s">&quot;key2&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">](</span><span class="n">min</span><span class="o">(</span><span class="mi">45</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">JsPath</span><span class="err"> </span><span class="o">\</span> <span class="s">&quot;key3&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key31&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key32&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">JsPath</span> <span class="o">\</span> <span class="s">&quot;key33&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>    <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>  <span class="n">tupled</span>
</span><span class='line'>  
</span><span class='line'><span class="c1">// with __</span>
</span><span class='line'><span class="k">val</span> <span class="n">customReads</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key11&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>    <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span><span class="err"> </span><span class="o">\</span> <span class="s">&quot;key2&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">](</span><span class="n">min</span><span class="o">(</span><span class="mi">45</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span><span class="err"> </span><span class="o">\</span> <span class="s">&quot;key3&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="o">(</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key31&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key32&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>    <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key33&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>    <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>  <span class="n">tupled</span>
</span><span class='line'>  
</span><span class='line'><span class="c1">// You can immediately see the structure of the JSON tree</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Accessing value of JsPath</h3>

<p>The important function to retrieve the value at a given JsPath in a JsValue is the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">PathNode</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this function retrieves a <code>List[JsValue]</code></p>

<p>You can simply use it like:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// build a JsPath</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key1&quot;</span><span class="o">)(</span><span class="n">js</span><span class="o">)</span>
</span><span class='line'><span class="n">res12</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;value1&quot;</span><span class="o">)</span>  <span class="c1">// actually this is JsString(&quot;value1&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2-levels path</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span> <span class="o">\</span> <span class="s">&quot;key33&quot;</span><span class="o">)(</span><span class="n">js</span><span class="o">)</span>
</span><span class='line'><span class="n">res13</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">({</span><span class="s">&quot;key&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">value2</span><span class="err">&quot;</span><span class="o">,</span><span class="s">&quot;key34&quot;</span><span class="k">:</span><span class="err">&quot;</span><span class="kt">value34</span><span class="err">&quot;</span><span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// indexed path</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;key3&quot;</span> <span class="o">\</span> <span class="s">&quot;key32&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">)(</span><span class="n">js</span><span class="o">)</span>
</span><span class='line'><span class="n">res14</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mf">234.13</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// multiple paths</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="nc">__</span> <span class="o">\\</span> <span class="s">&quot;key1&quot;</span><span class="o">)(</span><span class="n">js</span><span class="o">)</span>
</span><span class='line'><span class="n">res17</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">play.api.libs.json.JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;value1&quot;</span><span class="o">,</span> <span class="s">&quot;value2&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h1><a name="reads">Reads[T] is now a validator</a></h1>

<h2><a name="reads-2_0">Reads in Play2.0.x</a></h2>

<p>Do you remember how you had to write a Json <code>Reads[T]</code> in <code>Play2.0.x</code> ?<br/>
You had to override the <code>reads</code> function.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Convert the JsValue into a A</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take the following simple case class that you want to map on JSON structure:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Creature</span><span class="o">(</span>
</span><span class='line'>  <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>  <span class="n">isDead</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span>
</span><span class='line'>  <span class="n">weight</span><span class="k">:</span> <span class="kt">Float</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <code>Play2.0.x</code>, you would write your reader as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureReads</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">js</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Creature</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Creature</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span>
</span><span class='line'>      <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">],</span>
</span><span class='line'>      <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span><span class="o">)</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'><span class="n">c</span><span class="k">:</span> <span class="kt">Creature</span><span class="o">(</span><span class="err">&quot;</span><span class="kt">gremlins</span><span class="err">&quot;</span><span class="o">,</span> <span class="kt">false</span><span class="o">,</span> <span class="mf">1.0F</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy isn&#8217;t it ?
So what&#8217;s the problem if it&#8217;s so easy?</p>

<p>Imagine, you pass the following JSON with a missing field:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens?</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">RuntimeException</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="kt">expected</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">DefaultReads$BooleanReads</span><span class="n">$</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="nc">Reads</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">98</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">DefaultReads$BooleanReads</span><span class="n">$</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="nc">Reads</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">95</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">JsValue$class</span><span class="o">.</span><span class="n">as</span><span class="o">(</span><span class="nc">JsValue</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">56</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="nc">JsUndefined</span><span class="o">.</span><span class="n">as</span><span class="o">(</span><span class="nc">JsValue</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">70</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>WHATTTTTTT????</strong>
Yes ugly RuntimeException (not even subtyped) but you can work around it using <code>JsValue.asOpt[T]</code> :)</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">c</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'><span class="n">c</span><span class="k">:</span> <span class="kt">None</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Cool but you only know that the deserialization <code>Json =&gt; Creature</code> failed but not where or on which field(s)?</strong></p>

<br/>


<br/>


<h2><a name="reads-2_1">Reads in Play2.1</a></h2>

<p>We couldn&#8217;t keep this imperfect API as is and in <code>Play2.1</code>, the <code>Reads[T]</code> API has changed into :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Convert the JsValue into a A</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">JsResult</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Yes you have to refactor all your existing custom Reads but you&#8217;ll see you&#8217;ll get lots of new interesting features…</p></blockquote>

<p>So you remark immediately <code>JsResult[A]</code> which is a very simple structure looking a bit like an Either applied to our specific problem.</p>

<p><strong><code>JsResult[A]</code> can be of 2 types</strong>:</p>

<ul>
<li><strong><code>JsSuccess[A]</code> when <code>reads</code>succeeds</strong></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">JsSuccess</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span>
</span><span class='line'>  <span class="n">value</span><span class="k">:</span> <span class="kt">T</span><span class="o">,</span> <span class="c1">// the value retrieved when deserialization JsValue =&gt; A worked</span>
</span><span class='line'>  <span class="n">path</span><span class="k">:</span> <span class="kt">JsPath</span> <span class="o">=</span> <span class="nc">JsPath</span><span class="o">()</span> <span class="c1">// the root JsPath where this A was read in the JsValue (by default, it&#39;s the root of the JsValue)</span>
</span><span class='line'><span class="o">)</span> <span class="k">extends</span> <span class="nc">JsResult</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// To create a JsSuccess from a value, simply do:</span>
</span><span class='line'><span class="k">val</span> <span class="n">success</span> <span class="k">=</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="nc">Creature</span><span class="o">(</span><span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong><code>JsError[A]</code> when <code>reads</code> fails</strong></li>
</ul>


<blockquote><p>Please note the greatest advantage of JsError is that it&#8217;s a cumulative error which can store several errors discovered in the Json at different JsPath</p></blockquote>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">JsError</span><span class="o">(</span>
</span><span class='line'>  <span class="n">errors</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[(</span><span class="kt">JsPath</span>, <span class="kt">Seq</span><span class="o">[</span><span class="kt">ValidationError</span><span class="o">])]</span>
</span><span class='line'>  <span class="c1">// the errors is a sequence of JsPath locating the path </span>
</span><span class='line'>  <span class="c1">// where there was an error in the JsValue and validation </span>
</span><span class='line'>  <span class="c1">// errors for this path</span>
</span><span class='line'><span class="o">)</span> <span class="k">extends</span> <span class="nc">JsResult</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ValidationError is a simple message with arguments (which can be mapped on localized messages)</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">ValidationError</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">args</span><span class="k">:</span> <span class="kt">Any*</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// To create a JsError, there are a few helpers and for ex:</span>
</span><span class='line'><span class="k">val</span> <span class="n">errors1</span> <span class="k">=</span> <span class="nc">JsError</span><span class="o">(</span> <span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;isDead</span><span class="o">,</span> <span class="nc">ValidationError</span><span class="o">(</span><span class="s">&quot;validate.error.missing&quot;</span><span class="o">,</span> <span class="s">&quot;isDead&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">errors2</span> <span class="k">=</span> <span class="nc">JsError</span><span class="o">(</span> <span class="nc">__</span> <span class="o">\</span> <span class="-Symbol">&#39;name</span><span class="o">,</span> <span class="nc">ValidationError</span><span class="o">(</span><span class="s">&quot;validate.error.missing&quot;</span><span class="o">,</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Errors are cumulative which is really interesting</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">errors</span> <span class="k">=</span> <span class="n">errors1</span> <span class="o">++</span> <span class="n">errors2</span>
</span><span class='line'><span class="n">errors</span><span class="k">:</span> <span class="kt">JsError</span><span class="o">(</span><span class="kt">List</span><span class="o">((</span><span class="kt">/isDead</span><span class="o">,</span><span class="kt">List</span><span class="o">(</span><span class="kt">ValidationError</span><span class="o">(</span><span class="kt">validate.error.missing</span><span class="o">,</span><span class="kt">WrappedArray</span><span class="o">(</span><span class="kt">isDead</span><span class="o">)))),</span> <span class="o">(/</span><span class="n">name</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">validate</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">missing</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="n">name</span><span class="o">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what&#8217;s interesting there is that <code>JsResult[A]</code> is a monadic structure and can be used with classic functions of such structures:</p>

<ul>
<li><code>flatMap[X](f: A =&gt; JsResult[X]): JsResult[X]</code></li>
<li><code>fold[X](invalid: Seq[(JsPath, Seq[ValidationError])] =&gt; X, valid: A =&gt; X)</code></li>
<li><code>map[X](f: A =&gt; X): JsResult[X]</code></li>
<li><code>filter(p: A =&gt; Boolean)</code></li>
<li><code>collect[B](otherwise:ValidationError)(p:PartialFunction[A,B]): JsResult[B]</code></li>
<li><code>get: A</code></li>
</ul>


<p>And some sugar such :</p>

<ul>
<li><code>asOpt</code></li>
<li><code>asEither</code></li>
<li>…</li>
</ul>


<h3>Reads[A] has become a validator</h3>

<p>As you may understand, using the new <code>Reads[A]</code>, you don&#8217;t only deserialize a JsValue into another structure but you really <strong>validate</strong> the JsValue and retrieve all the validation errors.<br/>
BTW, in <code>JsValue</code>, a new function called <code>validate</code> has appeared:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">JsValue</span> <span class="o">{</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">validate</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="k">implicit</span> <span class="nc">_reads</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">JsResult</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="nc">_reads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// same behavior but it throws a specific RuntimeException JsResultException now</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">as</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="k">implicit</span> <span class="n">fjs</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'>  <span class="c1">// exactly the same behavior has before</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">asOpt</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="k">implicit</span> <span class="n">fjs</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You can now write if you got the right implicit in your scope</span>
</span><span class='line'><span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Manipulating a JsResult[A]</h3>

<p>So when manipulating a <code>JsResult</code>, you don&#8217;t access the value directly and it&#8217;s preferable to use <code>map/flatmap/fold</code> to modify the value.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">res</span><span class="k">:</span> <span class="kt">JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// managing the success/error and potentially return something</span>
</span><span class='line'><span class="n">res</span><span class="o">.</span><span class="n">fold</span><span class="o">(</span>
</span><span class='line'>  <span class="n">valid</span> <span class="k">=</span> <span class="o">{</span> <span class="n">c</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span> <span class="n">c</span> <span class="o">);</span> <span class="n">c</span><span class="o">.</span><span class="n">name</span> <span class="o">},</span>
</span><span class='line'>  <span class="n">invalid</span> <span class="k">=</span> <span class="o">{</span> <span class="n">e</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span> <span class="n">e</span> <span class="o">);</span> <span class="n">e</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// getting the name directly (using the get can throw a NoSuchElementException if it&#39;s a JsError)</span>
</span><span class='line'><span class="k">val</span> <span class="n">name</span><span class="k">:</span> <span class="kt">JsSuccess</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">res</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="n">creature</span> <span class="k">=&gt;</span> <span class="n">creature</span><span class="o">.</span><span class="n">name</span> <span class="o">).</span><span class="n">get</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// filtering the result</span>
</span><span class='line'><span class="k">val</span> <span class="n">name</span><span class="k">:</span> <span class="kt">JsSuccess</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">res</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span> <span class="n">creature</span> <span class="k">=&gt;</span> <span class="n">creature</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;gremlins&quot;</span> <span class="o">).</span><span class="n">get</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a classic Play action</span>
</span><span class='line'><span class="k">def</span> <span class="n">getNameOnly</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">].</span><span class="n">fold</span><span class="o">(</span>
</span><span class='line'>    <span class="n">valid</span> <span class="k">=</span> <span class="o">(</span> <span class="n">res</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">name</span><span class="o">)</span> <span class="o">),</span>
</span><span class='line'>    <span class="n">invalid</span> <span class="k">=</span> <span class="o">(</span> <span class="n">e</span> <span class="k">=&gt;</span> <span class="nc">BadRequest</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rewriting the Reads[T] with JsResult[A]</h3>

<p>The <code>Reads[A]</code> API returning a JsResult, you can&#8217;t write your <code>Reads[A]</code> as before as you must return a JsResult gathering all found errors.<br/>
You could imagine simply compose Reads[T] with flatMap :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// DO NOT USE, WRONG CODE</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureReads</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">js</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">flatMap</span><span class="o">{</span> <span class="n">name</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">].</span><span class="n">flatMap</span> <span class="o">{</span> <span class="n">isDead</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">js</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">validate</span><span class="o">[</span><span class="kt">Float</span><span class="o">].</span><span class="n">map</span> <span class="o">{</span> <span class="n">weight</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="nc">Creature</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">isDead</span><span class="o">,</span> <span class="n">weight</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Remember the main purpose of <code>JsResult</code> is to gather all found errors while validating the JsValue.</p></blockquote>

<p><code>JsResult.flatMap</code> is pure monadic function (if you don&#8217;t know what it is, don&#8217;t care about it, you can understand without it) implying that the function that you pass to <code>flatMap()</code> is called only if the result is a <code>JsSuccess</code> else it just returns the <code>JsError</code>.<br/>
This means the previous code won&#8217;t aggregate all errors found during validation and will stop at first error which is exactly what we don&#8217;t want.</p>

<p>Actually, Monad pattern is not good in our case because we are not just composing Reads but we expect combining them following the schema:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Reads</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="nc">AND</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="nc">AND</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'>  <span class="k">=&gt;</span> <span class="nc">Reads</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">Boolean</span>, <span class="kt">Float</span><span class="o">)]</span>
</span><span class='line'>     <span class="k">=&gt;</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>So we need something else to be able to combine our Reads and this is the greatest new feature that <code>Play2.1</code> brings for JSON :<br/>
<strong>THE READS combinators with JsPath</strong></p></blockquote>

<br/>


<blockquote><p>If you want more theoretical aspects about the way it was implemented based on generic functional structures adapted to our needs, you can read this post <a href="http://sadache.tumblr.com/post/30955704987/applicatives-are-too-restrictive-breaking-applicativesfrom">&#8220;Applicatives are too restrictive, breaking Applicatives and introducing Functional Builders&#8221;</a> written by <a href="http://www.github.com/sadache">@sadache</a></p></blockquote>

<h3>Rewriting the Reads[T] with combinators</h3>

<p>Go directly to the example as practice is often the best :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// IMPORTANT import this to have the required tools in your scope</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureReads</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">.</span><span class="n">apply</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or in a simpler way as case class has a companion object with an apply function</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureReads</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or using the operators inspired by Scala parser combinators for those who know them</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureReads</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">~</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="o">~</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So there is nothing quite complicated, isn&#8217;t it?</p>

<h5><code>(__ \ "name")</code> is the <code>JsPath</code> where you gonna apply <code>read[String]</code></h5>

<br/>


<h5><code>and</code> is just an operator meaning <code>Reads[A] and Reads[B] =&gt; Builder[Reads[A ~ B]]</code></h5>

<ul>
<li><code>A ~ B</code> just means <code>Combine A and B</code> but it doesn&#8217;t suppose the way it is combined (can be a tuple, an object, whatever…)</li>
<li><code>Builder</code> is not a real type but I introduce it just to tell that the operator <code>and</code> doesn&#8217;t create directly a <code>Reads[A ~ B]</code> but an intermediate structure that is able to build a <code>Reads[A ~ B]</code> or to combine with another <code>Reads[C]</code></li>
</ul>


<br/>   


<h5><code>(…)(Creature)</code> builds a <code>Reads[Creature]</code></h5>

<ul>
<li><code>(__ \ "name").read[String] and (__ \ "isDead").read[Boolean] and (__ \ "weight").read[Float]</code> builds a <code>Builder[Reads[String ~ Boolean ~ Float])]</code> but you want a <code>Reads[Creature]</code>.</li>
<li>So you apply the <code>Builder[Reads[String ~ Boolean ~ String])]</code> to the function <code>Creature.apply = (String, Boolean, Float) =&gt; Creature</code> constructor to finally obtain a <code>Reads[Creature]</code></li>
</ul>


<p>Try it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span><span class="o">)</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="nc">Creature</span><span class="o">(</span><span class="n">gremlins</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="mf">1.0</span><span class="o">),)</span> <span class="c1">// nothing after last comma because the JsPath is ROOT by default</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now what happens if you have an error now?</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">js</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span> <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span><span class="o">)</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">js</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">JsError</span><span class="o">(</span><span class="nc">List</span><span class="o">((/</span><span class="n">isDead</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">validate</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">missing</span><span class="o">-</span><span class="n">path</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">())))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Explicit, isn&#8217;t it?</p>

<h3>Complexifying the case</h3>

<p>Ok, I see what you think : what about more complex cases where you have several constraints on a field and embedded Json in Json and recursive classes and whatever…</p>

<p>Let&#8217;s imagine our creature:</p>

<ul>
<li>is a relatively modern creature having an email and hating email addresses having less than 5 characters for a reason only known by the creature itself.</li>
<li>may have 2 favorites data:

<ul>
<li>1 String (called &#8220;string&#8221; in JSON) which shall not be &#8220;ni&#8221; (because it loves Monty Python too much to accept this) and then to skip the first 2 chars</li>
<li>1 Int (called &#8220;number&#8221; in JSON) which can be less than 86 or more than 875 (don&#8217;t ask why, this is creature with a different logic than ours)</li>
</ul>
</li>
<li>may have friend creatures</li>
<li>may have an optional social account because many creatures are not very social so this is quite mandatory</li>
</ul>


<p>Now the class looks like:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Creature</span><span class="o">(</span>
</span><span class='line'>  <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>  <span class="n">isDead</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span>
</span><span class='line'>  <span class="n">weight</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span>
</span><span class='line'>  <span class="n">email</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="c1">// email format and minLength(5)</span>
</span><span class='line'>  <span class="n">favorites</span><span class="k">:</span> <span class="o">(</span><span class="kt">String</span><span class="o">,</span> <span class="kt">Int</span><span class="o">),</span> <span class="c1">// the stupid favorites</span>
</span><span class='line'>  <span class="n">friends</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Nil</span><span class="o">,</span> <span class="c1">// yes by default it has no friend</span>
</span><span class='line'>  <span class="n">social</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span> <span class="c1">// by default, it&#39;s not social</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Play2.1</code> provide lots of generic Reads helpers:</p>

<ul>
<li><code>JsPath.read[A](implicit reads:Reads[A])</code> can be passed a custom <code>Reads[A]</code> which is applied to the JSON content at this JsPath. So with this property, you can compose hierarchically <code>Reads[T]</code> which corresponds to JSON tree structure.</li>
<li><code>JsPath.readOpt</code> allows <code>Reads[Option[T]]</code></li>
<li><code>Reads.email</code> which validates the String has email format</li>
<li><code>Reads.minLength(nb)</code> validates the minimum length of a String</li>
<li><code>Reads[A] or Reads[A] =&gt; Reads[A]</code> operator is a classic <code>OR</code> logic operator</li>
<li><code>Reads[A] keepAnd Reads[B] =&gt; Reads[A]</code> is an operator that tries <code>Reads[A]</code> and <code>Reads[B]</code> but only keeps the result of <code>Reads[A]</code> (For those who know Scala parser combinators <code>keepAnd == &lt;~</code> )</li>
<li><code>Reads[A] andKeep Reads[B] =&gt; Reads[B]</code> is an operator that tries <code>Reads[A]</code> and <code>Reads[B]</code> but only keeps the result of <code>Reads[B]</code> (For those who know Scala parser combinators <code>andKeep == ~&gt;</code> )</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// import just Reads helpers in scope</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.util._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.Reads._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.data.validation.ValidationError</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// defines a custom reads to be reused</span>
</span><span class='line'><span class="c1">// a reads that verifies your value is not equal to a give value</span>
</span><span class='line'><span class="k">def</span> <span class="n">notEqualReads</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">v</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">r</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Reads</span><span class="o">.</span><span class="n">filterNot</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="s">&quot;validate.error.unexpected.value&quot;</span><span class="o">,</span> <span class="n">v</span><span class="o">))(</span> <span class="k">_</span> <span class="o">==</span> <span class="n">v</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">skipReads</span><span class="o">(</span><span class="k">implicit</span> <span class="n">r</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">r</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="k">_</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureReads</span><span class="k">:</span> <span class="kt">Reads</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;email&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span><span class="n">email</span> <span class="n">keepAnd</span> <span class="n">minLength</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="mi">5</span><span class="o">))</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;favorites&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;string&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span> <span class="n">notEqualReads</span><span class="o">(</span><span class="s">&quot;ni&quot;</span><span class="o">)</span> <span class="n">andKeep</span> <span class="n">skipReads</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;number&quot;</span><span class="o">).</span><span class="n">read</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span> <span class="n">max</span><span class="o">(</span><span class="mi">86</span><span class="o">)</span> <span class="n">or</span> <span class="n">min</span><span class="o">(</span><span class="mi">875</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>      <span class="n">tupled</span>
</span><span class='line'>  <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;friends&quot;</span><span class="o">).</span><span class="n">lazyRead</span><span class="o">(</span> <span class="n">list</span><span class="o">[</span><span class="kt">Creature</span><span class="o">](</span><span class="n">creatureReads</span><span class="o">)</span> <span class="o">)</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;social&quot;</span><span class="o">).</span><span class="n">readOpt</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many things above can be understood very logically but let&#8217;s explain a bit:</p>

<h5><code>(__ \ "email").read(email keepAnd minLength[String](5))</code></h5>

<ul>
<li>As explained previously, <code>(__ \ "email").read(…)</code> applies the <code>Reads[T]</code> passed in parameter to function <code>read</code> at the given JsPath <code>(__ \ "email")</code></li>
<li><code>email keepAnd minLength[String](5) =&gt; Reads[String]</code> is a Js validator that verifies JsValue:

<ol>
<li>is a String : <code>email: Reads[String]</code> so no need to specify type here</li>
<li>has email format</li>
<li>has min length of 5 (we precise the type here because minLength is a generic <code>Reads[T]</code>)</li>
</ol>
</li>
<li>Why not <code>email and minLength[String](5)</code>? because, as explained previously, it would generate a <code>Builder[Reads[(String, String)]]</code> whereas you expect a <code>Reads[String]</code>. The <code>keepAnd</code> operator (aka <code>&lt;~</code>) does what we expect: it validates both sides but if succeeded, it keeps only the result on left side.</li>
</ul>


<br/>


<h5><code>notEqualReads("ni") andKeep skipReads</code></h5>

<ul>
<li>No need to write <code>notEqualReads[String]("ni")</code> because <code>String</code> type is inferred from <code>(__ \ "knight").read[String]</code> (the power of Scala typing engine)</li>
<li><code>skipReads</code> is a customReads that skips the first 2 chars</li>
<li><code>andKeep</code> operator (aka <code>~&gt;</code>) is simple to undestand : it validates the left and right side and if both succeeds, only keeps the result on right side. In our case, only the result of <code>skipReads</code> is kept and not the result of <code>notEqualReads</code>.</li>
</ul>


<br/>


<h5><code>max(86) or min(875)</code></h5>

<ul>
<li>Nothing to explain there, isn&#8217;t it ? <code>or</code> is the classic <code>OR</code>logic operator, nothing else</li>
</ul>


<br/>


<h5><code>(__ \ "favorites").read(…)</code></h5>

<pre><code>(__ \ "string").read[String]( notEqualReads("ni") andKeep notEqualReads("swallow") ) and
(__ \ "number").read[Int]( max(86) or min(875) )
tupled
</code></pre>

<ul>
<li>Remember that <code>(__ \ "string").read[String](…) and (__ \ "number").read[Int](…) =&gt; Builder[Reads[(String, Int)]]</code></li>
<li>What means <code>tupled</code> ?
<code>Builder[Reads[(String, Int)]]</code> can be used with a case class <code>apply</code> function to build the <code>Reads[Creature]</code> for ex. But it provides also <code>tupled</code> which is quite easy to understand : it <em>&#8220;tuplizes&#8221;</em> your Builder: <code>Builder[Reads[(A, B)]].tupled =&gt; Reads[(A, B)]</code></li>
<li>Finally <code>(__ \ "favorites").read(Reads[(String, Int)]</code> will validate a <code>(String, Int)</code> which is the expected type for field <code>favorites</code></li>
</ul>


<br/>


<h5><code>(__ \ "friend").lazyRead( list[Creature](creatureReads) )</code></h5>

<p>This is the most complicated line in this code. But you can understand why: the <code>friend</code> field is recursive on the <code>Creature</code> class itself so it requires a special treatment.</p>

<ul>
<li><code>list[Creature](…)</code> creates a <code>Reads[List[Creature]]</code></li>
<li><code>list[Creature](creatureReads)</code> passes explicitly <code>creatureReads</code> as an argument because it&#8217;s recursive and Scala requires that to resolve it. Nothing too complicated…</li>
<li><code>(__ \ "friend").lazyRead[A](r: =&gt; Reads[A]))</code> : <code>lazyRead</code> expects a <code>Reads[A]</code> value <em>passed by name</em> to allow the type recursive construction. This is the only refinement that you must keep in mind in this very special recursive case.</li>
</ul>


<br/>


<h5><code>(__ \ "social").readOpt[String]</code></h5>

<p>Nothing quite complicated to understand: we need to read an option and <code>readOpt</code> helps in doing this.</p>

<p>Now we can use this <code>Reads[Creature]</code></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">gizmojs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;email&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gizmo@midnight.com&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;favorites&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;string&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="s">&quot;number&quot;</span> <span class="o">-&gt;</span> <span class="mi">85</span><span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;friends&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(),</span>
</span><span class='line'>  <span class="s">&quot;social&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;@gizmo&quot;</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">gizmo</span> <span class="k">=</span> <span class="n">gizmojs</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'><span class="n">gizmo</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="nc">Creature</span><span class="o">(</span><span class="n">gremlins</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="mf">1.0</span><span class="o">,</span><span class="n">gizmo</span><span class="nd">@midnight</span><span class="o">.</span><span class="n">com</span><span class="o">,(</span><span class="n">pha</span><span class="o">,</span><span class="mi">85</span><span class="o">),</span><span class="nc">List</span><span class="o">(),</span><span class="nc">Some</span><span class="o">(</span><span class="nd">@gizmo</span><span class="o">)),)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">shaunjs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;zombie&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">100.0F</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;email&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;shaun@dead.com&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;favorites&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;string&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;brain&quot;</span><span class="o">,</span> <span class="s">&quot;number&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;friends&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">(</span> <span class="n">gizmojs</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">shaun</span> <span class="k">=</span> <span class="n">shaunjs</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'><span class="n">shaun</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="nc">Creature</span><span class="o">(</span><span class="n">zombie</span><span class="o">,</span><span class="kc">true</span><span class="o">,</span><span class="mf">100.0</span><span class="o">,</span><span class="n">shaun</span><span class="nd">@dead</span><span class="o">.</span><span class="n">com</span><span class="o">,(</span><span class="n">ain</span><span class="o">,</span><span class="mi">2</span><span class="o">),</span><span class="nc">List</span><span class="o">(</span><span class="nc">Creature</span><span class="o">(</span><span class="n">gremlins</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="mf">1.0</span><span class="o">,</span><span class="n">gizmo</span><span class="nd">@midnight</span><span class="o">.</span><span class="n">com</span><span class="o">,(</span><span class="n">alpha</span><span class="o">,</span><span class="mi">85</span><span class="o">),</span><span class="nc">List</span><span class="o">(),</span><span class="nc">Some</span><span class="o">(</span><span class="nd">@gizmo</span><span class="o">))),</span><span class="nc">None</span><span class="o">),)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">errorjs</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;gremlins&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;isDead&quot;</span> <span class="o">-&gt;</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;weight&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0F</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;email&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;rrhh&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;favorites&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;string&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;ni&quot;</span><span class="o">,</span> <span class="s">&quot;number&quot;</span> <span class="o">-&gt;</span> <span class="mi">500</span><span class="o">),</span>
</span><span class='line'>  <span class="s">&quot;friends&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">arr</span><span class="o">()</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">errorjs</span><span class="o">.</span><span class="n">validate</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">play.api.libs.json.JsResult</span><span class="o">[</span><span class="kt">Creature</span><span class="o">]</span> <span class="k">=</span> <span class="nc">JsError</span><span class="o">(</span><span class="nc">List</span><span class="o">((/</span><span class="n">favorites</span><span class="o">/</span><span class="n">string</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">validate</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">unexpected</span><span class="o">.</span><span class="n">value</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="n">ni</span><span class="o">)))),</span> <span class="o">(/</span><span class="n">email</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">validate</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">email</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">()),</span> <span class="nc">ValidationError</span><span class="o">(</span><span class="n">validate</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">minlength</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="mi">5</span><span class="o">)))),</span> <span class="o">(/</span><span class="n">favorites</span><span class="o">/</span><span class="n">number</span><span class="o">,</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValidationError</span><span class="o">(</span><span class="n">validate</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">max</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="mi">86</span><span class="o">)),</span> <span class="nc">ValidationError</span><span class="o">(</span><span class="n">validate</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">min</span><span class="o">,</span><span class="nc">WrappedArray</span><span class="o">(</span><span class="mi">875</span><span class="o">))))))</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>


<h2><a name="conclusion">Conclusion &amp; much more…</a></h2>

<p>So here is the end of this 1st part not to make a too long article.
But there are so many other features to explain and demonstrate and there will other parts very soon!!!</p>

<blockquote><p><code>Reads[T]</code> combinators are cool but you know what? <code>Writes[T]</code> &amp; <code>Format[T]</code> can be combined too!</p></blockquote>

<p>Let&#8217;s tease a bit:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">creatureWrites</span> <span class="k">=</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;isDead&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span> <span class="n">and</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">__</span> <span class="o">\</span> <span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">write</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
</span><span class='line'><span class="o">)(</span><span class="nc">Creature</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Next parts about <code>Writes[T]</code> combinators and another intriguing feature that I&#8217;ll name <code>Json Generators</code> ;)</p></blockquote>

<p>Have fun&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Play2 Iteratees for Normal Humans]]></title>
    <link href="http://www.mandubian.com/2012/08/27/understanding-play2-iteratees-for-normal-humans/"/>
    <updated>2012-08-27T11:17:00+02:00</updated>
    <id>http://www.mandubian.com/2012/08/27/understanding-play2-iteratees-for-normal-humans</id>
    <content type="html"><![CDATA[<blockquote><p>Thanks to <a href="http://www.twitter.com/loic_d">@loic_d</a>, we have a French translation of this article <a href="https://gist.github.com/3727850#file_iteratees_humains.md">there</a></p></blockquote>

<h4>You may have remarked that <a href="http://www.playframework.org">Play2</a> provides an intriguing feature called <em><code>Iteratee</code></em> (and its counterparts <em><code>Enumerator</code></em> and <em><code>Enumeratee</code></em>).</h4>

<h4>The main aim of this article is <strong><em>(to try)</em> to make the <code>Iteratee</code> concept understandable for most of us</strong> with reasonably simple arguments and without functional/math theory.</h4>

<br/>


<blockquote><p>This article is not meant to explain everything about <code>Iteratee</code> / <code>Enumerator</code> / <code>Enumeratee</code> but just the ideas behind it.<br/>
I&#8217;ll try to write another article to show practical samples of coding with Iteratee/Enumerator/Enumeratee.</p></blockquote>

<h1><a name="intro">Introduction</a></h1>

<blockquote><p><strong>In <a href="http://www.playframework.org/documentation/2.0.2/Iteratees">Play2 doc</a>, <code>Iteratees</code> are presented as a great tool to handle data streams reactively in a non-blocking, generic &amp; composable way for modern web programming in distributed environments.</strong></p>

<p><em>Seems great, isn&#8217;t it?<br/>
But what is an <code>Iteratee</code> exactly?<br/>
What is the difference between the <code>Iteratee</code> and the classic <code>Iterator</code> you certainly know?<br/>
Why use it? In which cases?<br/>
A bit obscure and complex, isn&#8217;t it?</em></p></blockquote>

<div class = "well">
<h3>If you are lazy and want to know just a few things</h3>
<ul>
  <li><code>Iteratee</code> is an <b>abstraction of iteration over chunks of data in a non-blocking and asynchronous way</b></li>
  <li><code>Iteratee</code> is able to <b>consume chunks of data of a given type from a producer</b> generating data chunks of the same type called <code>Enumerator</code>
  <li><code>Iteratee</code> can <b>compute a progressive result from data chunks over steps of iteration</b> (an incremented total for ex)
  <li><code>Iteratee</code> is a <b>thread-safe and immutable object that can be re-used over several `Enumerators`</b></li>
</ul>
</div>


<h3>1st advice: DO NOT SEARCH ABOUT ITERATEES ON GOOGLE</h3>

<p>When you search on Google for <code>Iteratee</code>, you find very obscure explanations based on pure functional approach or even mathematical theories. Even the documentation on Play Framework (<a href="http://www.playframework.org/documentation/2.0.2/Iteratees">there</a>) explains <code>Iteratee</code> with a fairly <em>low-level</em> approach which might be hard for beginners&#8230;</p>

<p>As a beginner in Play2, it might seem a bit tough to handle <code>Iteratee</code> concept presented in a really abstract way of manipulating data chunks.<br/>
It might seem so complicated that you will occult it and won&#8217;t use it.<br/>
It would be a shame because Iteratees are so powerful and provide a really interesting and new way to manipulate your data flows in a web app.</p>

<p>So, let&#8217;s try to explain things in a simple way. I don&#8217;t pretend to be a theoretical expert on those functional concepts and I may even say wrong things but I want to write an article that reflects what <code>Iteratee</code> means for me. Hope this could be useful to somebody&#8230;</p>

<blockquote><p>This article uses <strong>Scala</strong> for code samples but the code should be understandable by anyone having a few notions of coding and I promise not to use any weird operator (<em>but in last paragraph</em>) <strong>>&lt;> >&lt;> >&lt;> >&lt;></strong></p>

<p>The code samples are based on incoming <strong>Play2.1 master</strong> code which greatly simplifies and rationalizes the code of <code>Iteratee</code>. So don&#8217;t be surprised if API doesn&#8217;t look like Play2.0.x sometimes</p></blockquote>

<h1><a name="reminders">Reminders about iteration</a></h1>

<p>Before diving into deep <code>Iteratee</code> sea, I want to clarify what I call <strong>iteration</strong> and to try to go progressively from the concept of <code>Iterator</code> to <code>Iteratee</code>.</p>

<h4>You may know the <code>Iterator</code> concept you can find in Java. An <code>Iterator</code> allows to run over a collection of elements and then do something at each step of iteration. Let&#8217;s begin with a very simple iteration in <em>Java classic</em> way that sums all the integers of a <code>List[Int]</code></h4>

<br/>


<h3><a name="reminders-1">The first very naive implementation with <em>Java-like</em> <code>Iterator</code></a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">l</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">total</span> <span class="k">=</span> <span class="mi">0</span> <span class="c1">// will contain the final total</span>
</span><span class='line'><span class="k">var</span> <span class="n">it</span> <span class="k">=</span> <span class="n">l</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'><span class="k">while</span><span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="n">hasNext</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span>
</span><span class='line'><span class="k">=&gt;</span> <span class="n">resXXX</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1677</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without any surprise, <em>iterating over a collection</em> means :</p>

<ul>
<li>Get an iterator from the collection,</li>
<li>Get an element from the iterator (if there are any),</li>
<li>Do something : <em>here add the element value to the total</em>,</li>
<li>If there are other elements, go to the next element,</li>
<li>Do it again,</li>
<li>Etc&#8230; till there are no more element to consume in the iterator</li>
</ul>


<div class="well">
While iterating over a collection, we manipulate:
<ul>
  <li><strong>A state of iteration</strong> (is iteration finished ? This is naturally linked to the fact that there are more elements or not in the iterator?)</li>
  <li><strong>A context</strong> updated from one step to the next (the total)</li>
  <li><strong>An action</strong> updating the context</li>
</ul>
</div>


<h3><a name="reminders-2">Rewrite that using Scala <em>for-comprehension</em></a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span><span class="o">(</span> <span class="n">item</span> <span class="k">&lt;-</span> <span class="n">l</span> <span class="o">)</span> <span class="o">{</span> <span class="n">total</span> <span class="o">+=</span> <span class="n">item</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s a bit better because you don&#8217;t have to use the iterator.</p>

<h3><a name="reminders-3">Rewrite it in a more functional way</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">foreach</span><span class="o">{</span> <span class="n">item</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+=</span> <span class="n">item</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we introduce <code>List.foreach</code> function accepting an anonymous function <code>(Int =&gt; Unit)</code> as a parameter and iterating over the list: for each element in the list, it calls the function which can update the context (<em>here the total</em>).</p>

<p>The anonymous function contains the action executed at each loop while iterating over the collection.</p>

<h3><a name="reminders-3">Rewrite in a more generic way</a></h3>

<p>The anonymous function could be stored in a variable so that it can be reused in different places.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">l</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">l2</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">134</span><span class="o">,</span> <span class="mi">664</span><span class="o">,</span> <span class="mi">987</span><span class="o">,</span> <span class="mi">456</span><span class="o">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">total</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">def</span> <span class="n">step</span><span class="o">(</span><span class="n">item</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">total</span> <span class="o">+=</span> <span class="n">item</span>
</span><span class='line'><span class="n">l</span> <span class="n">foreach</span> <span class="n">step</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">l2</span> <span class="n">foreach</span> <span class="n">step</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>You should then say to me: <em>&#8220;This is ugly design, your function has side-effects and uses a variable which is not a nice design at all and you even have to reset total to 0 at second call!&#8221;</em></p></blockquote>

<p>That&#8217;s completely true:</p>

<blockquote><p><strong>Side-effect functions are quite dangerous</strong> because they change the state of something that is external to the function. This state is not exclusive to the function and can be changed by other entities, potentially in other threads. Function with side-effects are not recommended to have clean and robust designs and functional languages such as Scala tend to reduce side-effects functions to the strict necessary (IO operations for ex).</p>

<p><strong>Mutable variables are also risky</strong> because if your code is run over several threads, if 2 threads try to change the value of the variable, who wins? In this case, you need synchronization which means blocking threads while writing the variable which means breaking one of the reason of being of Play2 (non-blocking web apps)&#8230;</p></blockquote>

<h3><a name="reminders-4">Rewrite the code in an immutable way without side-effects</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">foreach</span><span class="o">(</span><span class="n">l</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">step</span><span class="o">(</span><span class="n">l</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="n">total</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">l</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">List</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">total</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">List</span><span class="o">(</span><span class="n">elt</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+</span> <span class="n">elt</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">head</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span> <span class="n">step</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">total</span> <span class="o">+</span> <span class="n">head</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">step</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">foreach</span><span class="o">(</span><span class="n">l</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>A bit more code, isn&#8217;t it ?</h4>

<h4>But please notice at least:</h4>

<ul>
<li><code>var total</code> disappeared.</li>
<li><code>step</code> function is the action executed at each step of iteration but it does something more than before: <code>step</code> also manages the state of the iteration. It executes as following:

<ul>
<li>If the list is empty, return current <code>total</code></li>
<li>If the list has 1 element, return <code>total + elt</code></li>
<li>If the list has more than 1 element, calls <code>step</code> with the tail elements and the new total <code>total + head</code></li>
</ul>
</li>
</ul>


<p>So at each step of iteration, depending on the result of previous iteration, <code>step</code> can choose between 2 states:</p>

<ul>
<li>Continue iteration because it has more elements</li>
<li>Stop iteration because it reached end of list or no element at all</li>
</ul>


<h4>Notice also that :</h4>

<ul>
<li><strong><code>step</code> is a <em>tail-recursive</em> function</strong> (doesn&#8217;t unfold the full call stack at the end of recursion and returns immediately) preventing from stack overflow and behaving almost like the previous code with <code>Iterator</code></li>
<li><strong><code>step</code> transmits the remaining elements of the list &amp; the new total</strong> to the next step</li>
<li><strong><code>step</code> returns the total without any side-effects</strong> at all</li>
</ul>


<blockquote><p>So, yes, this code consumes a bit more memory because it re-copies some parts of the list at each step (only the references to the elements) but it has no side-effect and uses only immutable data structures.
This makes it very robust and distributable without any problem.</p></blockquote>

<p>Notice you can write the code in a very shorter way using the wonderful functions provided by Scala collections:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mi">0</span><span class="o">){</span> <span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="n">elt</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+</span> <span class="n">elt</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<div class="well">
<h3><a name="reminders-milestone">Milestone</a></h3>
<br/>
In this article, I consider iteration based on immutable structures propagated over steps.
From this point of view, iterating involves:
<ul>
<li>receiving information from the previous step: context & state</li>
<li>getting current/remaining element(s)</li>
<li>computing a new state & context from remaining elements</li>
<li>propagating the new state & context to next step</li>
</ul>

</div>


<hr />

<h1><a name="step-by-step">Step by Step to <em>Iterator</em> &amp; <em>Iteratees</em></a></h1>

<p>Now that we are clear about iteration, let&#8217;s go back to our <code>Iteratee</code>!!!</p>

<h4>Imagine you want to generalize the previous iteration mechanism and be able to write something like:</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sumElements</span><span class="o">(...)</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="k">def</span> <span class="n">prodElements</span><span class="o">(...)</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="k">def</span> <span class="n">printElements</span><span class="o">(...)</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">iterate</span><span class="o">(</span><span class="n">sumElements</span><span class="o">)</span>
</span><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">iterate</span><span class="o">(</span><span class="n">prodElements</span><span class="o">)</span>
</span><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">iterate</span><span class="o">(</span><span class="n">printElements</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Yes I know, with Scala collection APIs, you can do many things :)</p></blockquote>

<h4>Imagine you want to compose a first iteration with another one:</h4>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">groupElements</span><span class="o">(...)</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="k">def</span> <span class="n">printElements</span><span class="o">(...)</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">iterate</span><span class="o">(</span><span class="n">groupElements</span><span class="o">).</span><span class="n">iterate</span><span class="o">(</span><span class="n">printElements</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Imagine you want to apply this iteration on something else than a collection:</h4>

<ul>
<li>a stream of data produced progressively by a file, a network connection, a database connection,</li>
<li>a data flow generated by an algorithm,</li>
<li>a data flow from an asynchronous data producer such as a scheduler or an actor.</li>
</ul>


<p><strong>Iteratees are exactly meant for this&#8230;</strong></p>

<p>Just to tease, here is how you would write the previous sum iteration with an <code>Iteratee</code>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">enumerator</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'><span class="n">enumerator</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">(</span><span class="mi">0</span><span class="o">){</span> <span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="n">elt</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+</span> <span class="n">elt</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, it looks like the previous code and doesn&#8217;t seem to do much more&#8230;<br/>
Not false but trust me, it can do much more.<br/>
At least, it doesn&#8217;t seem so complicated?</p>

<p>But, as you can see, <code>Iteratee</code> is used with <code>Enumerator</code> and both concepts are tightly related.</p>

<p><strong>Now let&#8217;s dive into those concepts on a step by step approach.</strong></p>

<br/>


<h2><a name="step-by-step-enumerator">>&lt;> About Enumerator >&lt;></a></h2>

<h3><code>Enumerator</code> is a more generic concept than collections or arrays</h3>

<p>Till now, we have used collections in our iterations. But as explained before, we could iterate over something more generic, simply being able to produce simple chunks of data available immediately or asynchronously in the future.</p>

<p><code>Enumerator</code> is designed for this purpose.</p>

<p>A few examples of simple Enumerators:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// an enumerator of Strings</span>
</span><span class='line'><span class="k">val</span> <span class="n">stringEnumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumerate</span><span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="s">&quot;beta&quot;</span><span class="o">,</span> <span class="s">&quot;gamma&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">// an enumerator of Integers</span>
</span><span class='line'><span class="k">val</span> <span class="n">integerEnumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumerate</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="mi">456</span><span class="o">,</span> <span class="mi">789</span><span class="o">)</span>
</span><span class='line'><span class="c1">// an enumerator of Doubles</span>
</span><span class='line'><span class="k">val</span> <span class="n">doubleEnumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumerate</span><span class="o">(</span><span class="mf">123.345</span><span class="o">,</span> <span class="mf">456.543</span><span class="o">,</span> <span class="mf">789.123</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// an Enumerator from a file</span>
</span><span class='line'><span class="k">val</span> <span class="n">fileEnumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="s">&quot;myfile.txt&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// an Enumerator generated by a callback</span>
</span><span class='line'><span class="c1">// it generates a string containing current time every 500 milliseconds</span>
</span><span class='line'><span class="c1">// notice (and forget for the time being) the Promise.timeout which allows non-blocking mechanism</span>
</span><span class='line'><span class="k">val</span> <span class="n">dateGenerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">.</span><span class="n">generateM</span><span class="o">(</span>
</span><span class='line'>  <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Promise</span><span class="o">.</span><span class="n">timeout</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;current time %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">((</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Date</span><span class="o">()))),</span>
</span><span class='line'>    <span class="mi">500</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Enumerator</code> is a <em>PRODUCER</em> of statically typed chunks of data.</h3>

<p><code>Enumerator[E]</code> produces chunks of data of type <code>E</code> and can be of the 3 following kinds:</p>

<ul>
<li><code>Input[E]</code> is a chunk of data of type E : <em>for ex, Input[Pizza] is a chunk of Pizza</em>.</li>
<li><code>Input.Empty</code> means the enumerator is empty : <em>for ex, an Enumerator streaming an empty file</em>.</li>
<li><code>Input.EOF</code> means the enumerator has reached its end : <em>for ex, Enumerator streaming a file and reaching the end of file</em>.</li>
</ul>


<p><em>You can draw a parallel between the kinds of chunks and the states presented above (has more/no/no more elements).</em></p>

<p>Actually, <code>Enumerator[E]</code> contains <code>Input[E]</code> so you can put an <code>Input[E]</code> in it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// create an enumerator containing one chunk of pizza</span>
</span><span class='line'><span class="k">val</span> <span class="n">pizza</span> <span class="k">=</span> <span class="nc">Pizza</span><span class="o">(</span><span class="s">&quot;napolitana&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">enumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">Pizza</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">.</span><span class="n">enumInput</span><span class="o">(</span><span class="nc">Input</span><span class="o">.</span><span class="n">el</span><span class="o">(</span><span class="n">pizza</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create an enumerator containing no pizza</span>
</span><span class='line'><span class="k">val</span> <span class="n">enumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">Pizza</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">.</span><span class="n">enumInput</span><span class="o">(</span><span class="nc">Input</span><span class="o">.</span><span class="nc">Empty</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Enumerator</code> is a non-blocking producer</h3>

<p>The idea behind Play2 is, as you may know, to be fully non-blocking and asynchronous. Thus, <code>Enumerator</code>/<code>Iteratee</code> reflects this philosophy.
The <code>Enumerator</code> produces chunks in a completely asynchronous and non-blocking way. This means the concept of <code>Enumerator</code> is not by default related to an active process or a background task generating chunks of data.</p>

<p>Remember the code snippet above with <code>dateGenerator</code> which reflects exactly the asynchronous and non-blocking nature of <code>Enumerator</code>/<code>Iteratee</code>?</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// an Enumerator generated by a callback</span>
</span><span class='line'><span class="c1">// it generates a string containing current time every 500 milliseconds</span>
</span><span class='line'><span class="c1">// notice the Promise.timeout which provide a non-blocking mechanism</span>
</span><span class='line'><span class="k">val</span> <span class="n">dateGenerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">.</span><span class="n">generateM</span><span class="o">(</span>
</span><span class='line'>  <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Promise</span><span class="o">.</span><span class="n">timeout</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;current time %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">((</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Date</span><span class="o">()))),</span>
</span><span class='line'>    <span class="mi">500</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>What&#8217;s a Promise?</strong></p>

<p>It would require a whole article but let&#8217;s say the name corresponds exactly to what it does.<br/>
A <code>Promise[String]</code> means : &#8221;<em>It will provide a String in the future (or an error)</em>&#8221;, that&#8217;s all. Meanwhile, it doesn&#8217;t block current thread and just releases it.</p></blockquote>

<h3><code>Enumerator</code> requires a consumer to produce</h3>

<p>Due to its non-blocking nature, if nobody consumes those chunks, the <code>Enumerator</code> doesn&#8217;t block anything and doesn&#8217;t consume any hidden runtime resources.<br/>
So, <strong><code>Enumerator</code> <em>MAY</em> produce chunks of data only if there is someone to consume them</strong>.</p>

<br/>




<div class="well">
So what consumes the chunks of data produced by <code>Enumerator</code>?<br/>
You have deduced it yourself: the <code>Iteratee</code>
</div>


<p></p>

<br/>


<br/>


<h2><a name="step-by-step-iteratee">>&lt;> About Iteratee >&lt;></a></h2>

<h3><code>Iteratee</code> is a generic <em>&#8220;stuff&#8221;</em> that can iterate over an <code>Enumerator</code></h3>

<p>Let&#8217;s be windy for one sentence:</p>

<blockquote><p><code>Iteratee</code> is the generic translation of the concept of iteration in pure functional programming.<br/>
While <code>Iterator</code> is built from the collection over which it will iterate, <code>Iteratee</code> is a generic entity that waits for an <code>Enumerator</code> to be iterated over.</p></blockquote>

<p>Do you see the difference between <code>Iterator</code> and <code>Iteratee</code>? No? Not a problem… Just remember that:</p>

<ul>
<li>an <code>Iteratee</code> is a generic entity that can <em>iterate</em> over the chunks of data produced by an <code>Enumerator</code> (or something else)</li>
<li>an <code>Iteratee</code> is created independently of the <code>Enumerator</code> over which it will iterate and the <code>Enumerator</code> is provided to it</li>
<li>an <code>Iteratee</code> is immutable, stateless and fully reusable for different enumerators</li>
</ul>


<p>That&#8217;s why we say:</p>

<blockquote><p>An <code>Iteratee</code> is applied on an <code>Enumerator</code> or run over an <code>Enumerator</code>.</p></blockquote>

<p>Do you remember the example above computing the total of all elements of an Enumerator[Int] ?<br/>
Here is the same code showing that an <code>Iteratee</code> can be created once and reused several times on different Enumerators.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">iterator</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">(</span><span class="mi">0</span><span class="o">){</span> <span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="n">elt</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+</span> <span class="n">elt</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">e1</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">e2</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">345</span><span class="o">,</span> <span class="mi">123</span><span class="o">,</span> <span class="mi">476</span><span class="o">,</span> <span class="mi">187687</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we apply the iterator on the enumerator</span>
</span><span class='line'><span class="n">e1</span><span class="o">(</span><span class="n">iterator</span><span class="o">)</span>      <span class="c1">// or e1.apply(iterator)</span>
</span><span class='line'><span class="n">e2</span><span class="o">(</span><span class="n">iterator</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we run the iterator over the enumerator to get a result</span>
</span><span class='line'><span class="k">val</span> <span class="n">result1</span> <span class="k">=</span> <span class="n">e1</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">iterator</span><span class="o">)</span> <span class="c1">// or e1 run iterator</span>
</span><span class='line'><span class="k">val</span> <span class="n">result2</span> <span class="k">=</span> <span class="n">e2</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">iterator</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em><code>Enumerator.apply</code> and <code>Enumerator.run</code> are slightly different functions and we will explain that later.</em></p></blockquote>

<h3><code>Iteratee</code> is an active consumer of chunks of data</h3>

<p>By default, the <code>Iteratee</code> awaits a first chunk of data and immediately after, it launches the iteration mechanism.
The <code>Iteratee</code> goes on consuming data until it considers it has finished its computation.<br/>
Once initiated, the <code>Iteratee</code> is fully responsible for the full iteration process and decides when it stops.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// creates the iteratee</span>
</span><span class='line'><span class="k">val</span> <span class="n">iterator</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">(</span><span class="mi">0</span><span class="o">){</span> <span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="n">elt</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+</span> <span class="n">elt</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates an enumerator</span>
</span><span class='line'><span class="k">val</span> <span class="n">e</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this injects the enumerator into the iteratee </span>
</span><span class='line'><span class="c1">// = pushes the first chunk of data into the iteratee</span>
</span><span class='line'><span class="n">enumerator</span><span class="o">(</span><span class="n">iterator</span><span class="o">)</span>
</span><span class='line'><span class="c1">// the iteratee then consumes as many chunks as it requires</span>
</span><span class='line'><span class="c1">// don&#39;t bother about the result of this, we will explain later</span>
</span></code></pre></td></tr></table></div></figure>


<p>As explained above, the <code>Enumerator</code> is a producer of chunks of data and it expects a consumer to consume those chunks of data.<br/>
To be consumed/iterated, the <code>Enumerator</code> has to be injected/plugged into an <code>Iteratee</code> or more precisely the first chunk of data has to be
injected/pushed into the <code>Iteratee</code>.<br/>
Naturally the <code>Iteratee</code> is dependent on speed of production of <code>Enumerator</code>: if it&#8217;s slow, the <code>Iteratee</code> is also slow.</p>

<blockquote><p>Notice the relation Iteratee/Enumerator can be considered with respect to inversion of control and dependency injection pattern.</p></blockquote>

<h3><code>Iteratee</code> is a &#8221;<em>1-chunk-loop</em>&#8221; function</h3>

<p>The <code>Iteratee</code> consumes chunks one by one until it considers it has ended iteration.<br/>
Actually, the real scope of an <code>Iteratee</code> is limited to the treatment of one chunk.
That&#8217;s why it can be defined as a function being able to consume one chunk of data.</p>

<h3><code>Iteratee</code> accepts static typed chunks and computes a static typed result</h3>

<p>Whereas an <code>Iterator</code> iterates over chunks of data coming from the collection that created it, an <code>Iteratee</code> is a bit more ambitious : it can
compute something meanwhile it consumes chunks of data.</p>

<p>That&#8217;s why the signature of Iteratee is :</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">+A</span><span class="o">]</span>
</span><span class='line'><span class="c1">// E is the type of data contained in chunks. So it can only be applied on a Enumerator[E]</span>
</span><span class='line'><span class="c1">// A is the result of the iteration</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go back to our first sample : compute the total of all integers produced by an <code>Enumerator[Int]</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// creates the iteratee</span>
</span><span class='line'><span class="k">val</span> <span class="n">iterator</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">(</span><span class="mi">0</span><span class="o">){</span> <span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="n">elt</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+</span> <span class="n">elt</span> <span class="o">}</span>
</span><span class='line'><span class="k">val</span> <span class="n">e</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// runs the iteratee over the enumerator and retrieve the result</span>
</span><span class='line'><span class="k">val</span> <span class="n">total</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">enumerator</span> <span class="n">run</span> <span class="n">iterator</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Notice the usage of <code>run</code>: You can see that the result is not the total itself but a <code>Promise[Int]</code> of the total because we are in an asynchronous world.<br/>
To retrieve the real total, you could use scala concurrent blocking <code>Await._</code> functions. But this is NOT good because it&#8217;s a blocking API. As Play2 is fully async/non-blocking, the best practice is to
propagate the promise using <code>Promise.map/flatMap</code>.</p></blockquote>

<p>But a result is not mandatory. For ex, let&#8217;s just println all consumed chunks:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// creates the iteratee</span>
</span><span class='line'><span class="k">val</span> <span class="n">e</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'><span class="n">e</span><span class="o">(</span><span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span> <span class="n">println</span> <span class="k">_</span> <span class="o">))</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span> <span class="n">println</span> <span class="k">_</span> <span class="o">))</span>
</span><span class='line'><span class="c1">// yes here the usage of _ is so trivial that you shall use it</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is not necessarily a primitive type, it can just be the concatenation of all chunks into a List for ex:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">enumerator</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">list</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="n">enumerator</span> <span class="n">run</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">getChunks</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Iteratee</code> can propagate the immutable context &amp; state over iterations</h3>

<p>To be able to compute final total, the <code>Iteratee</code> needs to propagate the partial totals along iteration steps.<br/>
This means the <code>Iteratee</code> is able to receive a context (<em>the previous total for ex</em>) from the previous step, then compute the new context with current chunk of data
(<em>new total = previous total + current element</em>) and can finally propagate this context to the next step (if there need to be a next step).</p>

<h3><code>Iteratee</code> is simply a state machine</h3>

<p>Ok this is cool but how does the <code>Iteratee</code> know it has to stop iterating?<br/>
What happens if there were an error/ EOF or it has reached the end of <code>Enumerator</code>?<br/>
Therefore, in addition to the context, the <code>Iteratee</code> should also receive previous state, decides what to do and potentially computes the new state to be sent to next step.</p>

<p>Now, remember the classic iteration states described above. For <code>Iteratee</code>, there are almost the same 2 possible states of iteration:</p>

<ul>
<li>State <code>Cont</code> : the iteration can continue with next chunk and potentially compute new context</li>
<li>State <code>Done</code> : it signals it has reached the end of its process and can return the resulting context value</li>
</ul>


<p>and a 3rd one which seems quite logical:</p>

<ul>
<li>State <code>Error</code> : it signals there was an Error during current step and stops iterating</li>
</ul>


<blockquote><p><strong>From this point of view, we can consider the <code>Iteratee</code> is just a state machine in charge of looping over state <code>Cont</code> until it detects conditions to switch to terminal states <code>Done</code> or <code>Error</code>.</strong></p></blockquote>

<h3><code>Iteratee</code> states <code>Done/Error/Cont</code> are also <code>Iteratee</code></h3>

<p>Remember, the <code>Iteratee</code> is defined as a 1-chunk-loop function and it&#8217;s main purpose is to change from one state to another one.
Let&#8217;s consider those states are also <code>Iteratee</code>.</p>

<p>We have 3 &#8221;<em>State</em>&#8221; Iteratees:</p>

<p><code>Done[E, A](a: A, remaining: Input[E])</code></p>

<ul>
<li><code>a:A</code> the context received from previous step</li>
<li><code>remaining: Input[E]</code> representing the next chunk</li>
</ul>


<br/>


<p><code>Error[E](msg: String, input: Input[E])</code></p>

<p>Very simple to understand also: an error message and the input on which it failed.</p>

<br/>


<p><code>Cont[E, A](k: Input[E] =&gt; Iteratee[E, A])</code></p>

<p>This is the most complicated State as it&#8217;s built from a function taking an <code>Input[E]</code> and returning another <code>Iteratee[E,A]</code>.
Without going too deep in the theory, you can easily understand that <code>Input[E] =&gt; Iteratee[E, A]</code> is simply a good way to consume one input and return a new state/iteratee
which can consume another input and return another state/iteratee etc… till reaching state Done or Error.<br/>
This construction ensures feeding the iteration mechanism (in a typical functional way).</p>

<p>Ok lots of information, isn&#8217;t it?
You certainly wonder why I explain of all of that?
This is just because if you understand that, you will understand how to create an custom <code>Iteratee</code>.</p>

<p>Let&#8217;s write an <code>Iteratee</code> computing the total of the 2 first elements in an <code>Enumerator[Int]</code> to show an example.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Defines the Iteratee[Int, Int]</span>
</span><span class='line'><span class="k">def</span> <span class="n">total2Chunks</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// `step` function is the consuming function receiving previous context (idx, total) and current chunk</span>
</span><span class='line'>  <span class="c1">// context : (idx, total) idx is the index to count loops</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">step</span><span class="o">(</span><span class="n">idx</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">total</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Input</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">i</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// chunk is EOF or Empty =&gt; simply stops iteration by triggering state Done with current total</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Input</span><span class="o">.</span><span class="nc">EOF</span> <span class="o">|</span> <span class="nc">Input</span><span class="o">.</span><span class="nc">Empty</span> <span class="k">=&gt;</span> <span class="nc">Done</span><span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="nc">Input</span><span class="o">.</span><span class="nc">EOF</span><span class="o">)</span>
</span><span class='line'>    <span class="c1">// found one chunk </span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Input</span><span class="o">.</span><span class="nc">El</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="c1">// if first or 2nd chunk, call `step` again by incrementing idx and computing new total</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="nc">Cont</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">](</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">step</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">total</span> <span class="o">+</span> <span class="n">e</span><span class="o">)(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>      <span class="c1">// if reached 2nd chunk, stop iterating</span>
</span><span class='line'>      <span class="k">else</span> <span class="nc">Done</span><span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="nc">Input</span><span class="o">.</span><span class="nc">EOF</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// initiates iteration by initialize context and first state (Cont) and launching iteration</span>
</span><span class='line'>  <span class="o">(</span><span class="nc">Cont</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">](</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">step</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">)(</span><span class="n">i</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using it</span>
</span><span class='line'><span class="k">val</span> <span class="n">promiseTotal</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span> <span class="n">run</span> <span class="n">total2Chunks</span>
</span><span class='line'><span class="n">promiseTotal</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">println</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="k">=&gt;</span> <span class="n">prints</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>With this example, you can understand that writing an Iteratee is not much different than choosing what to do at each step depending on the type of Chunk you received
 and returning the new <code>State/Iteratee</code>.</strong></p></blockquote>

<br/>


<br/>


<h2><a name="candies">A few candy for those who did not drown yet</a></h2>

<h3><code>Enumerator</code> is just a helper to deal with <code>Iteratee</code></h3>

<p>As you could see, in <code>Iteratee</code> API, there is nowhere any mention about <code>Enumerator</code>.<br/>
This is just because <code>Enumerator</code> is just a helper to interact with <code>Iteratee</code>: it can plug itself to <code>Iteratee</code> and injects the first chunk of data into it.<br/>
But you don&#8217;t need <code>Enumerator</code> to use <code>Iteratee</code> even if this is really easier and well integrated everywhere in Play2.</p>

<br/>


<h3>Difference between <code>Enumerator.apply(Iteratee)</code> and <code>Enumerator.run(Iteratee)</code></h3>

<p>Let&#8217;s go back to this point evoked earlier.
Have a look at the signature of main APIs in <code>Enumerator</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Enumerator</span><span class="o">[</span><span class="kt">E</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">i</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">A</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">i</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">|&gt;&gt;&gt;(</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>apply</code> returns last Iteratee/State</h4>

<p>The <code>apply</code> function injects the <code>Enumerator</code> into the <code>Iteratee</code> which consumes the chunks, does its job and returns a Promise of <code>Iteratee</code>.
From previous explanation, you may deduce by yourself that the returned <code>Iteratee</code> might simply be the last state after it has finished consuming the chunks it required from <code>Enumerator</code>.</p>

<h4><code>run</code> returns a Promise[Result]</h4>

<p><code>run</code> has 3 steps:</p>

<ol>
<li>Call previous <code>apply</code> function</li>
<li>Inject <code>Input.EOF</code> into <code>Iteratee</code> to be sure it has ended</li>
<li>Get the last context from <code>Iteratee</code> as a promise.</li>
</ol>


<p>Here is an example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// creates the iteratee</span>
</span><span class='line'><span class="k">val</span> <span class="n">iterator</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">(</span><span class="mi">0</span><span class="o">){</span> <span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="n">elt</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">total</span> <span class="o">+</span> <span class="n">elt</span> <span class="o">}</span>
</span><span class='line'><span class="k">val</span> <span class="n">e</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">234</span><span class="o">,</span> <span class="mi">455</span><span class="o">,</span> <span class="mi">987</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// just lets the iterator consume all chunks but doesn&#39;t require result right now</span>
</span><span class='line'><span class="k">val</span> <span class="n">totalIteratee</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="n">enumerator</span> <span class="n">apply</span> <span class="n">iterator</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// runs the iteratee over the enumerator and retrieves the result as a promise</span>
</span><span class='line'><span class="k">val</span> <span class="n">total</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">enumerator</span> <span class="n">run</span> <span class="n">iterator</span>
</span></code></pre></td></tr></table></div></figure>




<div class="well">
<h3>To Remember</h3>
<h4>When you need the result of <code>Iteratee</code>, you shall use <code>run</code></h4>
<h4>When you need to apply an <code>Iteratee</code> over an <code>Enumerator</code> without retrieving the result, you shall use <code>apply</code></h4>
</div>




<br/>


<h3><code>Iteratee</code> is a Promise[Iteratee] (<em>IMPORTANT TO KNOW</em>)</h3>

<p>One more thing to know about an Iteratee is that <strong>Iteratee is a Promise[Iteratee]</strong> by definition.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// converts a Promise[Iteratee] to Iteratee</span>
</span><span class='line'><span class="k">val</span> <span class="n">p</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="k">val</span> <span class="n">it</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">flatten</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// converts an Iteratee to a Promise[Iteratee]</span>
</span><span class='line'><span class="c1">// pure promise</span>
</span><span class='line'><span class="k">val</span> <span class="n">p1</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">it</span><span class="o">)</span>
</span><span class='line'><span class="c1">// using unflatten</span>
</span><span class='line'><span class="k">val</span> <span class="n">p2</span><span class="k">:</span> <span class="kt">Promise</span><span class="o">[</span><span class="kt">Iteratee</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="n">it</span><span class="o">.</span><span class="n">unflatten</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="k">_</span><span class="o">.</span><span class="n">it</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// unflatten returns a technical structure called Step wrapping the Iteratee in _.it</span>
</span></code></pre></td></tr></table></div></figure>




<div class="well">
<h3><code>Iteratee</code> <=> <code>Promise[Iteratee]</code></h3>
<h4>This means that you can build your code around Iteratee in a very lazy way : with Iteratee, you can switch to Promise and back as you want.</h4>
</div>




<br/>


<hr />

<h2><a name="enumeratee">Final words about <em>Enumeratee</em></a></h2>

<blockquote><p>You discovered <code>Iteratee</code>, then <code>Enumerator</code>…<br/>
And now you come across this…  <code>Enumeratee</code>???<br/>
What is that new stuff in <code>XXXtee</code> ?????</p></blockquote>

<h3>2nd advice : DON&#8217;T PANIC NOW… <code>Enumeratee</code> concept is really simple to understand</h3>

<div class="well">
<h3><code>Enumeratee</code> is just a <i>pipe adapter</i> between <code>Enumerator</code> and <code>Iteratee</code></h3>
</div>


<br/>


<p>Imagine you have an <code>Enumerator[Int]</code> and an <code>Iteratee[String, Lis[String]]</code>.<br/>
You can transform an <code>Int</code> into a <code>String</code>, isn&#8217;t it?<br/>
So you should be able to transform the chunks of <code>Int</code> into chunks of <code>String</code> and then inject them into the Iteratee.</p>

<p>Enumeratee is there to save you.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">enumerator</span> <span class="k">=</span> <span class="nc">Enumerator</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="mi">345</span><span class="o">,</span> <span class="mi">456</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">enumerator</span> <span class="n">through</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="k">_</span><span class="o">.</span><span class="n">toString</span> <span class="o">)</span> <span class="n">run</span> <span class="n">iteratee</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happened there?</p>

<p><strong>You just piped <code>Enumerator[Int]</code> through and <code>Enumeratee[Int, String]</code> into <code>Iteratee[String, List[String]]</code></strong></p>

<p>In 2 steps:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">stringEnumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">enumerator</span> <span class="n">through</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="k">_</span><span class="o">.</span><span class="n">toString</span> <span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">stringEnumerator</span> <span class="n">run</span> <span class="n">iteratee</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, you may understand that <code>Enumeratee</code> is a very useful tool to convert your custom <code>Enumerator</code> to be used with generic <code>Iteratee</code> provided by Play2 API.<br/>
You&#8217;ll see that this is certainly the tool you will use the most while coding with <code>Enumerator</code> / <code>Iteratee</code>.</p>

<h3><code>Enumeratee</code> can be applied to an <code>Enumerator</code> without <code>Iteratee</code></h3>

<p>This is a very useful feature of <code>Enumeratee</code>.
You can transform Enumerate[From] into Enumerator[To] with an Enumeratee[From, To]</p>

<p>Signature of <code>Enumeratee</code> is quite explicit:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Enumeratee</span><span class="o">[</span><span class="kt">From</span>, <span class="kt">To</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you can use it as following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">stringEnumerator</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">enumerator</span> <span class="n">through</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">(</span> <span class="k">_</span><span class="o">.</span><span class="n">toString</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Enumeratee</code> can transform an <code>Iteratee</code></h3>

<p>This is a bit stranger feature because you can transform an <code>Iteratee[To, A]</code> to an <code>Iteratee[From, A]</code> with <code>Enumeratee[From, To]</code></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">stringIteratee</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">intIteratee</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">](</span> <span class="k">_</span><span class="o">.</span><span class="n">toString</span> <span class="o">)</span> <span class="n">transform</span> <span class="n">stringIteratee</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Enumeratee</code> can be composed with an <code>Enumeratee</code></h3>

<p>Yes, this is the final very useful feature of <code>Enumeratee</code>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">enumeratee1</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">Type1</span>, <span class="kt">Type2</span><span class="o">]</span> <span class="k">=</span> <span class="err">…</span>
</span><span class='line'><span class="k">val</span> <span class="n">enumeratee2</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">Type2</span>, <span class="kt">Type3</span><span class="o">]</span> <span class="k">=</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">enumeratee3</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">Type1</span>, <span class="kt">Type3</span><span class="o">]</span> <span class="k">=</span> <span class="n">enumeratee1</span> <span class="n">compose</span> <span class="n">enumeratee2</span>
</span></code></pre></td></tr></table></div></figure>


<p>So once again, very easy to see that you can create your generic <code>Enumeratees</code> and then compose them into the custom <code>Enumeratee</code> you need for your custom <code>Enumerator</code> / <code>Iteratee</code>.</p>

<hr />

<h2>Conclusion</h2>

<p>Now I hope you have a bit more information and are not lost anymore.<br/>
Next step is to use <code>Iteratee</code> / <code>Enumerator</code> / <code>Enumeratee</code> all together.<br/>
I&#8217;ll write other articles presenting more specific and practical ideas and concepts and samples…<br/>
There are a lot of interesting features that are worth precise explanations.<br/>
Understanding clearly what&#8217;s an <code>Iteratee</code> is important because it helps writing new <code>Iteratees</code> but you can also stay superficial and use the many helpers provided by Play2 Iteratee API.</p>

<p><em>Ok, documentation is not yet as complete as it should but we are working on this!!!</em></p>

<div class="well">
<h3>Anyway, why should I use <code>Iteratee</code> / <code>Enumerator</code> / <code>Enumeratee</code> ?</h3>
<p>I want to tell you that <code>Iteratee</code> / <code>Enumerator</code> / <code>Enumeratee</code> is not a funny tool for people found of functional constructions.  
They are useful in many domains and once you will understand how they work, I can promise you that you will begin to use it more and more.</p>
<p>Modern web applications are not only dynamically generated pages anymore. Now you manipulate flows of data coming from different sources, in different formats, with different availability timing.
You may have to serve huge amount of data to huge number of clients and to work in distributed environments.</p>
<p><code>Iteratee</code> are made for those cases because there are safe, immutable and very good to deal with data flows in realtime.
Let&#8217;s tell the buzzword you can see more & more <i>&#8220;Realtime WebApp&#8221;</i> and <code>Iteratee</code> is associated to that ;)</p>
</div>


<blockquote><h4>Note on weird operators</h4>

<p>You will certainly see lots of those operators in code based on <code>Iteratee</code> / <code>Enumerator</code> / <code>Enumeratee</code> such as <code>&amp;&gt;</code>, <code>|&gt;&gt;</code>, <code>|&gt;&gt;&gt;</code> and the famous fish operator <code>&gt;&lt;&gt;</code>.
Don&#8217;t focus on those operators right now, there are just aliases of real explicit words such as <code>through</code>, <code>apply</code>, <code>applyOn</code> or <code>compose</code>.
I&#8217;ll try to write an article about those operators to demystify them. With practice, some people will find the code with operators clearer and more compact, some people will prefer words.</p></blockquote>

<p>Have fun</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xmlsoap-ersatz]]></title>
    <link href="http://www.mandubian.com/2012/07/14/xmlsoap-ersatz/"/>
    <updated>2012-07-14T00:59:00+02:00</updated>
    <id>http://www.mandubian.com/2012/07/14/xmlsoap-ersatz</id>
    <content type="html"><![CDATA[<h1>XML/SOAP to/from scala structures with <em>xmlsoap-ersatz</em></h1>

<blockquote><p><a href="https://github.com/mandubian/scala-xmlsoap-ersatz">xmlsoap-ersatz</a> is a toolset to help people serialize/deserialize XML/SOAP with Scala. It doesn&#8217;t try to respect any standard but it allows to interprete and generate any XML format with any standard you require.</p></blockquote>

<p>It was developed to be used with <a href="http://www.playframework.org">Play2/Scala</a> but it can work standalone as it doesn&#8217;t depend on any other library.</p>

<p>xmlsoap-ersatz uses the same design as Play2 Json serialization/deserialization based on <strong>implicit typeclasses</strong>. This mechanism is very clean, robust and generic. Please note that implicits are NOT used as implicit CONVERSIONS which are often tricky and sometimes dangerous!</p>

<p><em>xmlsoap-ersatz is still draft library so if you discover anything wrong, don&#8217;t hesitate to tell it</em></p>

<blockquote><p>xmlsoap-ersatz is an <a href="https://github.com/mandubian/scala-xmlsoap-ersatz">opensource public github</a> so don&#8217;t hesitate to contribute and give ideas :)</p>

<p>Full doc is in <a href="https://github.com/mandubian/scala-xmlsoap-ersatz/wiki">Github Wiki</a></p></blockquote>

<br/>


<h1>XML Scala serialization/deserialization</h1>

<h3>Imagine you want to map this XML to a case class</h3>

<pre><code>val fooXml = &lt;foo&gt;
    &lt;id&gt;1234&lt;/id&gt;
    &lt;name&gt;brutus&lt;/name&gt;
    &lt;age&gt;23&lt;/age&gt;
&lt;/foo&gt;
</code></pre>

<br/>


<h3>You want to map it to:</h3>

<pre><code>case class Foo(id: Long, name: String, age: Option[Int])
Foo(id=1234L, name="brutus", age=Some(23))
</code></pre>

<ul>
<li>case class is a sample but the mechanism also works with any structure in Scala such as tuples</li>
<li><code>age</code> field is <code>Option[Int]</code> meaning it might not appear in the XML (<code>None</code> in this case)</li>
</ul>


<br/>


<h3>So how would you write that with <em>xmlsoap ersatz</em>?</h3>

<pre><code>import play2.tools.xml._
import play2.tools.xml.DefaultImplicits._
[...]
val foo = EXML.fromXML[Foo](fooXml)
assert(foo == Foo(1234L, "brutus", Some(23)))

val fooXml2 = EXML.toXML(foo)
assert(fooXml2 == fooXml)
</code></pre>

<p>As you may imagine, this is not so simple as <code>fromXML</code>/<code>toXML</code> signatures are the following:</p>

<pre><code>object EXML {
    def toXML[T](t: T, base: xml.NodeSeq = xml.NodeSeq.Empty)(implicit w: XMLWriter[T]): xml.NodeSeq
    def fromXML[T](x: xml.NodeSeq)(implicit r: XMLReader[T]): Option[T] 
}
</code></pre>

<p>You can see the <strong>implicit typeclasses <code>XMLReader</code>/<code>XMLWriter</code></strong> which define the mapper to/from XML to your case class.
So in order <code>EXML.fromXML</code>/<code>EXML.toXML</code> to work properly, you should define an implicit XML reader/writer for your specific structure in your scope.
It can be done at once by extending <code>XMLFormatter[T]</code>:</p>

<pre><code>trait XMLFormatter[T] extends XMLReader[T] with XMLWriter[T] {
    def read(x: xml.NodeSeq): Option[T]
    def write(f: T, base: xml.NodeSeq): xml.NodeSeq
}
</code></pre>

<br/>


<h3>Defining the implicit  for your case class</h3>

<pre><code>implicit object FooXMLF extends XMLFormatter[Foo] {
  def read(x: xml.NodeSeq): Option[Foo] = {
    for( 
      id &lt;- EXML.fromXML[Long](x \ "id");
      name &lt;- EXML.fromXML[String](x \ "name");
      age &lt;- EXML.fromXML[Option[Int]](x \ "age")
    ) yield(Foo(id, name, age))
  }

  def write(f: Foo, base: xml.NodeSeq): xml.NodeSeq = {
    &lt;foo&gt;
      &lt;id&gt;{ f.id }&lt;/id&gt;
      &lt;name&gt;{ f.name }&lt;/name&gt;
      { EXML.toXML(f.age, &lt;age/&gt;) }
    &lt;/foo&gt;
  }
}
</code></pre>

<p>You may think this is a bit tedious to write but this is quite easy after a few tries and the most important:</p>

<blockquote><p>This mechanism provides a very precise and simple control on what you want to do.</p></blockquote>

<p>Please note:</p>

<ul>
<li>the <code>write</code> function uses Scala XML literals simply.</li>
<li>the <code>implicit</code> is important: you can declare it once in your scope and that&#8217;s all.</li>
<li><p>the <code>age</code> field in <code>write</code> requires a special syntax:</p>

<p>  <code>{ EXML.toXML(f.age, &lt;age/&gt;) }</code> means: <code>&lt;age/&gt;</code> is used as the base node and will generate following XML:</p>

<ul>
<li>if age is <code>Some(23)</code>: <code>&lt;age&gt;23&lt;/age&gt;</code></li>
<li>if age is <code>None</code>: <code>&lt;age xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /&gt;</code> (<em>standards defines this but you can redefine it as you want</em>)</li>
</ul>
</li>
<li><p>the <code>base</code> field in <code>write</code> function can be used to pass a parent context node to the writer. It is helpful in case you need to add attributes to parent node for ex as in the case of <code>age: Option[Int]</code> field.</p>

<blockquote><p>But don&#8217;t forget that Scala XML nodes are immutable and that you can just copy the nodes you pass to a function.</p></blockquote></li>
<li><p>the <em>for-comprehension</em> is just a shortcut but you could write it using flatMap/map also:</p></li>
</ul>


<p>For ex:</p>

<pre><code>def read(x: xml.NodeSeq): Option[Foo] = {
  EXML.fromXML[Long](x \ "id").flatMap{ id =&gt;
    EXML.fromXML[String](x \ "name").flatMap { name =&gt;
      EXML.fromXML[Int](x \ "age").map{ age =&gt;
        Foo(id, name, age)
      }
    }
  }
}
</code></pre>

<br/>


<h3>The complete code</h3>

<pre><code>import play2.tools.xml._
import play2.tools.xml.DefaultImplicits._

implicit object FooXMLF extends XMLFormatter[Foo] {
  def read(x: xml.NodeSeq): Option[Foo] = {
    for( 
      id &lt;- EXML.fromXML[Long](x \ "id");
      name &lt;- EXML.fromXML[String](x \ "name");
      age &lt;- EXML.fromXML[Option[Int]](x \ "age");
    ) yield(Foo(id, name, age))
  }

  def write(f: Foo, base: xml.NodeSeq): xml.NodeSeq = {
    &lt;foo&gt;
      &lt;id&gt;{ f.id }&lt;/id&gt;
      &lt;name&gt;{ f.name }&lt;/name&gt;
      { EXML.toXML(f.age, &lt;age/&gt;) }
    &lt;/foo&gt;
  }
}

val foo = EXML.fromXML[Foo](fooXml)
assert(foo == Foo(1234L, "albert", 23)

val fooXml = EXML.toXML(foo)
assert(fooXml == fooXml)
</code></pre>

<h1>Integrate with Play2/Scala</h1>

<h2>Add xmlsoap-ersatz to your configuration (ersatz is deployed as a maven repo on github)</h2>

<pre><code>object ApplicationBuild extends Build {

  val appName         = "play2-xmlsoap"
  val appVersion      = "1.0-SNAPSHOT"

  val appDependencies = Seq(
    "play2.tools.xml" %% "xmlsoap-ersatz" % "0.1-SNAPSHOT"
  )  

  val main = PlayProject(appName, appVersion, appDependencies, mainLang = SCALA).settings(
    resolvers += ("mandubian-mvn snapshots" at "https://github.com/mandubian/mandubian-mvn/raw/master/snapshots")
  )
}
</code></pre>

<h2>Use xmlsoap-ersatz in your controller</h2>

<pre><code>package controllers

import play.api._
import play.api.mvc._
import play2.tools.xml._
import play2.tools.xml.DefaultImplicits._

object Application extends Controller {
   case class Foo(id: Long, name: String, age: Option[Int])

   implicit object FooXMLF extends XMLFormatter[Foo] {
      def read(x: xml.NodeSeq): Option[Foo] = {
      for( 
          id &lt;- EXML.fromXML[Long](x \ "id");
          name &lt;- EXML.fromXML[String](x \ "name");
          age &lt;- EXML.fromXML[Option[Int]](x \ "age")
        ) yield(Foo(id, name, age))
      }

      def write(f: Foo, base: xml.NodeSeq): xml.NodeSeq = {
        &lt;foo&gt;
          &lt;id&gt;{ f.id }&lt;/id&gt;
          &lt;name&gt;{ f.name }&lt;/name&gt;
          { EXML.toXML(f.age, &lt;age/&gt;) }
        &lt;/foo&gt;
     }
  }  

  def foo = Action(parse.xml) { request =&gt;
    EXML.fromXML[Foo](request.body).map { foo =&gt;
      Ok(EXML.toXML(foo))
    }.getOrElse{
      BadRequest("Expecting Foo XML data")
    }
  }

}
</code></pre>

<h2>Finally the route in <code>conf/routes</code></h2>

<pre><code>POST    /foo    controllers.Application.foo
</code></pre>

<p>Have fun and don&#8217;t hesitate to contribute</p>
]]></content>
  </entry>
  
</feed>
